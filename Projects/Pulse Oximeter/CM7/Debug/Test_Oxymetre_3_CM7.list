
Test_Oxymetre_3_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000638c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006624  08006624  00016624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006634  08006634  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  08006634  08006634  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006634  08006634  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006634  08006634  00016634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  24000000  0800663c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004128  240000f8  08006730  000200f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24004220  08006730  00024220  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001584d  00000000  00000000  00020122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ce  00000000  00000000  0003596f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00038340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00039550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003897c  00000000  00000000  0003a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187f4  00000000  00000000  00072f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ffd2  00000000  00000000  0008b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020b74a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cec  00000000  00000000  0020b79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000f8 	.word	0x240000f8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800660c 	.word	0x0800660c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000fc 	.word	0x240000fc
 80002d4:	0800660c 	.word	0x0800660c

080002d8 <arm_max_no_idx_f64>:
#else
void arm_max_no_idx_f64(
    const float64_t *pSrc,
    uint32_t   blockSize,
    float64_t *pResult)
{
 80002d8:	b480      	push	{r7}
 80002da:	b089      	sub	sp, #36	; 0x24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
    float64_t   maxValue = F64_MIN;
 80002e4:	f04f 32ff 	mov.w	r2, #4294967295
 80002e8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80002ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float64_t   newVal;
    
    while (blockSize > 0U)
 80002f0:	e017      	b.n	8000322 <arm_max_no_idx_f64+0x4a>
    {
        newVal = *pSrc++;
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	f103 0208 	add.w	r2, r3, #8
 80002f8:	60fa      	str	r2, [r7, #12]
 80002fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
        
        /* compare for the maximum value */
        if (maxValue < newVal)
 8000302:	ed97 6b06 	vldr	d6, [r7, #24]
 8000306:	ed97 7b04 	vldr	d7, [r7, #16]
 800030a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800030e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000312:	d503      	bpl.n	800031c <arm_max_no_idx_f64+0x44>
        {
            /* Update the maximum value and it's index */
            maxValue = newVal;
 8000314:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000318:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }
        
        blockSize --;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3b01      	subs	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
    while (blockSize > 0U)
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d1e4      	bne.n	80002f2 <arm_max_no_idx_f64+0x1a>
    }
    
    *pResult = maxValue;
 8000328:	6879      	ldr	r1, [r7, #4]
 800032a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800032e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000332:	bf00      	nop
 8000334:	3724      	adds	r7, #36	; 0x24
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <arm_min_no_idx_f64>:
 */
void arm_min_no_idx_f64(
    const float64_t *pSrc,
    uint32_t   blockSize,
    float64_t *pResult)
{
 8000340:	b480      	push	{r7}
 8000342:	b08b      	sub	sp, #44	; 0x2c
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
    float64_t   minValue = F64_MAX;
 800034c:	f04f 32ff 	mov.w	r2, #4294967295
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <arm_min_no_idx_f64+0x68>)
 8000352:	e9c7 2308 	strd	r2, r3, [r7, #32]
        minValue = vgetq_lane_f64(minValueV, 1);
    }
    
    blkCnt = blockSize & 1 ;
#else
    blkCnt = blockSize;
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	61fb      	str	r3, [r7, #28]
#endif
    
    while (blkCnt > 0U)
 800035a:	e017      	b.n	800038c <arm_min_no_idx_f64+0x4c>
    {
        newVal = *pSrc++;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f103 0208 	add.w	r2, r3, #8
 8000362:	60fa      	str	r2, [r7, #12]
 8000364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000368:	e9c7 2304 	strd	r2, r3, [r7, #16]
        
        /* compare for the minimum value */
        if (minValue > newVal)
 800036c:	ed97 6b08 	vldr	d6, [r7, #32]
 8000370:	ed97 7b04 	vldr	d7, [r7, #16]
 8000374:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800037c:	dd03      	ble.n	8000386 <arm_min_no_idx_f64+0x46>
        {
            /* Update the minimum value and it's index */
            minValue = newVal;
 800037e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000382:	e9c7 2308 	strd	r2, r3, [r7, #32]
        }
        
        blkCnt --;
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3b01      	subs	r3, #1
 800038a:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800038c:	69fb      	ldr	r3, [r7, #28]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d1e4      	bne.n	800035c <arm_min_no_idx_f64+0x1c>
    }
    
    *pResult = minValue;
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000398:	e9c1 2300 	strd	r2, r3, [r1]
}
 800039c:	bf00      	nop
 800039e:	372c      	adds	r7, #44	; 0x2c
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	7fefffff 	.word	0x7fefffff

080003ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003b0:	4b3d      	ldr	r3, [pc, #244]	; (80004a8 <SystemInit+0xfc>)
 80003b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b6:	4a3c      	ldr	r2, [pc, #240]	; (80004a8 <SystemInit+0xfc>)
 80003b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003c0:	4b39      	ldr	r3, [pc, #228]	; (80004a8 <SystemInit+0xfc>)
 80003c2:	691b      	ldr	r3, [r3, #16]
 80003c4:	4a38      	ldr	r2, [pc, #224]	; (80004a8 <SystemInit+0xfc>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003cc:	4b37      	ldr	r3, [pc, #220]	; (80004ac <SystemInit+0x100>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f003 030f 	and.w	r3, r3, #15
 80003d4:	2b06      	cmp	r3, #6
 80003d6:	d807      	bhi.n	80003e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003d8:	4b34      	ldr	r3, [pc, #208]	; (80004ac <SystemInit+0x100>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f023 030f 	bic.w	r3, r3, #15
 80003e0:	4a32      	ldr	r2, [pc, #200]	; (80004ac <SystemInit+0x100>)
 80003e2:	f043 0307 	orr.w	r3, r3, #7
 80003e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003e8:	4b31      	ldr	r3, [pc, #196]	; (80004b0 <SystemInit+0x104>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a30      	ldr	r2, [pc, #192]	; (80004b0 <SystemInit+0x104>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003f4:	4b2e      	ldr	r3, [pc, #184]	; (80004b0 <SystemInit+0x104>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003fa:	4b2d      	ldr	r3, [pc, #180]	; (80004b0 <SystemInit+0x104>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	492c      	ldr	r1, [pc, #176]	; (80004b0 <SystemInit+0x104>)
 8000400:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <SystemInit+0x108>)
 8000402:	4013      	ands	r3, r2
 8000404:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000406:	4b29      	ldr	r3, [pc, #164]	; (80004ac <SystemInit+0x100>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f003 0308 	and.w	r3, r3, #8
 800040e:	2b00      	cmp	r3, #0
 8000410:	d007      	beq.n	8000422 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000412:	4b26      	ldr	r3, [pc, #152]	; (80004ac <SystemInit+0x100>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f023 030f 	bic.w	r3, r3, #15
 800041a:	4a24      	ldr	r2, [pc, #144]	; (80004ac <SystemInit+0x100>)
 800041c:	f043 0307 	orr.w	r3, r3, #7
 8000420:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000422:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <SystemInit+0x104>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000428:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <SystemInit+0x104>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800042e:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <SystemInit+0x104>)
 8000430:	2200      	movs	r2, #0
 8000432:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <SystemInit+0x104>)
 8000436:	4a20      	ldr	r2, [pc, #128]	; (80004b8 <SystemInit+0x10c>)
 8000438:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <SystemInit+0x104>)
 800043c:	4a1f      	ldr	r2, [pc, #124]	; (80004bc <SystemInit+0x110>)
 800043e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <SystemInit+0x104>)
 8000442:	4a1f      	ldr	r2, [pc, #124]	; (80004c0 <SystemInit+0x114>)
 8000444:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <SystemInit+0x104>)
 8000448:	2200      	movs	r2, #0
 800044a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <SystemInit+0x104>)
 800044e:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <SystemInit+0x114>)
 8000450:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <SystemInit+0x104>)
 8000454:	2200      	movs	r2, #0
 8000456:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <SystemInit+0x104>)
 800045a:	4a19      	ldr	r2, [pc, #100]	; (80004c0 <SystemInit+0x114>)
 800045c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <SystemInit+0x104>)
 8000460:	2200      	movs	r2, #0
 8000462:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <SystemInit+0x104>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <SystemInit+0x104>)
 800046a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800046e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <SystemInit+0x104>)
 8000472:	2200      	movs	r2, #0
 8000474:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <SystemInit+0x118>)
 8000478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <SystemInit+0x118>)
 800047c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000480:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <SystemInit+0x11c>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <SystemInit+0x120>)
 8000488:	4013      	ands	r3, r2
 800048a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800048e:	d202      	bcs.n	8000496 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <SystemInit+0x124>)
 8000492:	2201      	movs	r2, #1
 8000494:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <SystemInit+0x128>)
 8000498:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800049c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000ed00 	.word	0xe000ed00
 80004ac:	52002000 	.word	0x52002000
 80004b0:	58024400 	.word	0x58024400
 80004b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80004b8:	02020200 	.word	0x02020200
 80004bc:	01ff0000 	.word	0x01ff0000
 80004c0:	01010280 	.word	0x01010280
 80004c4:	580000c0 	.word	0x580000c0
 80004c8:	5c001000 	.word	0x5c001000
 80004cc:	ffff0000 	.word	0xffff0000
 80004d0:	51008108 	.word	0x51008108
 80004d4:	52004000 	.word	0x52004000

080004d8 <CircBuff_Init>:


#include "CircularBuffer.h"

uint8_t CircBuff_Init(Circular_Buffer* CircBuff,uint16_t Size)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	807b      	strh	r3, [r7, #2]

	uint8_t RetVal_u8 = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
	if(Size<MAX_BUFFER){
 80004e8:	887b      	ldrh	r3, [r7, #2]
 80004ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d829      	bhi.n	8000546 <CircBuff_Init+0x6e>
		CircBuff->Write_u16 = 0;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	809a      	strh	r2, [r3, #4]
		CircBuff->Read_u16 = 0;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	80da      	strh	r2, [r3, #6]
		CircBuff->Size_u16 = Size;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	887a      	ldrh	r2, [r7, #2]
 8000502:	811a      	strh	r2, [r3, #8]
		CircBuff->Buffer = (double*)malloc(sizeof(double)*CircBuff->Size_u16);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	891b      	ldrh	r3, [r3, #8]
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	4618      	mov	r0, r3
 800050c:	f005 ffbc 	bl	8006488 <malloc>
 8000510:	4603      	mov	r3, r0
 8000512:	461a      	mov	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0 ; i<Size;i++)
 8000518:	2300      	movs	r3, #0
 800051a:	81bb      	strh	r3, [r7, #12]
 800051c:	e00d      	b.n	800053a <CircBuff_Init+0x62>
		{
			CircBuff->Buffer[i] = 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	89bb      	ldrh	r3, [r7, #12]
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	18d1      	adds	r1, r2, r3
 8000528:	f04f 0200 	mov.w	r2, #0
 800052c:	f04f 0300 	mov.w	r3, #0
 8000530:	e9c1 2300 	strd	r2, r3, [r1]
		for(uint16_t i = 0 ; i<Size;i++)
 8000534:	89bb      	ldrh	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	81bb      	strh	r3, [r7, #12]
 800053a:	89ba      	ldrh	r2, [r7, #12]
 800053c:	887b      	ldrh	r3, [r7, #2]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3ed      	bcc.n	800051e <CircBuff_Init+0x46>
		}
		RetVal_u8=1;
 8000542:	2301      	movs	r3, #1
 8000544:	73fb      	strb	r3, [r7, #15]
	}
	return RetVal_u8;
 8000546:	7bfb      	ldrb	r3, [r7, #15]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <CircBuff_Write>:
{
	free(CircBuff->Buffer);
}

void CircBuff_Write(Circular_Buffer* CircBuff,double Data)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	ed87 0b00 	vstr	d0, [r7]
	CircBuff->Buffer[CircBuff->Write_u16]=Data;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	889b      	ldrh	r3, [r3, #4]
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	18d1      	adds	r1, r2, r3
 8000568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800056c:	e9c1 2300 	strd	r2, r3, [r1]
	CircBuff->Write_u16++;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	889b      	ldrh	r3, [r3, #4]
 8000574:	3301      	adds	r3, #1
 8000576:	b29a      	uxth	r2, r3
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	809a      	strh	r2, [r3, #4]
	if(CircBuff->Write_u16==CircBuff->Size_u16)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	889a      	ldrh	r2, [r3, #4]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	891b      	ldrh	r3, [r3, #8]
 8000584:	429a      	cmp	r2, r3
 8000586:	d102      	bne.n	800058e <CircBuff_Write+0x3e>
	{
		CircBuff->Write_u16 = 0 ;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	809a      	strh	r2, [r3, #4]
	}
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <CircBuff_Backward_Read>:

double CircBuff_Backward_Read(Circular_Buffer* CircBuff)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]

	double Result = CircBuff->Buffer[CircBuff->Read_u16];
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	88db      	ldrh	r3, [r3, #6]
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4413      	add	r3, r2
 80005ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(CircBuff->Read_u16==0){
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	88db      	ldrh	r3, [r3, #6]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d106      	bne.n	80005cc <CircBuff_Backward_Read+0x32>
		CircBuff->Read_u16=(CircBuff->Size_u16)-1;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	891b      	ldrh	r3, [r3, #8]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	80da      	strh	r2, [r3, #6]
 80005ca:	e005      	b.n	80005d8 <CircBuff_Backward_Read+0x3e>
	}
	else{
		CircBuff->Read_u16--;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	88db      	ldrh	r3, [r3, #6]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	80da      	strh	r2, [r3, #6]
	}
	return Result;
 80005d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005dc:	ec43 2b17 	vmov	d7, r2, r3

}
 80005e0:	eeb0 0b47 	vmov.f64	d0, d7
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <MAX30102_Write_Register>:
int32_t an_x[100]={0}; // IR
int32_t an_y[100]={0}; // RED


void MAX30102_Write_Register(uint8_t reg,uint8_t value)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	460a      	mov	r2, r1
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	71bb      	strb	r3, [r7, #6]
	TxBuffer_au8[0] = reg ;
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <MAX30102_Write_Register+0x38>)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	7013      	strb	r3, [r2, #0]
	TxBuffer_au8[1] = value ;
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <MAX30102_Write_Register+0x38>)
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	7053      	strb	r3, [r2, #1]
#if (I2C_MODE == POLLING)
	HAL_I2C_Master_Transmit(USED_I2C_HANDLER, MAX30102_I2C_Write, &TxBuffer_au8[0], 2, HAL_MAX_DELAY);
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2302      	movs	r3, #2
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <MAX30102_Write_Register+0x38>)
 8000616:	21ae      	movs	r1, #174	; 0xae
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MAX30102_Write_Register+0x3c>)
 800061a:	f001 fe59 	bl	80022d0 <HAL_I2C_Master_Transmit>
#elif(I2C_MODE == IT)

#else

#endif
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	24000114 	.word	0x24000114
 800062c:	240001c8 	.word	0x240001c8

08000630 <MAX30102_Read_Register>:
void MAX30102_Read_Register(uint8_t reg,uint8_t* Buffer)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af02      	add	r7, sp, #8
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
	TxBuffer_au8[0] = reg;
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <MAX30102_Read_Register+0x40>)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	7013      	strb	r3, [r2, #0]
#if (I2C_MODE == POLLING)
	HAL_I2C_Master_Transmit(USED_I2C_HANDLER, MAX30102_I2C_Read, &TxBuffer_au8[0], 1, HAL_MAX_DELAY);
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <MAX30102_Read_Register+0x40>)
 800064c:	21af      	movs	r1, #175	; 0xaf
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <MAX30102_Read_Register+0x44>)
 8000650:	f001 fe3e 	bl	80022d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(USED_I2C_HANDLER, MAX30102_I2C_Read, Buffer, 1, HAL_MAX_DELAY);
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2301      	movs	r3, #1
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	21af      	movs	r1, #175	; 0xaf
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MAX30102_Read_Register+0x44>)
 8000662:	f001 ff29 	bl	80024b8 <HAL_I2C_Master_Receive>
#elif(I2C_MODE == IT)

#else

#endif
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000114 	.word	0x24000114
 8000674:	240001c8 	.word	0x240001c8

08000678 <MAX30102_Read_N_Register>:
void MAX30102_Read_N_Register(uint8_t reg,uint8_t* Buffer,uint8_t NumberOfRegisters)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	4613      	mov	r3, r2
 8000686:	71bb      	strb	r3, [r7, #6]
	TxBuffer_au8[0] = reg;
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <MAX30102_Read_N_Register+0x44>)
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	7013      	strb	r3, [r2, #0]
#if (I2C_MODE == POLLING)
	HAL_I2C_Master_Transmit(USED_I2C_HANDLER, MAX30102_I2C_Read, &TxBuffer_au8[0], 1, HAL_MAX_DELAY);
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2301      	movs	r3, #1
 8000696:	4a09      	ldr	r2, [pc, #36]	; (80006bc <MAX30102_Read_N_Register+0x44>)
 8000698:	21af      	movs	r1, #175	; 0xaf
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <MAX30102_Read_N_Register+0x48>)
 800069c:	f001 fe18 	bl	80022d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(USED_I2C_HANDLER, MAX30102_I2C_Read, Buffer, NumberOfRegisters, HAL_MAX_DELAY);
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	f04f 32ff 	mov.w	r2, #4294967295
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	21af      	movs	r1, #175	; 0xaf
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MAX30102_Read_N_Register+0x48>)
 80006b0:	f001 ff02 	bl	80024b8 <HAL_I2C_Master_Receive>
#elif(I2C_MODE == IT)

#else

#endif
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	24000114 	.word	0x24000114
 80006c0:	240001c8 	.word	0x240001c8

080006c4 <MAX30102_Bit_Mask_Register>:
void MAX30102_Bit_Mask_Register(uint8_t reg, uint8_t mask , uint8_t value)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	460b      	mov	r3, r1
 80006d0:	71bb      	strb	r3, [r7, #6]
 80006d2:	4613      	mov	r3, r2
 80006d4:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_u8;
	MAX30102_Read_Register(reg, &Temp_u8);
 80006d6:	f107 020f 	add.w	r2, r7, #15
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4611      	mov	r1, r2
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffa6 	bl	8000630 <MAX30102_Read_Register>
	Temp_u8 = (Temp_u8 & mask)|value ;
 80006e4:	7bfa      	ldrb	r2, [r7, #15]
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	4013      	ands	r3, r2
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	73fb      	strb	r3, [r7, #15]
	MAX30102_Write_Register(reg, Temp_u8);
 80006f4:	7bfa      	ldrb	r2, [r7, #15]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff78 	bl	80005f0 <MAX30102_Write_Register>
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <MAX30102_Clear>:

void MAX30102_Clear()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	MAX30102_Read_Register(MAX30102_INTSTAT1, &RxBuffer_au8[0]);
 800070c:	490a      	ldr	r1, [pc, #40]	; (8000738 <MAX30102_Clear+0x30>)
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ff8e 	bl	8000630 <MAX30102_Read_Register>
	MAX30102_Read_Register(MAX30102_INTSTAT2, &RxBuffer_au8[0]);
 8000714:	4908      	ldr	r1, [pc, #32]	; (8000738 <MAX30102_Clear+0x30>)
 8000716:	2001      	movs	r0, #1
 8000718:	f7ff ff8a 	bl	8000630 <MAX30102_Read_Register>
	MAX30102_Write_Register(MAX30102_FIFOWRITEPTR, 0);
 800071c:	2100      	movs	r1, #0
 800071e:	2004      	movs	r0, #4
 8000720:	f7ff ff66 	bl	80005f0 <MAX30102_Write_Register>
	MAX30102_Write_Register(MAX30102_FIFOOVERFLOW, 0);
 8000724:	2100      	movs	r1, #0
 8000726:	2005      	movs	r0, #5
 8000728:	f7ff ff62 	bl	80005f0 <MAX30102_Write_Register>
	MAX30102_Write_Register(MAX30102_FIFOREADPTR, 0);
 800072c:	2100      	movs	r1, #0
 800072e:	2006      	movs	r0, #6
 8000730:	f7ff ff5e 	bl	80005f0 <MAX30102_Write_Register>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	24000118 	.word	0x24000118

0800073c <MAX30102_Reset>:

void MAX30102_Reset()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	MAX30102_Bit_Mask_Register(MAX30102_MODECONFIG, MAX30102_RESET_MASK, MAX30102_RESET);
 8000740:	2240      	movs	r2, #64	; 0x40
 8000742:	21bf      	movs	r1, #191	; 0xbf
 8000744:	2009      	movs	r0, #9
 8000746:	f7ff ffbd 	bl	80006c4 <MAX30102_Bit_Mask_Register>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MAX30102_EnableSlot>:

void MAX30102_EnableSlot(uint8_t SlotNumber , uint8_t Device)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	460a      	mov	r2, r1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	4613      	mov	r3, r2
 800075e:	71bb      	strb	r3, [r7, #6]
	switch(SlotNumber)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	3b01      	subs	r3, #1
 8000764:	2b03      	cmp	r3, #3
 8000766:	d82b      	bhi.n	80007c0 <MAX30102_EnableSlot+0x70>
 8000768:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <MAX30102_EnableSlot+0x20>)
 800076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076e:	bf00      	nop
 8000770:	08000781 	.word	0x08000781
 8000774:	0800078f 	.word	0x0800078f
 8000778:	080007a1 	.word	0x080007a1
 800077c:	080007af 	.word	0x080007af
	{
		case (1):
		{
			MAX30102_Bit_Mask_Register(MAX30102_MULTILEDCONFIG1, MAX30102_SLOT1_MASK, Device);
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	461a      	mov	r2, r3
 8000784:	21f8      	movs	r1, #248	; 0xf8
 8000786:	2011      	movs	r0, #17
 8000788:	f7ff ff9c 	bl	80006c4 <MAX30102_Bit_Mask_Register>
		}break;
 800078c:	e019      	b.n	80007c2 <MAX30102_EnableSlot+0x72>
		case (2):
		{
			MAX30102_Bit_Mask_Register(MAX30102_MULTILEDCONFIG1, MAX30102_SLOT2_MASK, Device << 4);
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	b2db      	uxtb	r3, r3
 8000794:	461a      	mov	r2, r3
 8000796:	218f      	movs	r1, #143	; 0x8f
 8000798:	2011      	movs	r0, #17
 800079a:	f7ff ff93 	bl	80006c4 <MAX30102_Bit_Mask_Register>
		}break;
 800079e:	e010      	b.n	80007c2 <MAX30102_EnableSlot+0x72>
		case (3):
		{
			MAX30102_Bit_Mask_Register(MAX30102_MULTILEDCONFIG2, MAX30102_SLOT3_MASK, Device);
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	461a      	mov	r2, r3
 80007a4:	21f8      	movs	r1, #248	; 0xf8
 80007a6:	2012      	movs	r0, #18
 80007a8:	f7ff ff8c 	bl	80006c4 <MAX30102_Bit_Mask_Register>
		}break;
 80007ac:	e009      	b.n	80007c2 <MAX30102_EnableSlot+0x72>
		case (4):
		{
			MAX30102_Bit_Mask_Register(MAX30102_MULTILEDCONFIG2, MAX30102_SLOT4_MASK, Device << 4);
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	218f      	movs	r1, #143	; 0x8f
 80007b8:	2012      	movs	r0, #18
 80007ba:	f7ff ff83 	bl	80006c4 <MAX30102_Bit_Mask_Register>
		}break;
 80007be:	e000      	b.n	80007c2 <MAX30102_EnableSlot+0x72>
		default:
		{

		}break;
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop

080007cc <MAX30102_Init>:

void MAX30102_Init()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

	MAX30102_Read_Register(MAX30102_PARTID, &DeviceID_u8);
 80007d2:	491f      	ldr	r1, [pc, #124]	; (8000850 <MAX30102_Init+0x84>)
 80007d4:	20ff      	movs	r0, #255	; 0xff
 80007d6:	f7ff ff2b 	bl	8000630 <MAX30102_Read_Register>

	MAX30102_Reset();
 80007da:	f7ff ffaf 	bl	800073c <MAX30102_Reset>

	// Sample Average = 1		// 4
	MAX30102_Bit_Mask_Register(MAX30102_FIFOCONFIG, MAX30102_SAMPLEAVG_MASK, MAX30102_SAMPLEAVG_1);
 80007de:	2200      	movs	r2, #0
 80007e0:	21e0      	movs	r1, #224	; 0xe0
 80007e2:	2008      	movs	r0, #8
 80007e4:	f7ff ff6e 	bl	80006c4 <MAX30102_Bit_Mask_Register>

	// Enable FIFO Rollover
	MAX30102_Bit_Mask_Register(MAX30102_FIFOCONFIG, MAX30102_ROLLOVER_MASK, MAX30102_ROLLOVER_ENABLE);
 80007e8:	2210      	movs	r2, #16
 80007ea:	21ef      	movs	r1, #239	; 0xef
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff ff69 	bl	80006c4 <MAX30102_Bit_Mask_Register>

	// LED Mode = SpO2 Moade
	MAX30102_Bit_Mask_Register(MAX30102_MODECONFIG, MAX30102_MODE_MASK, MAX30102_MODE_REDIRONLY);
 80007f2:	2203      	movs	r2, #3
 80007f4:	21f8      	movs	r1, #248	; 0xf8
 80007f6:	2009      	movs	r0, #9
 80007f8:	f7ff ff64 	bl	80006c4 <MAX30102_Bit_Mask_Register>

	// ADC Range = 4096
	MAX30102_Bit_Mask_Register(MAX30102_SPO2, MAX30102_ADCRANGE_MASK, MAX30102_ADCRANGE_4096);
 80007fc:	2220      	movs	r2, #32
 80007fe:	219f      	movs	r1, #159	; 0x9f
 8000800:	200a      	movs	r0, #10
 8000802:	f7ff ff5f 	bl	80006c4 <MAX30102_Bit_Mask_Register>

	// Sample Rate = 1000		// 100
	MAX30102_Bit_Mask_Register(MAX30102_SPO2, MAX30102_SAMPLERATE_MASK, MAX30102_SAMPLERATE_1000);
 8000806:	2214      	movs	r2, #20
 8000808:	21e3      	movs	r1, #227	; 0xe3
 800080a:	200a      	movs	r0, #10
 800080c:	f7ff ff5a 	bl	80006c4 <MAX30102_Bit_Mask_Register>

	// Pulse Width =  69		// 411
	MAX30102_Bit_Mask_Register(MAX30102_SPO2, MAX30102_PULSEWIDTH_MASK, MAX30102_PULSEWIDTH_69);
 8000810:	2200      	movs	r2, #0
 8000812:	21fc      	movs	r1, #252	; 0xfc
 8000814:	200a      	movs	r0, #10
 8000816:	f7ff ff55 	bl	80006c4 <MAX30102_Bit_Mask_Register>

	// Power Level
	uint8_t value = 60 ;
 800081a:	233c      	movs	r3, #60	; 0x3c
 800081c:	71fb      	strb	r3, [r7, #7]
	MAX30102_Write_Register(MAX30102_LED1_PULSEAMP, value);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4619      	mov	r1, r3
 8000822:	200c      	movs	r0, #12
 8000824:	f7ff fee4 	bl	80005f0 <MAX30102_Write_Register>
	MAX30102_Write_Register(MAX30102_LED2_PULSEAMP, value);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4619      	mov	r1, r3
 800082c:	200d      	movs	r0, #13
 800082e:	f7ff fedf 	bl	80005f0 <MAX30102_Write_Register>

	// Enable the reading of the 2 LEDs
	MAX30102_EnableSlot(1,SLOT_RED_LED);
 8000832:	2101      	movs	r1, #1
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ff8b 	bl	8000750 <MAX30102_EnableSlot>
	MAX30102_EnableSlot(2,SLOT_IR_LED);
 800083a:	2102      	movs	r1, #2
 800083c:	2002      	movs	r0, #2
 800083e:	f7ff ff87 	bl	8000750 <MAX30102_EnableSlot>

	// Clear the FIFO
	MAX30102_Clear();
 8000842:	f7ff ff61 	bl	8000708 <MAX30102_Clear>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	24000138 	.word	0x24000138

08000854 <MAX30102_GetValues>:

void MAX30102_GetValues(uint32_t* RedBuffer,uint32_t* IrBuffer)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	MAX30102_Clear();
 800085e:	f7ff ff53 	bl	8000708 <MAX30102_Clear>
	MAX30102_Read_N_Register(MAX30102_FIFODATA, &RxBuffer_au8[0], 6);
 8000862:	2206      	movs	r2, #6
 8000864:	4915      	ldr	r1, [pc, #84]	; (80008bc <MAX30102_GetValues+0x68>)
 8000866:	2007      	movs	r0, #7
 8000868:	f7ff ff06 	bl	8000678 <MAX30102_Read_N_Register>
	uint8_t Temp[4]={0};
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
	Temp[3] = 0 ;
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]
	Temp[2] = RxBuffer_au8[0];
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MAX30102_GetValues+0x68>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	73bb      	strb	r3, [r7, #14]
	Temp[1] = RxBuffer_au8[1];
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MAX30102_GetValues+0x68>)
 800087c:	785b      	ldrb	r3, [r3, #1]
 800087e:	737b      	strb	r3, [r7, #13]
	Temp[0] = RxBuffer_au8[2];
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MAX30102_GetValues+0x68>)
 8000882:	789b      	ldrb	r3, [r3, #2]
 8000884:	733b      	strb	r3, [r7, #12]
 8000886:	68fa      	ldr	r2, [r7, #12]
	memcpy(RedBuffer,Temp,sizeof(*RedBuffer));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	601a      	str	r2, [r3, #0]
	*RedBuffer &= 0x3FFFF;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	601a      	str	r2, [r3, #0]
	Temp[3] = 0 ;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
	Temp[2] = RxBuffer_au8[3];
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MAX30102_GetValues+0x68>)
 800089e:	78db      	ldrb	r3, [r3, #3]
 80008a0:	73bb      	strb	r3, [r7, #14]
	Temp[1] = RxBuffer_au8[4];
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MAX30102_GetValues+0x68>)
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	737b      	strb	r3, [r7, #13]
	Temp[0] = RxBuffer_au8[5];
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <MAX30102_GetValues+0x68>)
 80008aa:	795b      	ldrb	r3, [r3, #5]
 80008ac:	733b      	strb	r3, [r7, #12]
 80008ae:	68fa      	ldr	r2, [r7, #12]
	memcpy(IrBuffer,Temp,sizeof(*IrBuffer));
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	601a      	str	r2, [r3, #0]

//	*RedBuffer = (RxBuffer_au8[2]|(RxBuffer_au8[1]<<8)|((RxBuffer_au8[0]&0b11)<<16))>>3;
//	*IrBuffer = (RxBuffer_au8[5]|(RxBuffer_au8[4]<<8)|((RxBuffer_au8[3]&0b11)<<16))>>3;
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000118 	.word	0x24000118

080008c0 <IIR_Init>:
double Minim2 = 0 ;

double Spo2 = 0 ;

uint8_t IIR_Init(IIR_Filter* IIR,uint16_t SizeNum, double* CoeffNum,uint16_t SizeDenum, double* CoeffDenum)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	461a      	mov	r2, r3
 80008cc:	460b      	mov	r3, r1
 80008ce:	817b      	strh	r3, [r7, #10]
 80008d0:	4613      	mov	r3, r2
 80008d2:	813b      	strh	r3, [r7, #8]
	uint8_t RetVal_u8 = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	74fb      	strb	r3, [r7, #19]

	IIR->CoeffDenum =(double*) malloc(sizeof(double)*SizeDenum);
 80008d8:	893b      	ldrh	r3, [r7, #8]
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4618      	mov	r0, r3
 80008de:	f005 fdd3 	bl	8006488 <malloc>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	605a      	str	r2, [r3, #4]
	IIR->CoeffNum =(double*) malloc(sizeof(double)*SizeNum);
 80008ea:	897b      	ldrh	r3, [r7, #10]
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 fdca 	bl	8006488 <malloc>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	601a      	str	r2, [r3, #0]
	IIR->SizeDenum = SizeDenum;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	893a      	ldrh	r2, [r7, #8]
 8000900:	815a      	strh	r2, [r3, #10]
	IIR->SizeNum = SizeNum;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	897a      	ldrh	r2, [r7, #10]
 8000906:	811a      	strh	r2, [r3, #8]
	for(uint16_t i=0;i<SizeDenum;i++)
 8000908:	2300      	movs	r3, #0
 800090a:	82fb      	strh	r3, [r7, #22]
 800090c:	e00f      	b.n	800092e <IIR_Init+0x6e>
	{
		IIR->CoeffDenum[i] = CoeffDenum[i];
 800090e:	8afb      	ldrh	r3, [r7, #22]
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	6a3a      	ldr	r2, [r7, #32]
 8000914:	4413      	add	r3, r2
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	6851      	ldr	r1, [r2, #4]
 800091a:	8afa      	ldrh	r2, [r7, #22]
 800091c:	00d2      	lsls	r2, r2, #3
 800091e:	4411      	add	r1, r2
 8000920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000924:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i=0;i<SizeDenum;i++)
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	3301      	adds	r3, #1
 800092c:	82fb      	strh	r3, [r7, #22]
 800092e:	8afa      	ldrh	r2, [r7, #22]
 8000930:	893b      	ldrh	r3, [r7, #8]
 8000932:	429a      	cmp	r2, r3
 8000934:	d3eb      	bcc.n	800090e <IIR_Init+0x4e>
	}
	for(uint16_t i=0;i<SizeNum;i++)
 8000936:	2300      	movs	r3, #0
 8000938:	82bb      	strh	r3, [r7, #20]
 800093a:	e00f      	b.n	800095c <IIR_Init+0x9c>
	{

		IIR->CoeffNum[i] = CoeffNum[i];
 800093c:	8abb      	ldrh	r3, [r7, #20]
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	4413      	add	r3, r2
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	6811      	ldr	r1, [r2, #0]
 8000948:	8aba      	ldrh	r2, [r7, #20]
 800094a:	00d2      	lsls	r2, r2, #3
 800094c:	4411      	add	r1, r2
 800094e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000952:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i=0;i<SizeNum;i++)
 8000956:	8abb      	ldrh	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	82bb      	strh	r3, [r7, #20]
 800095c:	8aba      	ldrh	r2, [r7, #20]
 800095e:	897b      	ldrh	r3, [r7, #10]
 8000960:	429a      	cmp	r2, r3
 8000962:	d3eb      	bcc.n	800093c <IIR_Init+0x7c>
	}
	RetVal_u8 =1;
 8000964:	2301      	movs	r3, #1
 8000966:	74fb      	strb	r3, [r7, #19]

	return RetVal_u8;
 8000968:	7cfb      	ldrb	r3, [r7, #19]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <IIR_Calculate>:

double IIR_Calculate(IIR_Filter* IIR,Circular_Buffer* Input,Circular_Buffer* Output)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b08c      	sub	sp, #48	; 0x30
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
	double output =0;
 800097e:	f04f 0200 	mov.w	r2, #0
 8000982:	f04f 0300 	mov.w	r3, #0
 8000986:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if( Input->Write_u16 == 0)
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	889b      	ldrh	r3, [r3, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d106      	bne.n	80009a0 <IIR_Calculate+0x2e>
	{
		Input->Read_u16 = Input->Size_u16-1;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	891b      	ldrh	r3, [r3, #8]
 8000996:	3b01      	subs	r3, #1
 8000998:	b29a      	uxth	r2, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	80da      	strh	r2, [r3, #6]
 800099e:	e005      	b.n	80009ac <IIR_Calculate+0x3a>
	}
	else
	{
		Input->Read_u16 = Input->Write_u16-1;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	889b      	ldrh	r3, [r3, #4]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	80da      	strh	r2, [r3, #6]
	}

	if( Output->Write_u16 == 0)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	889b      	ldrh	r3, [r3, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d106      	bne.n	80009c2 <IIR_Calculate+0x50>
	{
		Output->Read_u16 = Output->Size_u16-1;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	891b      	ldrh	r3, [r3, #8]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	80da      	strh	r2, [r3, #6]
 80009c0:	e005      	b.n	80009ce <IIR_Calculate+0x5c>
	}
	else
	{
		Output->Read_u16 = Output->Write_u16-1;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	889b      	ldrh	r3, [r3, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	80da      	strh	r2, [r3, #6]
	}

	for(uint16_t i=0;i<(IIR->SizeNum);i++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80009d2:	e018      	b.n	8000a06 <IIR_Calculate+0x94>
	{
		double Var = CircBuff_Backward_Read(Input);
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f7ff fde0 	bl	800059a <CircBuff_Backward_Read>
 80009da:	ed87 0b04 	vstr	d0, [r7, #16]
		output = output + Var*IIR->CoeffNum[i];
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	ed93 6b00 	vldr	d6, [r3]
 80009ec:	ed97 7b04 	vldr	d7, [r7, #16]
 80009f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80009f4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80009f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009fc:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	for(uint16_t i=0;i<(IIR->SizeNum);i++)
 8000a00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a02:	3301      	adds	r3, #1
 8000a04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	891b      	ldrh	r3, [r3, #8]
 8000a0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d3e1      	bcc.n	80009d4 <IIR_Calculate+0x62>
	}

	for(uint16_t i=1;i<(IIR->SizeDenum);i++)
 8000a10:	2301      	movs	r3, #1
 8000a12:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000a14:	e018      	b.n	8000a48 <IIR_Calculate+0xd6>
	{
		double Var = CircBuff_Backward_Read(Output);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff fdbf 	bl	800059a <CircBuff_Backward_Read>
 8000a1c:	ed87 0b06 	vstr	d0, [r7, #24]
		output = output - Var*IIR->CoeffDenum[i];
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	4413      	add	r3, r2
 8000a2a:	ed93 6b00 	vldr	d6, [r3]
 8000a2e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000a32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a36:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8000a3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a3e:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	for(uint16_t i=1;i<(IIR->SizeDenum);i++)
 8000a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a44:	3301      	adds	r3, #1
 8000a46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	895b      	ldrh	r3, [r3, #10]
 8000a4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d3e1      	bcc.n	8000a16 <IIR_Calculate+0xa4>
	}
	return output;
 8000a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000a56:	ec43 2b17 	vmov	d7, r2, r3
}
 8000a5a:	eeb0 0b47 	vmov.f64	d0, d7
 8000a5e:	3730      	adds	r7, #48	; 0x30
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <DSP_ExtremumV3>:
	}
}


void DSP_ExtremumV3(double Input,double * Max , double * Min , double * Freq)
{
 8000a64:	b4b0      	push	{r4, r5, r7}
 8000a66:	b08b      	sub	sp, #44	; 0x2c
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	ed87 0b04 	vstr	d0, [r7, #16]
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	static double Deriv_Pred = 0 ;
	static double Peak = 0 ;
	static uint16_t Count = 0 ;


	double Deriv = Input - Input_Pred ;
 8000a74:	4b4c      	ldr	r3, [pc, #304]	; (8000ba8 <DSP_ExtremumV3+0x144>)
 8000a76:	ed93 7b00 	vldr	d7, [r3]
 8000a7a:	ed97 6b04 	vldr	d6, [r7, #16]
 8000a7e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a82:	ed87 7b08 	vstr	d7, [r7, #32]
	double Mul = Deriv * Deriv_Pred ;
 8000a86:	4b49      	ldr	r3, [pc, #292]	; (8000bac <DSP_ExtremumV3+0x148>)
 8000a88:	ed93 7b00 	vldr	d7, [r3]
 8000a8c:	ed97 6b08 	vldr	d6, [r7, #32]
 8000a90:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a94:	ed87 7b06 	vstr	d7, [r7, #24]

	Input_Pred = Input ;
 8000a98:	4943      	ldr	r1, [pc, #268]	; (8000ba8 <DSP_ExtremumV3+0x144>)
 8000a9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a9e:	e9c1 2300 	strd	r2, r3, [r1]
	Deriv_Pred = Deriv ;
 8000aa2:	4942      	ldr	r1, [pc, #264]	; (8000bac <DSP_ExtremumV3+0x148>)
 8000aa4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000aa8:	e9c1 2300 	strd	r2, r3, [r1]
	Tsig = Tsig +1;
 8000aac:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <DSP_ExtremumV3+0x14c>)
 8000aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab2:	1c54      	adds	r4, r2, #1
 8000ab4:	f143 0500 	adc.w	r5, r3, #0
 8000ab8:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <DSP_ExtremumV3+0x14c>)
 8000aba:	e9c3 4500 	strd	r4, r5, [r3]
	if(Tsig>=30000)
 8000abe:	4b3c      	ldr	r3, [pc, #240]	; (8000bb0 <DSP_ExtremumV3+0x14c>)
 8000ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac4:	f247 5130 	movw	r1, #30000	; 0x7530
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	f173 0300 	sbcs.w	r3, r3, #0
 8000ace:	d313      	bcc.n	8000af8 <DSP_ExtremumV3+0x94>
	{
		*Freq = Count * 2;
 8000ad0:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <DSP_ExtremumV3+0x150>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	ed83 7b00 	vstr	d7, [r3]
		Count = 0 ;
 8000ae4:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <DSP_ExtremumV3+0x150>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	801a      	strh	r2, [r3, #0]
		Tsig = 0 ;
 8000aea:	4931      	ldr	r1, [pc, #196]	; (8000bb0 <DSP_ExtremumV3+0x14c>)
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if( Mul<0)
 8000af8:	ed97 7b06 	vldr	d7, [r7, #24]
 8000afc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b04:	d400      	bmi.n	8000b08 <DSP_ExtremumV3+0xa4>
			{
				* Min = Peak;
			}
		}
	}
}
 8000b06:	e04a      	b.n	8000b9e <DSP_ExtremumV3+0x13a>
		Peak = Input ;
 8000b08:	492b      	ldr	r1, [pc, #172]	; (8000bb8 <DSP_ExtremumV3+0x154>)
 8000b0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b0e:	e9c1 2300 	strd	r2, r3, [r1]
		if(Deriv_Pred<0)
 8000b12:	4b26      	ldr	r3, [pc, #152]	; (8000bac <DSP_ExtremumV3+0x148>)
 8000b14:	ed93 7b00 	vldr	d7, [r3]
 8000b18:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b20:	d506      	bpl.n	8000b30 <DSP_ExtremumV3+0xcc>
			* Min = Peak;
 8000b22:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <DSP_ExtremumV3+0x154>)
 8000b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000b2e:	e036      	b.n	8000b9e <DSP_ExtremumV3+0x13a>
		else if(Deriv_Pred>0)
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <DSP_ExtremumV3+0x148>)
 8000b32:	ed93 7b00 	vldr	d7, [r3]
 8000b36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3e:	dd0c      	ble.n	8000b5a <DSP_ExtremumV3+0xf6>
			* Max  = Peak;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <DSP_ExtremumV3+0x154>)
 8000b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b46:	68f9      	ldr	r1, [r7, #12]
 8000b48:	e9c1 2300 	strd	r2, r3, [r1]
			Count++;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <DSP_ExtremumV3+0x150>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <DSP_ExtremumV3+0x150>)
 8000b56:	801a      	strh	r2, [r3, #0]
}
 8000b58:	e021      	b.n	8000b9e <DSP_ExtremumV3+0x13a>
			if(Deriv<0)
 8000b5a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000b5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b66:	d50c      	bpl.n	8000b82 <DSP_ExtremumV3+0x11e>
				* Max  = Peak;
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <DSP_ExtremumV3+0x154>)
 8000b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6e:	68f9      	ldr	r1, [r7, #12]
 8000b70:	e9c1 2300 	strd	r2, r3, [r1]
				Count++;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <DSP_ExtremumV3+0x150>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <DSP_ExtremumV3+0x150>)
 8000b7e:	801a      	strh	r2, [r3, #0]
}
 8000b80:	e00d      	b.n	8000b9e <DSP_ExtremumV3+0x13a>
			else if(Deriv>0)
 8000b82:	ed97 7b08 	vldr	d7, [r7, #32]
 8000b86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8e:	dc00      	bgt.n	8000b92 <DSP_ExtremumV3+0x12e>
}
 8000b90:	e005      	b.n	8000b9e <DSP_ExtremumV3+0x13a>
				* Min = Peak;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <DSP_ExtremumV3+0x154>)
 8000b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000b9e:	bf00      	nop
 8000ba0:	372c      	adds	r7, #44	; 0x2c
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bcb0      	pop	{r4, r5, r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	24000188 	.word	0x24000188
 8000bac:	24000190 	.word	0x24000190
 8000bb0:	24000140 	.word	0x24000140
 8000bb4:	24000198 	.word	0x24000198
 8000bb8:	240001a0 	.word	0x240001a0

08000bbc <DSP_ExtremumV4>:

void DSP_ExtremumV4(double Input,double * Max , double * Min , double * Freq)
{
 8000bbc:	b4b0      	push	{r4, r5, r7}
 8000bbe:	b08b      	sub	sp, #44	; 0x2c
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	ed87 0b04 	vstr	d0, [r7, #16]
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	static double Deriv_Pred = 0 ;
	static double Peak = 0 ;
	static uint16_t Count = 0 ;


	double Deriv = Input - Input_Pred ;
 8000bcc:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <DSP_ExtremumV4+0x138>)
 8000bce:	ed93 7b00 	vldr	d7, [r3]
 8000bd2:	ed97 6b04 	vldr	d6, [r7, #16]
 8000bd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000bda:	ed87 7b08 	vstr	d7, [r7, #32]
	double Mul = Deriv * Deriv_Pred ;
 8000bde:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <DSP_ExtremumV4+0x13c>)
 8000be0:	ed93 7b00 	vldr	d7, [r3]
 8000be4:	ed97 6b08 	vldr	d6, [r7, #32]
 8000be8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000bec:	ed87 7b06 	vstr	d7, [r7, #24]

	Input_Pred = Input ;
 8000bf0:	4940      	ldr	r1, [pc, #256]	; (8000cf4 <DSP_ExtremumV4+0x138>)
 8000bf2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000bf6:	e9c1 2300 	strd	r2, r3, [r1]
	Deriv_Pred = Deriv ;
 8000bfa:	493f      	ldr	r1, [pc, #252]	; (8000cf8 <DSP_ExtremumV4+0x13c>)
 8000bfc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000c00:	e9c1 2300 	strd	r2, r3, [r1]
	Tsig2 = Tsig2 + 1;
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <DSP_ExtremumV4+0x140>)
 8000c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0a:	1c54      	adds	r4, r2, #1
 8000c0c:	f143 0500 	adc.w	r5, r3, #0
 8000c10:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <DSP_ExtremumV4+0x140>)
 8000c12:	e9c3 4500 	strd	r4, r5, [r3]
	if(Tsig2>=30000)
 8000c16:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <DSP_ExtremumV4+0x140>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f247 5130 	movw	r1, #30000	; 0x7530
 8000c20:	428a      	cmp	r2, r1
 8000c22:	f173 0300 	sbcs.w	r3, r3, #0
 8000c26:	d312      	bcc.n	8000c4e <DSP_ExtremumV4+0x92>
	{
		*Freq = Count;
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <DSP_ExtremumV4+0x144>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	ed83 7b00 	vstr	d7, [r3]
		Count = 0 ;
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <DSP_ExtremumV4+0x144>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	801a      	strh	r2, [r3, #0]
		Tsig2 = 0;
 8000c40:	492e      	ldr	r1, [pc, #184]	; (8000cfc <DSP_ExtremumV4+0x140>)
 8000c42:	f04f 0200 	mov.w	r2, #0
 8000c46:	f04f 0300 	mov.w	r3, #0
 8000c4a:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if( Mul<0)
 8000c4e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c52:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5a:	d400      	bmi.n	8000c5e <DSP_ExtremumV4+0xa2>
			{
				* Min = Peak;
			}
		}
	}
}
 8000c5c:	e044      	b.n	8000ce8 <DSP_ExtremumV4+0x12c>
		Count++;
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <DSP_ExtremumV4+0x144>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	3301      	adds	r3, #1
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <DSP_ExtremumV4+0x144>)
 8000c68:	801a      	strh	r2, [r3, #0]
		Peak = Input ;
 8000c6a:	4926      	ldr	r1, [pc, #152]	; (8000d04 <DSP_ExtremumV4+0x148>)
 8000c6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c70:	e9c1 2300 	strd	r2, r3, [r1]
		if(Deriv_Pred<0)
 8000c74:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <DSP_ExtremumV4+0x13c>)
 8000c76:	ed93 7b00 	vldr	d7, [r3]
 8000c7a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c82:	d506      	bpl.n	8000c92 <DSP_ExtremumV4+0xd6>
			* Min = Peak;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <DSP_ExtremumV4+0x148>)
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000c90:	e02a      	b.n	8000ce8 <DSP_ExtremumV4+0x12c>
		else if(Deriv_Pred>0)
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <DSP_ExtremumV4+0x13c>)
 8000c94:	ed93 7b00 	vldr	d7, [r3]
 8000c98:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca0:	dd06      	ble.n	8000cb0 <DSP_ExtremumV4+0xf4>
			* Max  = Peak;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <DSP_ExtremumV4+0x148>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	68f9      	ldr	r1, [r7, #12]
 8000caa:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000cae:	e01b      	b.n	8000ce8 <DSP_ExtremumV4+0x12c>
			if(Deriv<0)
 8000cb0:	ed97 7b08 	vldr	d7, [r7, #32]
 8000cb4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbc:	d506      	bpl.n	8000ccc <DSP_ExtremumV4+0x110>
				* Max  = Peak;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <DSP_ExtremumV4+0x148>)
 8000cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc4:	68f9      	ldr	r1, [r7, #12]
 8000cc6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000cca:	e00d      	b.n	8000ce8 <DSP_ExtremumV4+0x12c>
			else if(Deriv>0)
 8000ccc:	ed97 7b08 	vldr	d7, [r7, #32]
 8000cd0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	dc00      	bgt.n	8000cdc <DSP_ExtremumV4+0x120>
}
 8000cda:	e005      	b.n	8000ce8 <DSP_ExtremumV4+0x12c>
				* Min = Peak;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <DSP_ExtremumV4+0x148>)
 8000cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000ce8:	bf00      	nop
 8000cea:	372c      	adds	r7, #44	; 0x2c
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bcb0      	pop	{r4, r5, r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	240001a8 	.word	0x240001a8
 8000cf8:	240001b0 	.word	0x240001b0
 8000cfc:	24000148 	.word	0x24000148
 8000d00:	240001b8 	.word	0x240001b8
 8000d04:	240001c0 	.word	0x240001c0

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f000 fc9d 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d12:	f000 f86f 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d16:	f000 f977 	bl	8001008 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d1a:	f000 f927 	bl	8000f6c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d1e:	f000 f8e5 	bl	8000eec <MX_I2C1_Init>
//  FIR_Init(&LowPass, LPL, &LP[0]);

//  CircBuff_Init(&LowPass_Buffer, FIRL);
//  FIR_Init(&LowPass, FIRL, &FIR[0]);

  CircBuff_Init(&LpFilterInputBuffer, SYSORD);
 8000d22:	2104      	movs	r1, #4
 8000d24:	4822      	ldr	r0, [pc, #136]	; (8000db0 <main+0xa8>)
 8000d26:	f7ff fbd7 	bl	80004d8 <CircBuff_Init>
  CircBuff_Init(&LpFilterOutputBuffer, SYSORD);
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	4821      	ldr	r0, [pc, #132]	; (8000db4 <main+0xac>)
 8000d2e:	f7ff fbd3 	bl	80004d8 <CircBuff_Init>
  IIR_Init(&LpFilter, SYSORD, &CoeffNum[0], SYSORD, &CoeffDenum[0]);
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <main+0xb0>)
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2304      	movs	r3, #4
 8000d38:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <main+0xb4>)
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	4820      	ldr	r0, [pc, #128]	; (8000dc0 <main+0xb8>)
 8000d3e:	f7ff fdbf 	bl	80008c0 <IIR_Init>

  CircBuff_Init(&LpFilterInputBuffer2, SYSORD);
 8000d42:	2104      	movs	r1, #4
 8000d44:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <main+0xbc>)
 8000d46:	f7ff fbc7 	bl	80004d8 <CircBuff_Init>
  CircBuff_Init(&LpFilterOutputBuffer2, SYSORD);
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <main+0xc0>)
 8000d4e:	f7ff fbc3 	bl	80004d8 <CircBuff_Init>
  IIR_Init(&LpFilter2, SYSORD, &CoeffNum[0], SYSORD, &CoeffDenum[0]);
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <main+0xb0>)
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2304      	movs	r3, #4
 8000d58:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <main+0xb4>)
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	481b      	ldr	r0, [pc, #108]	; (8000dcc <main+0xc4>)
 8000d5e:	f7ff fdaf 	bl	80008c0 <IIR_Init>


  CircBuff_Init(&HpFilterInputBuffer, SYSORD2);
 8000d62:	2104      	movs	r1, #4
 8000d64:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <main+0xc8>)
 8000d66:	f7ff fbb7 	bl	80004d8 <CircBuff_Init>
  CircBuff_Init(&HpFilterOutputBuffer, SYSORD2);
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	4819      	ldr	r0, [pc, #100]	; (8000dd4 <main+0xcc>)
 8000d6e:	f7ff fbb3 	bl	80004d8 <CircBuff_Init>
  IIR_Init(&HpFilter, SYSORD2, &CoeffNum2[0], SYSORD2, &CoeffDenum2[0]);
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <main+0xd0>)
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2304      	movs	r3, #4
 8000d78:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <main+0xd4>)
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4818      	ldr	r0, [pc, #96]	; (8000de0 <main+0xd8>)
 8000d7e:	f7ff fd9f 	bl	80008c0 <IIR_Init>

  CircBuff_Init(&HpFilterInputBuffer2, SYSORD2);
 8000d82:	2104      	movs	r1, #4
 8000d84:	4817      	ldr	r0, [pc, #92]	; (8000de4 <main+0xdc>)
 8000d86:	f7ff fba7 	bl	80004d8 <CircBuff_Init>
  CircBuff_Init(&HpFilterOutputBuffer2, SYSORD2);
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	4816      	ldr	r0, [pc, #88]	; (8000de8 <main+0xe0>)
 8000d8e:	f7ff fba3 	bl	80004d8 <CircBuff_Init>
  IIR_Init(&HpFilter2, SYSORD2, &CoeffNum2[0], SYSORD2, &CoeffDenum2[0]);
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <main+0xd0>)
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2304      	movs	r3, #4
 8000d98:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <main+0xd4>)
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4813      	ldr	r0, [pc, #76]	; (8000dec <main+0xe4>)
 8000d9e:	f7ff fd8f 	bl	80008c0 <IIR_Init>


  MAX30102_Init();
 8000da2:	f7ff fd13 	bl	80007cc <MAX30102_Init>
//  arm_rfft_fast_init_f64(&FFT_Handler, Fft_len);
  HAL_TIM_Base_Start_IT(&htim2);
 8000da6:	4812      	ldr	r0, [pc, #72]	; (8000df0 <main+0xe8>)
 8000da8:	f004 fea8 	bl	8005afc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <main+0xa4>
 8000dae:	bf00      	nop
 8000db0:	24000294 	.word	0x24000294
 8000db4:	240002a0 	.word	0x240002a0
 8000db8:	24000028 	.word	0x24000028
 8000dbc:	24000008 	.word	0x24000008
 8000dc0:	24000288 	.word	0x24000288
 8000dc4:	240002c4 	.word	0x240002c4
 8000dc8:	240002d0 	.word	0x240002d0
 8000dcc:	240002b8 	.word	0x240002b8
 8000dd0:	240002f4 	.word	0x240002f4
 8000dd4:	24000300 	.word	0x24000300
 8000dd8:	24000068 	.word	0x24000068
 8000ddc:	24000048 	.word	0x24000048
 8000de0:	240002e8 	.word	0x240002e8
 8000de4:	24000324 	.word	0x24000324
 8000de8:	24000330 	.word	0x24000330
 8000dec:	24000318 	.word	0x24000318
 8000df0:	24000214 	.word	0x24000214

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b09c      	sub	sp, #112	; 0x70
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	224c      	movs	r2, #76	; 0x4c
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fb48 	bl	8006498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f005 fb42 	bl	8006498 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e14:	2004      	movs	r0, #4
 8000e16:	f002 fdb7 	bl	8003988 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <SystemClock_Config+0xf0>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a30      	ldr	r2, [pc, #192]	; (8000ee4 <SystemClock_Config+0xf0>)
 8000e24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <SystemClock_Config+0xf0>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <SystemClock_Config+0xf4>)
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	4a2b      	ldr	r2, [pc, #172]	; (8000ee8 <SystemClock_Config+0xf4>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e40:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <SystemClock_Config+0xf4>)
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e4c:	bf00      	nop
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <SystemClock_Config+0xf0>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e5a:	d1f8      	bne.n	8000e4e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2340      	movs	r3, #64	; 0x40
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e70:	2304      	movs	r3, #4
 8000e72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e74:	233c      	movs	r3, #60	; 0x3c
 8000e76:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e84:	230c      	movs	r3, #12
 8000e86:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 fdd1 	bl	8003a3c <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ea0:	f000 fa70 	bl	8001384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea4:	233f      	movs	r3, #63	; 0x3f
 8000ea6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eb4:	2340      	movs	r3, #64	; 0x40
 8000eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ec2:	2340      	movs	r3, #64	; 0x40
 8000ec4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 f9e4 	bl	8004298 <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000ed6:	f000 fa55 	bl	8001384 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3770      	adds	r7, #112	; 0x70
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	58024800 	.word	0x58024800
 8000ee8:	58000400 	.word	0x58000400

08000eec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <MX_I2C1_Init+0x78>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <MX_I2C1_Init+0x7c>)
 8000efa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f28:	f001 f942 	bl	80021b0 <HAL_I2C_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f32:	f000 fa27 	bl	8001384 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f36:	2100      	movs	r1, #0
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f3a:	f002 fc8d 	bl	8003858 <HAL_I2CEx_ConfigAnalogFilter>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f44:	f000 fa1e 	bl	8001384 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f4c:	f002 fccf 	bl	80038ee <HAL_I2CEx_ConfigDigitalFilter>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f000 fa15 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	240001c8 	.word	0x240001c8
 8000f64:	40005400 	.word	0x40005400
 8000f68:	307075b1 	.word	0x307075b1

08000f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 240000-1;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa0:	4a18      	ldr	r2, [pc, #96]	; (8001004 <MX_TIM2_Init+0x98>)
 8000fa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fb2:	f004 fd4b 	bl	8005a4c <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fbc:	f000 f9e2 	bl	8001384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fce:	f004 ff2d 	bl	8005e2c <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f000 f9d4 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fea:	f005 f977 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff4:	f000 f9c6 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	24000214 	.word	0x24000214
 8001004:	0003a97f 	.word	0x0003a97f

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_GPIO_Init+0x30>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <MX_GPIO_Init+0x30>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_GPIO_Init+0x30>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]

}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	58024400 	.word	0x58024400
 800103c:	00000000 	.word	0x00000000

08001040 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

	MAX30102_GetValues(&RED, &IR) ;
 8001048:	49a7      	ldr	r1, [pc, #668]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800104a:	48a8      	ldr	r0, [pc, #672]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800104c:	f7ff fc02 	bl	8000854 <MAX30102_GetValues>

	Data = IR ;
 8001050:	4ba5      	ldr	r3, [pc, #660]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800105c:	4ba4      	ldr	r3, [pc, #656]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800105e:	ed83 7b00 	vstr	d7, [r3]
	CircBuff_Write(&LpFilterInputBuffer, Data);
 8001062:	4ba3      	ldr	r3, [pc, #652]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001064:	ed93 7b00 	vldr	d7, [r3]
 8001068:	eeb0 0b47 	vmov.f64	d0, d7
 800106c:	48a1      	ldr	r0, [pc, #644]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800106e:	f7ff fa6f 	bl	8000550 <CircBuff_Write>
	LpFilterOutput = IIR_Calculate(&LpFilter, &LpFilterInputBuffer, &LpFilterOutputBuffer);
 8001072:	4aa1      	ldr	r2, [pc, #644]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001074:	499f      	ldr	r1, [pc, #636]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001076:	48a1      	ldr	r0, [pc, #644]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001078:	f7ff fc7b 	bl	8000972 <IIR_Calculate>
 800107c:	eeb0 7b40 	vmov.f64	d7, d0
 8001080:	4b9f      	ldr	r3, [pc, #636]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001082:	ed83 7b00 	vstr	d7, [r3]
	CircBuff_Write(&LpFilterOutputBuffer, LpFilterOutput);
 8001086:	4b9e      	ldr	r3, [pc, #632]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001088:	ed93 7b00 	vldr	d7, [r3]
 800108c:	eeb0 0b47 	vmov.f64	d0, d7
 8001090:	4899      	ldr	r0, [pc, #612]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001092:	f7ff fa5d 	bl	8000550 <CircBuff_Write>

	CircBuff_Write(&HpFilterInputBuffer, LpFilterOutput);
 8001096:	4b9a      	ldr	r3, [pc, #616]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001098:	ed93 7b00 	vldr	d7, [r3]
 800109c:	eeb0 0b47 	vmov.f64	d0, d7
 80010a0:	4898      	ldr	r0, [pc, #608]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010a2:	f7ff fa55 	bl	8000550 <CircBuff_Write>
	HpFilterOutput = IIR_Calculate(&HpFilter, &HpFilterInputBuffer, &HpFilterOutputBuffer);
 80010a6:	4a98      	ldr	r2, [pc, #608]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80010a8:	4996      	ldr	r1, [pc, #600]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010aa:	4898      	ldr	r0, [pc, #608]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80010ac:	f7ff fc61 	bl	8000972 <IIR_Calculate>
 80010b0:	eeb0 7b40 	vmov.f64	d7, d0
 80010b4:	4b96      	ldr	r3, [pc, #600]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80010b6:	ed83 7b00 	vstr	d7, [r3]
	CircBuff_Write(&HpFilterOutputBuffer, HpFilterOutput);
 80010ba:	4b95      	ldr	r3, [pc, #596]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80010bc:	ed93 7b00 	vldr	d7, [r3]
 80010c0:	eeb0 0b47 	vmov.f64	d0, d7
 80010c4:	4890      	ldr	r0, [pc, #576]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80010c6:	f7ff fa43 	bl	8000550 <CircBuff_Write>

	DSP_ExtremumV3(HpFilterOutput, &Maxim, &Minim, &Frequence);
 80010ca:	4b91      	ldr	r3, [pc, #580]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80010cc:	ed93 7b00 	vldr	d7, [r3]
 80010d0:	4a90      	ldr	r2, [pc, #576]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80010d2:	4991      	ldr	r1, [pc, #580]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80010d4:	4891      	ldr	r0, [pc, #580]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80010d6:	eeb0 0b47 	vmov.f64	d0, d7
 80010da:	f7ff fcc3 	bl	8000a64 <DSP_ExtremumV3>

	Data = RED ;
 80010de:	4b83      	ldr	r3, [pc, #524]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010ea:	4b81      	ldr	r3, [pc, #516]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80010ec:	ed83 7b00 	vstr	d7, [r3]
	CircBuff_Write(&LpFilterInputBuffer2, Data);
 80010f0:	4b7f      	ldr	r3, [pc, #508]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80010f2:	ed93 7b00 	vldr	d7, [r3]
 80010f6:	eeb0 0b47 	vmov.f64	d0, d7
 80010fa:	4889      	ldr	r0, [pc, #548]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80010fc:	f7ff fa28 	bl	8000550 <CircBuff_Write>
	LpFilterOutput2 = IIR_Calculate(&LpFilter2, &LpFilterInputBuffer2, &LpFilterOutputBuffer2);
 8001100:	4a88      	ldr	r2, [pc, #544]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001102:	4987      	ldr	r1, [pc, #540]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001104:	4888      	ldr	r0, [pc, #544]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001106:	f7ff fc34 	bl	8000972 <IIR_Calculate>
 800110a:	eeb0 7b40 	vmov.f64	d7, d0
 800110e:	4b87      	ldr	r3, [pc, #540]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001110:	ed83 7b00 	vstr	d7, [r3]
	CircBuff_Write(&LpFilterOutputBuffer2, LpFilterOutput2);
 8001114:	4b85      	ldr	r3, [pc, #532]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001116:	ed93 7b00 	vldr	d7, [r3]
 800111a:	eeb0 0b47 	vmov.f64	d0, d7
 800111e:	4881      	ldr	r0, [pc, #516]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001120:	f7ff fa16 	bl	8000550 <CircBuff_Write>

	CircBuff_Write(&HpFilterInputBuffer2, LpFilterOutput2);
 8001124:	4b81      	ldr	r3, [pc, #516]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001126:	ed93 7b00 	vldr	d7, [r3]
 800112a:	eeb0 0b47 	vmov.f64	d0, d7
 800112e:	4880      	ldr	r0, [pc, #512]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001130:	f7ff fa0e 	bl	8000550 <CircBuff_Write>
	HpFilterOutput2 = IIR_Calculate(&HpFilter2, &HpFilterInputBuffer2, &HpFilterOutputBuffer2);
 8001134:	4a7f      	ldr	r2, [pc, #508]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001136:	497e      	ldr	r1, [pc, #504]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001138:	487f      	ldr	r0, [pc, #508]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800113a:	f7ff fc1a 	bl	8000972 <IIR_Calculate>
 800113e:	eeb0 7b40 	vmov.f64	d7, d0
 8001142:	4b7e      	ldr	r3, [pc, #504]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001144:	ed83 7b00 	vstr	d7, [r3]
	CircBuff_Write(&HpFilterOutputBuffer2, HpFilterOutput2);
 8001148:	4b7c      	ldr	r3, [pc, #496]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800114a:	ed93 7b00 	vldr	d7, [r3]
 800114e:	eeb0 0b47 	vmov.f64	d0, d7
 8001152:	4878      	ldr	r0, [pc, #480]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001154:	f7ff f9fc 	bl	8000550 <CircBuff_Write>

	DSP_ExtremumV4(HpFilterOutput2, &Maxim2, &Minim2, &Frequence2);
 8001158:	4b78      	ldr	r3, [pc, #480]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800115a:	ed93 7b00 	vldr	d7, [r3]
 800115e:	4a78      	ldr	r2, [pc, #480]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001160:	4978      	ldr	r1, [pc, #480]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001162:	4879      	ldr	r0, [pc, #484]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001164:	eeb0 0b47 	vmov.f64	d0, d7
 8001168:	f7ff fd28 	bl	8000bbc <DSP_ExtremumV4>
	HR1 = Frequence;
 800116c:	4b69      	ldr	r3, [pc, #420]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	4976      	ldr	r1, [pc, #472]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001174:	e9c1 2300 	strd	r2, r3, [r1]
	HR2 = Frequence2;
 8001178:	4b71      	ldr	r3, [pc, #452]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	4974      	ldr	r1, [pc, #464]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001180:	e9c1 2300 	strd	r2, r3, [r1]
	ContainerIR[SampleTaken] = IR;
 8001184:	4b58      	ldr	r3, [pc, #352]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b72      	ldr	r3, [pc, #456]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	ee07 2a90 	vmov	s15, r2
 8001190:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001194:	4a70      	ldr	r2, [pc, #448]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4413      	add	r3, r2
 800119a:	ed83 7b00 	vstr	d7, [r3]
	ContainerRED[SampleTaken] = RED;
 800119e:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b6c      	ldr	r3, [pc, #432]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	ee07 2a90 	vmov	s15, r2
 80011aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011ae:	4a6b      	ldr	r2, [pc, #428]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	ed83 7b00 	vstr	d7, [r3]
	SampleTaken++;
 80011b8:	4b66      	ldr	r3, [pc, #408]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a65      	ldr	r2, [pc, #404]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80011c0:	6013      	str	r3, [r2, #0]
	if(SampleTaken==1000)
 80011c2:	4b64      	ldr	r3, [pc, #400]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ca:	d177      	bne.n	80012bc <HAL_TIM_PeriodElapsedCallback+0x27c>
	{
		arm_max_no_idx_f64(ContainerRED, 1000, &MaxRed);
 80011cc:	4a64      	ldr	r2, [pc, #400]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80011ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d2:	4862      	ldr	r0, [pc, #392]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80011d4:	f7ff f880 	bl	80002d8 <arm_max_no_idx_f64>
		arm_max_no_idx_f64(ContainerIR, 1000, &MaxIR);
 80011d8:	4a62      	ldr	r2, [pc, #392]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80011da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011de:	485e      	ldr	r0, [pc, #376]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80011e0:	f7ff f87a 	bl	80002d8 <arm_max_no_idx_f64>
		arm_min_no_idx_f64(ContainerRED, 1000, &MinRed);
 80011e4:	4a60      	ldr	r2, [pc, #384]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80011e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ea:	485c      	ldr	r0, [pc, #368]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80011ec:	f7ff f8a8 	bl	8000340 <arm_min_no_idx_f64>
		arm_min_no_idx_f64(ContainerIR, 1000, &MinIR);
 80011f0:	4a5e      	ldr	r2, [pc, #376]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80011f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f6:	4858      	ldr	r0, [pc, #352]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80011f8:	f7ff f8a2 	bl	8000340 <arm_min_no_idx_f64>
		R = (MaxRed/MinRed)/(MaxIR/MinIR);
 80011fc:	4b58      	ldr	r3, [pc, #352]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80011fe:	ed93 6b00 	vldr	d6, [r3]
 8001202:	4b59      	ldr	r3, [pc, #356]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001204:	ed93 7b00 	vldr	d7, [r3]
 8001208:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800120c:	4b55      	ldr	r3, [pc, #340]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800120e:	ed93 4b00 	vldr	d4, [r3]
 8001212:	4b56      	ldr	r3, [pc, #344]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001214:	ed93 7b00 	vldr	d7, [r3]
 8001218:	ee84 6b07 	vdiv.f64	d6, d4, d7
 800121c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001220:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001222:	ed83 7b00 	vstr	d7, [r3]
		Spo2 = -16.5191 * (R*R) - 7.9276 * R + 124.4951;
 8001226:	4b52      	ldr	r3, [pc, #328]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001228:	ed93 6b00 	vldr	d6, [r3]
 800122c:	4b50      	ldr	r3, [pc, #320]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800122e:	ed93 7b00 	vldr	d7, [r3]
 8001232:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001236:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80012c8 <HAL_TIM_PeriodElapsedCallback+0x288>
 800123a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800123e:	4b4c      	ldr	r3, [pc, #304]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001240:	ed93 7b00 	vldr	d7, [r3]
 8001244:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80012d0 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001248:	ee27 7b05 	vmul.f64	d7, d7, d5
 800124c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001250:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80012d8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8001254:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800125a:	ed83 7b00 	vstr	d7, [r3]
		Spo2v2 = 125 - 25 * R;
 800125e:	4b44      	ldr	r3, [pc, #272]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001260:	ed93 7b00 	vldr	d7, [r3]
 8001264:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8001268:	ee27 7b06 	vmul.f64	d7, d7, d6
 800126c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80012e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8001270:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001274:	4b40      	ldr	r3, [pc, #256]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001276:	ed83 7b00 	vstr	d7, [r3]
		Spo2Final = 0.5*(Spo2 + Spo2v2);
 800127a:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800127c:	ed93 6b00 	vldr	d6, [r3]
 8001280:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001282:	ed93 7b00 	vldr	d7, [r3]
 8001286:	ee36 7b07 	vadd.f64	d7, d6, d7
 800128a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800128e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001294:	ed83 7b00 	vstr	d7, [r3]
		HeartRateFinal =( HR1 + HR2 )*0.5;
 8001298:	4b2c      	ldr	r3, [pc, #176]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800129a:	ed93 6b00 	vldr	d6, [r3]
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80012a0:	ed93 7b00 	vldr	d7, [r3]
 80012a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012a8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80012ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012b0:	4b33      	ldr	r3, [pc, #204]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80012b2:	ed83 7b00 	vstr	d7, [r3]
		SampleTaken = 0;
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
	}
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	f3af 8000 	nop.w
 80012c8:	bcd35a86 	.word	0xbcd35a86
 80012cc:	c03084e3 	.word	0xc03084e3
 80012d0:	c63f1412 	.word	0xc63f1412
 80012d4:	401fb5dc 	.word	0x401fb5dc
 80012d8:	b7e90ff9 	.word	0xb7e90ff9
 80012dc:	405f1faf 	.word	0x405f1faf
 80012e0:	00000000 	.word	0x00000000
 80012e4:	405f4000 	.word	0x405f4000
 80012e8:	24000264 	.word	0x24000264
 80012ec:	24000260 	.word	0x24000260
 80012f0:	24000270 	.word	0x24000270
 80012f4:	24000294 	.word	0x24000294
 80012f8:	240002a0 	.word	0x240002a0
 80012fc:	24000288 	.word	0x24000288
 8001300:	240002b0 	.word	0x240002b0
 8001304:	240002f4 	.word	0x240002f4
 8001308:	24000300 	.word	0x24000300
 800130c:	240002e8 	.word	0x240002e8
 8001310:	24000310 	.word	0x24000310
 8001314:	24000150 	.word	0x24000150
 8001318:	24000160 	.word	0x24000160
 800131c:	24000158 	.word	0x24000158
 8001320:	240002c4 	.word	0x240002c4
 8001324:	240002d0 	.word	0x240002d0
 8001328:	240002b8 	.word	0x240002b8
 800132c:	240002e0 	.word	0x240002e0
 8001330:	24000324 	.word	0x24000324
 8001334:	24000330 	.word	0x24000330
 8001338:	24000318 	.word	0x24000318
 800133c:	24000340 	.word	0x24000340
 8001340:	24000168 	.word	0x24000168
 8001344:	24000178 	.word	0x24000178
 8001348:	24000170 	.word	0x24000170
 800134c:	24000278 	.word	0x24000278
 8001350:	24000280 	.word	0x24000280
 8001354:	24000268 	.word	0x24000268
 8001358:	24002288 	.word	0x24002288
 800135c:	24000348 	.word	0x24000348
 8001360:	240041c8 	.word	0x240041c8
 8001364:	240041d0 	.word	0x240041d0
 8001368:	240041d8 	.word	0x240041d8
 800136c:	240041e0 	.word	0x240041e0
 8001370:	240041e8 	.word	0x240041e8
 8001374:	24000180 	.word	0x24000180
 8001378:	240041f0 	.word	0x240041f0
 800137c:	24004200 	.word	0x24004200
 8001380:	240041f8 	.word	0x240041f8

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138c:	e7fe      	b.n	800138c <Error_Handler+0x8>
	...

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_MspInit+0x30>)
 8001398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800139c:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x30>)
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x30>)
 80013a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	58024400 	.word	0x58024400

080013c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0b8      	sub	sp, #224	; 0xe0
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	22bc      	movs	r2, #188	; 0xbc
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 f857 	bl	8006498 <memset>
  if(hi2c->Instance==I2C1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <HAL_I2C_MspInit+0xe0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d152      	bne.n	800149a <HAL_I2C_MspInit+0xd6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f4:	2308      	movs	r3, #8
 80013f6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fa78 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800140e:	f7ff ffb9 	bl	8001384 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <HAL_I2C_MspInit+0xe4>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a23      	ldr	r2, [pc, #140]	; (80014a8 <HAL_I2C_MspInit+0xe4>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_I2C_MspInit+0xe4>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001430:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001434:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001438:	2312      	movs	r3, #18
 800143a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143e:	2301      	movs	r3, #1
 8001440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800144a:	2304      	movs	r3, #4
 800144c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001454:	4619      	mov	r1, r3
 8001456:	4815      	ldr	r0, [pc, #84]	; (80014ac <HAL_I2C_MspInit+0xe8>)
 8001458:	f000 fcfa 	bl	8001e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_I2C_MspInit+0xe4>)
 800145e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_I2C_MspInit+0xe4>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001468:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_I2C_MspInit+0xe4>)
 800146e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	201f      	movs	r0, #31
 8001480:	f000 fa5d 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001484:	201f      	movs	r0, #31
 8001486:	f000 fa74 	bl	8001972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2020      	movs	r0, #32
 8001490:	f000 fa55 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001494:	2020      	movs	r0, #32
 8001496:	f000 fa6c 	bl	8001972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	37e0      	adds	r7, #224	; 0xe0
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40005400 	.word	0x40005400
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020400 	.word	0x58020400

080014b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d116      	bne.n	80014f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_TIM_Base_MspInit+0x48>)
 80014c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_TIM_Base_MspInit+0x48>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_TIM_Base_MspInit+0x48>)
 80014d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	201c      	movs	r0, #28
 80014e6:	f000 fa2a 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014ea:	201c      	movs	r0, #28
 80014ec:	f000 fa41 	bl	8001972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	58024400 	.word	0x58024400

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001548:	f000 f8f2 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM2_IRQHandler+0x10>)
 8001556:	f004 fb49 	bl	8005bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	24000214 	.word	0x24000214

08001564 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <I2C1_EV_IRQHandler+0x10>)
 800156a:	f001 f89b 	bl	80026a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	240001c8 	.word	0x240001c8

08001578 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <I2C1_ER_IRQHandler+0x10>)
 800157e:	f001 f8ab 	bl	80026d8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	240001c8 	.word	0x240001c8

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f004 ff3a 	bl	8006434 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	24080000 	.word	0x24080000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	24004208 	.word	0x24004208
 80015f4:	24004220 	.word	0x24004220

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001630 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015fc:	f7fe fed6 	bl	80003ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f004 ff0b 	bl	8006440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff fb6d 	bl	8000d08 <main>
  bx  lr
 800162e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001634:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001638:	240000f4 	.word	0x240000f4
  ldr r2, =_sidata
 800163c:	0800663c 	.word	0x0800663c
  ldr r2, =_sbss
 8001640:	240000f8 	.word	0x240000f8
  ldr r4, =_ebss
 8001644:	24004220 	.word	0x24004220

08001648 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC3_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001652:	2003      	movs	r0, #3
 8001654:	f000 f968 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001658:	f002 ffd4 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 800165c:	4602      	mov	r2, r0
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_Init+0x68>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	4913      	ldr	r1, [pc, #76]	; (80016b8 <HAL_Init+0x6c>)
 800166a:	5ccb      	ldrb	r3, [r1, r3]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_Init+0x68>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_Init+0x6c>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_Init+0x70>)
 800168e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_Init+0x74>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f814 	bl	80016c4 <HAL_InitTick>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e002      	b.n	80016ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016a6:	f7ff fe73 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	58024400 	.word	0x58024400
 80016b8:	08006624 	.word	0x08006624
 80016bc:	24000004 	.word	0x24000004
 80016c0:	24000000 	.word	0x24000000

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_InitTick+0x60>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e021      	b.n	800171c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_InitTick+0x64>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_InitTick+0x60>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f94d 	bl	800198e <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 f917 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <HAL_InitTick+0x68>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2400008c 	.word	0x2400008c
 8001728:	24000000 	.word	0x24000000
 800172c:	24000088 	.word	0x24000088

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2400008c 	.word	0x2400008c
 8001754:	2400420c 	.word	0x2400420c

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2400420c 	.word	0x2400420c

08001770 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetREVID+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0c1b      	lsrs	r3, r3, #16
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	5c001000 	.word	0x5c001000

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <__NVIC_SetPriorityGrouping+0x40>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x40>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	05fa0000 	.word	0x05fa0000

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff40 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff33 	bl	80017ec <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa4 	bl	80018e4 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e237      	b.n	8001e2a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e22c      	b.n	8001e2a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a5c      	ldr	r2, [pc, #368]	; (8001b48 <HAL_DMA_Abort_IT+0x1a0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d04a      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a5b      	ldr	r2, [pc, #364]	; (8001b4c <HAL_DMA_Abort_IT+0x1a4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d045      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a59      	ldr	r2, [pc, #356]	; (8001b50 <HAL_DMA_Abort_IT+0x1a8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d040      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <HAL_DMA_Abort_IT+0x1ac>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d03b      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_DMA_Abort_IT+0x1b0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d036      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <HAL_DMA_Abort_IT+0x1b4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d031      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a53      	ldr	r2, [pc, #332]	; (8001b60 <HAL_DMA_Abort_IT+0x1b8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d02c      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_DMA_Abort_IT+0x1bc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d027      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a50      	ldr	r2, [pc, #320]	; (8001b68 <HAL_DMA_Abort_IT+0x1c0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d022      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a4f      	ldr	r2, [pc, #316]	; (8001b6c <HAL_DMA_Abort_IT+0x1c4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d01d      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a4d      	ldr	r2, [pc, #308]	; (8001b70 <HAL_DMA_Abort_IT+0x1c8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d018      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a4c      	ldr	r2, [pc, #304]	; (8001b74 <HAL_DMA_Abort_IT+0x1cc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d013      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a4a      	ldr	r2, [pc, #296]	; (8001b78 <HAL_DMA_Abort_IT+0x1d0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00e      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a49      	ldr	r2, [pc, #292]	; (8001b7c <HAL_DMA_Abort_IT+0x1d4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d009      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a47      	ldr	r2, [pc, #284]	; (8001b80 <HAL_DMA_Abort_IT+0x1d8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d004      	beq.n	8001a70 <HAL_DMA_Abort_IT+0xc8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a46      	ldr	r2, [pc, #280]	; (8001b84 <HAL_DMA_Abort_IT+0x1dc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_DMA_Abort_IT+0xcc>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_DMA_Abort_IT+0xce>
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8086 	beq.w	8001b88 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2204      	movs	r2, #4
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <HAL_DMA_Abort_IT+0x1a0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d04a      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a2e      	ldr	r2, [pc, #184]	; (8001b4c <HAL_DMA_Abort_IT+0x1a4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d045      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <HAL_DMA_Abort_IT+0x1a8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d040      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2b      	ldr	r2, [pc, #172]	; (8001b54 <HAL_DMA_Abort_IT+0x1ac>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d03b      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_DMA_Abort_IT+0x1b0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d036      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <HAL_DMA_Abort_IT+0x1b4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d031      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <HAL_DMA_Abort_IT+0x1b8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d02c      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a25      	ldr	r2, [pc, #148]	; (8001b64 <HAL_DMA_Abort_IT+0x1bc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d027      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <HAL_DMA_Abort_IT+0x1c0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d022      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <HAL_DMA_Abort_IT+0x1c4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d01d      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <HAL_DMA_Abort_IT+0x1c8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d018      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <HAL_DMA_Abort_IT+0x1cc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d013      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_DMA_Abort_IT+0x1d0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00e      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_DMA_Abort_IT+0x1d4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d009      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <HAL_DMA_Abort_IT+0x1d8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d004      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x17c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_DMA_Abort_IT+0x1dc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d108      	bne.n	8001b36 <HAL_DMA_Abort_IT+0x18e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e178      	b.n	8001e28 <HAL_DMA_Abort_IT+0x480>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e16f      	b.n	8001e28 <HAL_DMA_Abort_IT+0x480>
 8001b48:	40020010 	.word	0x40020010
 8001b4c:	40020028 	.word	0x40020028
 8001b50:	40020040 	.word	0x40020040
 8001b54:	40020058 	.word	0x40020058
 8001b58:	40020070 	.word	0x40020070
 8001b5c:	40020088 	.word	0x40020088
 8001b60:	400200a0 	.word	0x400200a0
 8001b64:	400200b8 	.word	0x400200b8
 8001b68:	40020410 	.word	0x40020410
 8001b6c:	40020428 	.word	0x40020428
 8001b70:	40020440 	.word	0x40020440
 8001b74:	40020458 	.word	0x40020458
 8001b78:	40020470 	.word	0x40020470
 8001b7c:	40020488 	.word	0x40020488
 8001b80:	400204a0 	.word	0x400204a0
 8001b84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 020e 	bic.w	r2, r2, #14
 8001b96:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6c      	ldr	r2, [pc, #432]	; (8001d50 <HAL_DMA_Abort_IT+0x3a8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d04a      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6b      	ldr	r2, [pc, #428]	; (8001d54 <HAL_DMA_Abort_IT+0x3ac>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d045      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a69      	ldr	r2, [pc, #420]	; (8001d58 <HAL_DMA_Abort_IT+0x3b0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d040      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a68      	ldr	r2, [pc, #416]	; (8001d5c <HAL_DMA_Abort_IT+0x3b4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d03b      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a66      	ldr	r2, [pc, #408]	; (8001d60 <HAL_DMA_Abort_IT+0x3b8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d036      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a65      	ldr	r2, [pc, #404]	; (8001d64 <HAL_DMA_Abort_IT+0x3bc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d031      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a63      	ldr	r2, [pc, #396]	; (8001d68 <HAL_DMA_Abort_IT+0x3c0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d02c      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a62      	ldr	r2, [pc, #392]	; (8001d6c <HAL_DMA_Abort_IT+0x3c4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d027      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a60      	ldr	r2, [pc, #384]	; (8001d70 <HAL_DMA_Abort_IT+0x3c8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d022      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5f      	ldr	r2, [pc, #380]	; (8001d74 <HAL_DMA_Abort_IT+0x3cc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d01d      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5d      	ldr	r2, [pc, #372]	; (8001d78 <HAL_DMA_Abort_IT+0x3d0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d018      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5c      	ldr	r2, [pc, #368]	; (8001d7c <HAL_DMA_Abort_IT+0x3d4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d013      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5a      	ldr	r2, [pc, #360]	; (8001d80 <HAL_DMA_Abort_IT+0x3d8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00e      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a59      	ldr	r2, [pc, #356]	; (8001d84 <HAL_DMA_Abort_IT+0x3dc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a57      	ldr	r2, [pc, #348]	; (8001d88 <HAL_DMA_Abort_IT+0x3e0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d004      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x290>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_DMA_Abort_IT+0x3e4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d108      	bne.n	8001c4a <HAL_DMA_Abort_IT+0x2a2>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e007      	b.n	8001c5a <HAL_DMA_Abort_IT+0x2b2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0201 	bic.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a3c      	ldr	r2, [pc, #240]	; (8001d50 <HAL_DMA_Abort_IT+0x3a8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d072      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a3a      	ldr	r2, [pc, #232]	; (8001d54 <HAL_DMA_Abort_IT+0x3ac>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d06d      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a39      	ldr	r2, [pc, #228]	; (8001d58 <HAL_DMA_Abort_IT+0x3b0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d068      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a37      	ldr	r2, [pc, #220]	; (8001d5c <HAL_DMA_Abort_IT+0x3b4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d063      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a36      	ldr	r2, [pc, #216]	; (8001d60 <HAL_DMA_Abort_IT+0x3b8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d05e      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a34      	ldr	r2, [pc, #208]	; (8001d64 <HAL_DMA_Abort_IT+0x3bc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d059      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a33      	ldr	r2, [pc, #204]	; (8001d68 <HAL_DMA_Abort_IT+0x3c0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d054      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a31      	ldr	r2, [pc, #196]	; (8001d6c <HAL_DMA_Abort_IT+0x3c4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d04f      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a30      	ldr	r2, [pc, #192]	; (8001d70 <HAL_DMA_Abort_IT+0x3c8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d04a      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <HAL_DMA_Abort_IT+0x3cc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d045      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <HAL_DMA_Abort_IT+0x3d0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d040      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <HAL_DMA_Abort_IT+0x3d4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d03b      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2a      	ldr	r2, [pc, #168]	; (8001d80 <HAL_DMA_Abort_IT+0x3d8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d036      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a28      	ldr	r2, [pc, #160]	; (8001d84 <HAL_DMA_Abort_IT+0x3dc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d031      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_DMA_Abort_IT+0x3e0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d02c      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_DMA_Abort_IT+0x3e4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d027      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_DMA_Abort_IT+0x3e8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d022      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_DMA_Abort_IT+0x3ec>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01d      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <HAL_DMA_Abort_IT+0x3f0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d018      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1f      	ldr	r2, [pc, #124]	; (8001d9c <HAL_DMA_Abort_IT+0x3f4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_DMA_Abort_IT+0x3f8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00e      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <HAL_DMA_Abort_IT+0x3fc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_DMA_Abort_IT+0x400>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d004      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x3a2>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_DMA_Abort_IT+0x404>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d132      	bne.n	8001db0 <HAL_DMA_Abort_IT+0x408>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e031      	b.n	8001db2 <HAL_DMA_Abort_IT+0x40a>
 8001d4e:	bf00      	nop
 8001d50:	40020010 	.word	0x40020010
 8001d54:	40020028 	.word	0x40020028
 8001d58:	40020040 	.word	0x40020040
 8001d5c:	40020058 	.word	0x40020058
 8001d60:	40020070 	.word	0x40020070
 8001d64:	40020088 	.word	0x40020088
 8001d68:	400200a0 	.word	0x400200a0
 8001d6c:	400200b8 	.word	0x400200b8
 8001d70:	40020410 	.word	0x40020410
 8001d74:	40020428 	.word	0x40020428
 8001d78:	40020440 	.word	0x40020440
 8001d7c:	40020458 	.word	0x40020458
 8001d80:	40020470 	.word	0x40020470
 8001d84:	40020488 	.word	0x40020488
 8001d88:	400204a0 	.word	0x400204a0
 8001d8c:	400204b8 	.word	0x400204b8
 8001d90:	58025408 	.word	0x58025408
 8001d94:	5802541c 	.word	0x5802541c
 8001d98:	58025430 	.word	0x58025430
 8001d9c:	58025444 	.word	0x58025444
 8001da0:	58025458 	.word	0x58025458
 8001da4:	5802546c 	.word	0x5802546c
 8001da8:	58025480 	.word	0x58025480
 8001dac:	58025494 	.word	0x58025494
 8001db0:	2300      	movs	r3, #0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d028      	beq.n	8001e08 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001de4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00c      	beq.n	8001e08 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dfc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e06:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop

08001e34 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e42:	b2db      	uxtb	r3, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e5e:	4b89      	ldr	r3, [pc, #548]	; (8002084 <HAL_GPIO_Init+0x234>)
 8001e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e62:	e194      	b.n	800218e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8186 	beq.w	8002188 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d005      	beq.n	8001e94 <HAL_GPIO_Init+0x44>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d130      	bne.n	8001ef6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eca:	2201      	movs	r2, #1
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	f003 0201 	and.w	r2, r3, #1
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d017      	beq.n	8001f32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d123      	bne.n	8001f86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	69b9      	ldr	r1, [r7, #24]
 8001f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0203 	and.w	r2, r3, #3
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80e0 	beq.w	8002188 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <HAL_GPIO_Init+0x238>)
 8001fca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fce:	4a2e      	ldr	r2, [pc, #184]	; (8002088 <HAL_GPIO_Init+0x238>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_GPIO_Init+0x238>)
 8001fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe6:	4a29      	ldr	r2, [pc, #164]	; (800208c <HAL_GPIO_Init+0x23c>)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a20      	ldr	r2, [pc, #128]	; (8002090 <HAL_GPIO_Init+0x240>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d052      	beq.n	80020b8 <HAL_GPIO_Init+0x268>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_GPIO_Init+0x244>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d031      	beq.n	800207e <HAL_GPIO_Init+0x22e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_GPIO_Init+0x248>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02b      	beq.n	800207a <HAL_GPIO_Init+0x22a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1d      	ldr	r2, [pc, #116]	; (800209c <HAL_GPIO_Init+0x24c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d025      	beq.n	8002076 <HAL_GPIO_Init+0x226>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <HAL_GPIO_Init+0x250>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01f      	beq.n	8002072 <HAL_GPIO_Init+0x222>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <HAL_GPIO_Init+0x254>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d019      	beq.n	800206e <HAL_GPIO_Init+0x21e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <HAL_GPIO_Init+0x258>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x21a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a19      	ldr	r2, [pc, #100]	; (80020ac <HAL_GPIO_Init+0x25c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x216>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <HAL_GPIO_Init+0x260>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x212>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_GPIO_Init+0x264>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x20e>
 800205a:	2309      	movs	r3, #9
 800205c:	e02d      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 800205e:	230a      	movs	r3, #10
 8002060:	e02b      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 8002062:	2308      	movs	r3, #8
 8002064:	e029      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 8002066:	2307      	movs	r3, #7
 8002068:	e027      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 800206a:	2306      	movs	r3, #6
 800206c:	e025      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 800206e:	2305      	movs	r3, #5
 8002070:	e023      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 8002072:	2304      	movs	r3, #4
 8002074:	e021      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 8002076:	2303      	movs	r3, #3
 8002078:	e01f      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 800207a:	2302      	movs	r3, #2
 800207c:	e01d      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 800207e:	2301      	movs	r3, #1
 8002080:	e01b      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 8002082:	bf00      	nop
 8002084:	58000080 	.word	0x58000080
 8002088:	58024400 	.word	0x58024400
 800208c:	58000400 	.word	0x58000400
 8002090:	58020000 	.word	0x58020000
 8002094:	58020400 	.word	0x58020400
 8002098:	58020800 	.word	0x58020800
 800209c:	58020c00 	.word	0x58020c00
 80020a0:	58021000 	.word	0x58021000
 80020a4:	58021400 	.word	0x58021400
 80020a8:	58021800 	.word	0x58021800
 80020ac:	58021c00 	.word	0x58021c00
 80020b0:	58022000 	.word	0x58022000
 80020b4:	58022400 	.word	0x58022400
 80020b8:	2300      	movs	r3, #0
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	f002 0203 	and.w	r2, r2, #3
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	4093      	lsls	r3, r2
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ca:	4938      	ldr	r1, [pc, #224]	; (80021ac <HAL_GPIO_Init+0x35c>)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800212c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3301      	adds	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	f47f ae63 	bne.w	8001e64 <HAL_GPIO_Init+0x14>
  }
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	3724      	adds	r7, #36	; 0x24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	58000400 	.word	0x58000400

080021b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff f8f4 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	; 0x24
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002200:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002210:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	e006      	b.n	8002238 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002236:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d104      	bne.n	800224a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002248:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_I2C_Init+0x11c>)
 8002256:	430b      	orrs	r3, r1
 8002258:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002268:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69d9      	ldr	r1, [r3, #28]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1a      	ldr	r2, [r3, #32]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	02008000 	.word	0x02008000

080022d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	460b      	mov	r3, r1
 80022de:	817b      	strh	r3, [r7, #10]
 80022e0:	4613      	mov	r3, r2
 80022e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	f040 80da 	bne.w	80024a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_I2C_Master_Transmit+0x30>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0d3      	b.n	80024a8 <HAL_I2C_Master_Transmit+0x1d8>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002308:	f7ff fa26 	bl	8001758 <HAL_GetTick>
 800230c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2319      	movs	r3, #25
 8002314:	2201      	movs	r2, #1
 8002316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 ffe9 	bl	80032f2 <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0be      	b.n	80024a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2221      	movs	r2, #33	; 0x21
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2210      	movs	r2, #16
 8002336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	893a      	ldrh	r2, [r7, #8]
 800234a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	2bff      	cmp	r3, #255	; 0xff
 800235a:	d90e      	bls.n	800237a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	22ff      	movs	r2, #255	; 0xff
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	b2da      	uxtb	r2, r3
 8002368:	8979      	ldrh	r1, [r7, #10]
 800236a:	4b51      	ldr	r3, [pc, #324]	; (80024b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f001 f9e0 	bl	8003738 <I2C_TransferConfig>
 8002378:	e06c      	b.n	8002454 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	b2da      	uxtb	r2, r3
 800238a:	8979      	ldrh	r1, [r7, #10]
 800238c:	4b48      	ldr	r3, [pc, #288]	; (80024b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f001 f9cf 	bl	8003738 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800239a:	e05b      	b.n	8002454 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	6a39      	ldr	r1, [r7, #32]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 ffe6 	bl	8003372 <I2C_WaitOnTXISFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e07b      	b.n	80024a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d034      	beq.n	8002454 <HAL_I2C_Master_Transmit+0x184>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d130      	bne.n	8002454 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 ff78 	bl	80032f2 <I2C_WaitOnFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e04d      	b.n	80024a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2bff      	cmp	r3, #255	; 0xff
 8002414:	d90e      	bls.n	8002434 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	22ff      	movs	r2, #255	; 0xff
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	b2da      	uxtb	r2, r3
 8002422:	8979      	ldrh	r1, [r7, #10]
 8002424:	2300      	movs	r3, #0
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f001 f983 	bl	8003738 <I2C_TransferConfig>
 8002432:	e00f      	b.n	8002454 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	b2da      	uxtb	r2, r3
 8002444:	8979      	ldrh	r1, [r7, #10]
 8002446:	2300      	movs	r3, #0
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f001 f972 	bl	8003738 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d19e      	bne.n	800239c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	6a39      	ldr	r1, [r7, #32]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 ffc5 	bl	80033f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e01a      	b.n	80024a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2220      	movs	r2, #32
 8002478:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002486:	400b      	ands	r3, r1
 8002488:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	80002000 	.word	0x80002000
 80024b4:	fe00e800 	.word	0xfe00e800

080024b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	460b      	mov	r3, r1
 80024c6:	817b      	strh	r3, [r7, #10]
 80024c8:	4613      	mov	r3, r2
 80024ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	f040 80db 	bne.w	8002690 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_I2C_Master_Receive+0x30>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e0d4      	b.n	8002692 <HAL_I2C_Master_Receive+0x1da>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024f0:	f7ff f932 	bl	8001758 <HAL_GetTick>
 80024f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2319      	movs	r3, #25
 80024fc:	2201      	movs	r2, #1
 80024fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fef5 	bl	80032f2 <I2C_WaitOnFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0bf      	b.n	8002692 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2222      	movs	r2, #34	; 0x22
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2210      	movs	r2, #16
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	893a      	ldrh	r2, [r7, #8]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	2bff      	cmp	r3, #255	; 0xff
 8002542:	d90e      	bls.n	8002562 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	22ff      	movs	r2, #255	; 0xff
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	b2da      	uxtb	r2, r3
 8002550:	8979      	ldrh	r1, [r7, #10]
 8002552:	4b52      	ldr	r3, [pc, #328]	; (800269c <HAL_I2C_Master_Receive+0x1e4>)
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f001 f8ec 	bl	8003738 <I2C_TransferConfig>
 8002560:	e06d      	b.n	800263e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	b2da      	uxtb	r2, r3
 8002572:	8979      	ldrh	r1, [r7, #10]
 8002574:	4b49      	ldr	r3, [pc, #292]	; (800269c <HAL_I2C_Master_Receive+0x1e4>)
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f001 f8db 	bl	8003738 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002582:	e05c      	b.n	800263e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	6a39      	ldr	r1, [r7, #32]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 ff6f 	bl	800346c <I2C_WaitOnRXNEFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e07c      	b.n	8002692 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d034      	beq.n	800263e <HAL_I2C_Master_Receive+0x186>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d130      	bne.n	800263e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	2200      	movs	r2, #0
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fe83 	bl	80032f2 <I2C_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e04d      	b.n	8002692 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2bff      	cmp	r3, #255	; 0xff
 80025fe:	d90e      	bls.n	800261e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	22ff      	movs	r2, #255	; 0xff
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	b2da      	uxtb	r2, r3
 800260c:	8979      	ldrh	r1, [r7, #10]
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f001 f88e 	bl	8003738 <I2C_TransferConfig>
 800261c:	e00f      	b.n	800263e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	b2da      	uxtb	r2, r3
 800262e:	8979      	ldrh	r1, [r7, #10]
 8002630:	2300      	movs	r3, #0
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f001 f87d 	bl	8003738 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d19d      	bne.n	8002584 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	6a39      	ldr	r1, [r7, #32]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fed0 	bl	80033f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e01a      	b.n	8002692 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2220      	movs	r2, #32
 8002662:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_I2C_Master_Receive+0x1e8>)
 8002670:	400b      	ands	r3, r1
 8002672:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	80002400 	.word	0x80002400
 80026a0:	fe00e800 	.word	0xfe00e800

080026a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	68f9      	ldr	r1, [r7, #12]
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
  }
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d010      	beq.n	800271e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	09db      	lsrs	r3, r3, #7
 8002700:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800271c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	0a9b      	lsrs	r3, r3, #10
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d010      	beq.n	800274c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	09db      	lsrs	r3, r3, #7
 800272e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f043 0208 	orr.w	r2, r3, #8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800274a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d010      	beq.n	800277a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	09db      	lsrs	r3, r3, #7
 800275c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	f043 0202 	orr.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002778:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 030b 	and.w	r3, r3, #11
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800278a:	68f9      	ldr	r1, [r7, #12]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fc77 	bl	8003080 <I2C_ITError>
  }
}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	70fb      	strb	r3, [r7, #3]
 80027ce:	4613      	mov	r3, r2
 80027d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <I2C_Slave_ISR_IT+0x24>
 800283a:	2302      	movs	r3, #2
 800283c:	e0ec      	b.n	8002a18 <I2C_Slave_ISR_IT+0x1fe>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800285e:	6939      	ldr	r1, [r7, #16]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f9bf 	bl	8002be4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d04d      	beq.n	800290e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800287a:	2b00      	cmp	r3, #0
 800287c:	d047      	beq.n	800290e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d128      	bne.n	80028da <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b28      	cmp	r3, #40	; 0x28
 8002892:	d108      	bne.n	80028a6 <I2C_Slave_ISR_IT+0x8c>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800289a:	d104      	bne.n	80028a6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800289c:	6939      	ldr	r1, [r7, #16]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fb98 	bl	8002fd4 <I2C_ITListenCplt>
 80028a4:	e032      	b.n	800290c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b29      	cmp	r3, #41	; 0x29
 80028b0:	d10e      	bne.n	80028d0 <I2C_Slave_ISR_IT+0xb6>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b8:	d00a      	beq.n	80028d0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2210      	movs	r2, #16
 80028c0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fcd3 	bl	800326e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f92d 	bl	8002b28 <I2C_ITSlaveSeqCplt>
 80028ce:	e01d      	b.n	800290c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80028d8:	e096      	b.n	8002a08 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2210      	movs	r2, #16
 80028e0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f043 0204 	orr.w	r2, r3, #4
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <I2C_Slave_ISR_IT+0xe4>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fa:	f040 8085 	bne.w	8002a08 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	4619      	mov	r1, r3
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fbbb 	bl	8003080 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800290a:	e07d      	b.n	8002a08 <I2C_Slave_ISR_IT+0x1ee>
 800290c:	e07c      	b.n	8002a08 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d030      	beq.n	800297c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002922:	2b00      	cmp	r3, #0
 8002924:	d02a      	beq.n	800297c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d018      	beq.n	8002962 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d14f      	bne.n	8002a0c <I2C_Slave_ISR_IT+0x1f2>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002972:	d04b      	beq.n	8002a0c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f8d7 	bl	8002b28 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800297a:	e047      	b.n	8002a0c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	08db      	lsrs	r3, r3, #3
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002994:	6939      	ldr	r1, [r7, #16]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f842 	bl	8002a20 <I2C_ITAddrCplt>
 800299c:	e037      	b.n	8002a0e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d031      	beq.n	8002a0e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d02b      	beq.n	8002a0e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d018      	beq.n	80029f2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80029f0:	e00d      	b.n	8002a0e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f8:	d002      	beq.n	8002a00 <I2C_Slave_ISR_IT+0x1e6>
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f891 	bl	8002b28 <I2C_ITSlaveSeqCplt>
 8002a06:	e002      	b.n	8002a0e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002a08:	bf00      	nop
 8002a0a:	e000      	b.n	8002a0e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002a0c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a36:	2b28      	cmp	r3, #40	; 0x28
 8002a38:	d16a      	bne.n	8002b10 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	0c1b      	lsrs	r3, r3, #16
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002a58:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a66:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002a74:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d138      	bne.n	8002af0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	09db      	lsrs	r3, r3, #7
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	89bb      	ldrh	r3, [r7, #12]
 8002a86:	4053      	eors	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f003 0306 	and.w	r3, r3, #6
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d11c      	bne.n	8002acc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d13b      	bne.n	8002b20 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002abe:	89ba      	ldrh	r2, [r7, #12]
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff fe7c 	bl	80027c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002aca:	e029      	b.n	8002b20 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002acc:	893b      	ldrh	r3, [r7, #8]
 8002ace:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fe61 	bl	800379c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ae2:	89ba      	ldrh	r2, [r7, #12]
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fe6a 	bl	80027c2 <HAL_I2C_AddrCallback>
}
 8002aee:	e017      	b.n	8002b20 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fe51 	bl	800379c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b02:	89ba      	ldrh	r2, [r7, #12]
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	4619      	mov	r1, r3
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fe5a 	bl	80027c2 <HAL_I2C_AddrCallback>
}
 8002b0e:	e007      	b.n	8002b20 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2208      	movs	r2, #8
 8002b16:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	0b9b      	lsrs	r3, r3, #14
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e00d      	b.n	8002b7a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	0bdb      	lsrs	r3, r3, #15
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b78:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b29      	cmp	r3, #41	; 0x29
 8002b84:	d112      	bne.n	8002bac <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2228      	movs	r2, #40	; 0x28
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2221      	movs	r2, #33	; 0x21
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b94:	2101      	movs	r1, #1
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fe00 	bl	800379c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fdf8 	bl	800279a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002baa:	e017      	b.n	8002bdc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb6:	d111      	bne.n	8002bdc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2228      	movs	r2, #40	; 0x28
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2222      	movs	r2, #34	; 0x22
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fde7 	bl	800379c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff fde9 	bl	80027ae <HAL_I2C_SlaveRxCpltCallback>
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c00:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2220      	movs	r2, #32
 8002c08:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	2b21      	cmp	r3, #33	; 0x21
 8002c0e:	d002      	beq.n	8002c16 <I2C_ITSlaveCplt+0x32>
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b29      	cmp	r3, #41	; 0x29
 8002c14:	d108      	bne.n	8002c28 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002c16:	f248 0101 	movw	r1, #32769	; 0x8001
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fdbe 	bl	800379c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2221      	movs	r2, #33	; 0x21
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
 8002c26:	e00d      	b.n	8002c44 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b22      	cmp	r3, #34	; 0x22
 8002c2c:	d002      	beq.n	8002c34 <I2C_ITSlaveCplt+0x50>
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b2a      	cmp	r3, #42	; 0x2a
 8002c32:	d107      	bne.n	8002c44 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002c34:	f248 0102 	movw	r1, #32770	; 0x8002
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fdaf 	bl	800379c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2222      	movs	r2, #34	; 0x22
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c52:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b80      	ldr	r3, [pc, #512]	; (8002e60 <I2C_ITSlaveCplt+0x27c>)
 8002c60:	400b      	ands	r3, r1
 8002c62:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fb02 	bl	800326e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	0b9b      	lsrs	r3, r3, #14
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d07a      	beq.n	8002d6c <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c84:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8111 	beq.w	8002eb2 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a73      	ldr	r2, [pc, #460]	; (8002e64 <I2C_ITSlaveCplt+0x280>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d059      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a71      	ldr	r2, [pc, #452]	; (8002e68 <I2C_ITSlaveCplt+0x284>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d053      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6f      	ldr	r2, [pc, #444]	; (8002e6c <I2C_ITSlaveCplt+0x288>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04d      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a6d      	ldr	r2, [pc, #436]	; (8002e70 <I2C_ITSlaveCplt+0x28c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d047      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6b      	ldr	r2, [pc, #428]	; (8002e74 <I2C_ITSlaveCplt+0x290>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d041      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a69      	ldr	r2, [pc, #420]	; (8002e78 <I2C_ITSlaveCplt+0x294>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d03b      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a67      	ldr	r2, [pc, #412]	; (8002e7c <I2C_ITSlaveCplt+0x298>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d035      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a65      	ldr	r2, [pc, #404]	; (8002e80 <I2C_ITSlaveCplt+0x29c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d02f      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a63      	ldr	r2, [pc, #396]	; (8002e84 <I2C_ITSlaveCplt+0x2a0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d029      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a61      	ldr	r2, [pc, #388]	; (8002e88 <I2C_ITSlaveCplt+0x2a4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d023      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a5f      	ldr	r2, [pc, #380]	; (8002e8c <I2C_ITSlaveCplt+0x2a8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d01d      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a5d      	ldr	r2, [pc, #372]	; (8002e90 <I2C_ITSlaveCplt+0x2ac>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d017      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5b      	ldr	r2, [pc, #364]	; (8002e94 <I2C_ITSlaveCplt+0x2b0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d011      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a59      	ldr	r2, [pc, #356]	; (8002e98 <I2C_ITSlaveCplt+0x2b4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a57      	ldr	r2, [pc, #348]	; (8002e9c <I2C_ITSlaveCplt+0x2b8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d005      	beq.n	8002d50 <I2C_ITSlaveCplt+0x16c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a55      	ldr	r2, [pc, #340]	; (8002ea0 <I2C_ITSlaveCplt+0x2bc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d105      	bne.n	8002d5c <I2C_ITSlaveCplt+0x178>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	e004      	b.n	8002d66 <I2C_ITSlaveCplt+0x182>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	8553      	strh	r3, [r2, #42]	; 0x2a
 8002d6a:	e0a2      	b.n	8002eb2 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	0bdb      	lsrs	r3, r3, #15
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 809c 	beq.w	8002eb2 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d88:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 808f 	beq.w	8002eb2 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a32      	ldr	r2, [pc, #200]	; (8002e64 <I2C_ITSlaveCplt+0x280>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d059      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a30      	ldr	r2, [pc, #192]	; (8002e68 <I2C_ITSlaveCplt+0x284>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d053      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2e      	ldr	r2, [pc, #184]	; (8002e6c <I2C_ITSlaveCplt+0x288>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d04d      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <I2C_ITSlaveCplt+0x28c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d047      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2a      	ldr	r2, [pc, #168]	; (8002e74 <I2C_ITSlaveCplt+0x290>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d041      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a28      	ldr	r2, [pc, #160]	; (8002e78 <I2C_ITSlaveCplt+0x294>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d03b      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <I2C_ITSlaveCplt+0x298>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d035      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <I2C_ITSlaveCplt+0x29c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d02f      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <I2C_ITSlaveCplt+0x2a0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d029      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <I2C_ITSlaveCplt+0x2a4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d023      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <I2C_ITSlaveCplt+0x2a8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01d      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <I2C_ITSlaveCplt+0x2ac>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d017      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <I2C_ITSlaveCplt+0x2b0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d011      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <I2C_ITSlaveCplt+0x2b4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00b      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a16      	ldr	r2, [pc, #88]	; (8002e9c <I2C_ITSlaveCplt+0x2b8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d005      	beq.n	8002e54 <I2C_ITSlaveCplt+0x270>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <I2C_ITSlaveCplt+0x2bc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d127      	bne.n	8002ea4 <I2C_ITSlaveCplt+0x2c0>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	e026      	b.n	8002eae <I2C_ITSlaveCplt+0x2ca>
 8002e60:	fe00e800 	.word	0xfe00e800
 8002e64:	40020010 	.word	0x40020010
 8002e68:	40020028 	.word	0x40020028
 8002e6c:	40020040 	.word	0x40020040
 8002e70:	40020058 	.word	0x40020058
 8002e74:	40020070 	.word	0x40020070
 8002e78:	40020088 	.word	0x40020088
 8002e7c:	400200a0 	.word	0x400200a0
 8002e80:	400200b8 	.word	0x400200b8
 8002e84:	40020410 	.word	0x40020410
 8002e88:	40020428 	.word	0x40020428
 8002e8c:	40020440 	.word	0x40020440
 8002e90:	40020458 	.word	0x40020458
 8002e94:	40020470 	.word	0x40020470
 8002e98:	40020488 	.word	0x40020488
 8002e9c:	400204a0 	.word	0x400204a0
 8002ea0:	400204b8 	.word	0x400204b8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d020      	beq.n	8002f00 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f043 0204 	orr.w	r2, r3, #4
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d010      	beq.n	8002f4e <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8a4 	bl	8003080 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b28      	cmp	r3, #40	; 0x28
 8002f42:	d141      	bne.n	8002fc8 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f44:	6979      	ldr	r1, [r7, #20]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f844 	bl	8002fd4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f4c:	e03c      	b.n	8002fc8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f56:	d014      	beq.n	8002f82 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff fde5 	bl	8002b28 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <I2C_ITSlaveCplt+0x3ec>)
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fc2f 	bl	80027de <HAL_I2C_ListenCpltCallback>
}
 8002f80:	e022      	b.n	8002fc8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b22      	cmp	r3, #34	; 0x22
 8002f8c:	d10e      	bne.n	8002fac <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff fc02 	bl	80027ae <HAL_I2C_SlaveRxCpltCallback>
}
 8002faa:	e00d      	b.n	8002fc8 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fbe9 	bl	800279a <HAL_I2C_SlaveTxCpltCallback>
}
 8002fc8:	bf00      	nop
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	ffff0000 	.word	0xffff0000

08002fd4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a26      	ldr	r2, [pc, #152]	; (800307c <I2C_ITListenCplt+0xa8>)
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d022      	beq.n	8003052 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f043 0204 	orr.w	r2, r3, #4
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003052:	f248 0103 	movw	r1, #32771	; 0x8003
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fba0 	bl	800379c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff fbb6 	bl	80027de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	ffff0000 	.word	0xffff0000

08003080 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a5d      	ldr	r2, [pc, #372]	; (8003214 <I2C_ITError+0x194>)
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b28      	cmp	r3, #40	; 0x28
 80030b6:	d005      	beq.n	80030c4 <I2C_ITError+0x44>
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b29      	cmp	r3, #41	; 0x29
 80030bc:	d002      	beq.n	80030c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2b2a      	cmp	r3, #42	; 0x2a
 80030c2:	d10b      	bne.n	80030dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030c4:	2103      	movs	r1, #3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fb68 	bl	800379c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2228      	movs	r2, #40	; 0x28
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a50      	ldr	r2, [pc, #320]	; (8003218 <I2C_ITError+0x198>)
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34
 80030da:	e011      	b.n	8003100 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030dc:	f248 0103 	movw	r1, #32771	; 0x8003
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fb5b 	bl	800379c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b60      	cmp	r3, #96	; 0x60
 80030f0:	d003      	beq.n	80030fa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	2b00      	cmp	r3, #0
 800310c:	d039      	beq.n	8003182 <I2C_ITError+0x102>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b11      	cmp	r3, #17
 8003112:	d002      	beq.n	800311a <I2C_ITError+0x9a>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b21      	cmp	r3, #33	; 0x21
 8003118:	d133      	bne.n	8003182 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003128:	d107      	bne.n	800313a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003138:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fe78 	bl	8001e34 <HAL_DMA_GetState>
 8003144:	4603      	mov	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	d017      	beq.n	800317a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	4a33      	ldr	r2, [pc, #204]	; (800321c <I2C_ITError+0x19c>)
 8003150:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fc22 	bl	80019a8 <HAL_DMA_Abort_IT>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d04d      	beq.n	8003206 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003174:	4610      	mov	r0, r2
 8003176:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003178:	e045      	b.n	8003206 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f850 	bl	8003220 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003180:	e041      	b.n	8003206 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d039      	beq.n	80031fe <I2C_ITError+0x17e>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b12      	cmp	r3, #18
 800318e:	d002      	beq.n	8003196 <I2C_ITError+0x116>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b22      	cmp	r3, #34	; 0x22
 8003194:	d133      	bne.n	80031fe <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a4:	d107      	bne.n	80031b6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fe3a 	bl	8001e34 <HAL_DMA_GetState>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d017      	beq.n	80031f6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	4a14      	ldr	r2, [pc, #80]	; (800321c <I2C_ITError+0x19c>)
 80031cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fbe4 	bl	80019a8 <HAL_DMA_Abort_IT>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d011      	beq.n	800320a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031f0:	4610      	mov	r0, r2
 80031f2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031f4:	e009      	b.n	800320a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f812 	bl	8003220 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031fc:	e005      	b.n	800320a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f80e 	bl	8003220 <I2C_TreatErrorCallback>
  }
}
 8003204:	e002      	b.n	800320c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003206:	bf00      	nop
 8003208:	e000      	b.n	800320c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800320a:	bf00      	nop
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	ffff0000 	.word	0xffff0000
 8003218:	0800281b 	.word	0x0800281b
 800321c:	080032b7 	.word	0x080032b7

08003220 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b60      	cmp	r3, #96	; 0x60
 8003232:	d10e      	bne.n	8003252 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fadb 	bl	8002806 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003250:	e009      	b.n	8003266 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fac6 	bl	80027f2 <HAL_I2C_ErrorCallback>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b02      	cmp	r3, #2
 8003282:	d103      	bne.n	800328c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2200      	movs	r2, #0
 800328a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d007      	beq.n	80032aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	619a      	str	r2, [r3, #24]
  }
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	2200      	movs	r2, #0
 80032d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	2200      	movs	r2, #0
 80032e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff ff9b 	bl	8003220 <I2C_TreatErrorCallback>
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	4613      	mov	r3, r2
 8003300:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003302:	e022      	b.n	800334a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330a:	d01e      	beq.n	800334a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330c:	f7fe fa24 	bl	8001758 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d302      	bcc.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x30>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d113      	bne.n	800334a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e00f      	b.n	800336a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4013      	ands	r3, r2
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	429a      	cmp	r2, r3
 8003358:	bf0c      	ite	eq
 800335a:	2301      	moveq	r3, #1
 800335c:	2300      	movne	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	429a      	cmp	r2, r3
 8003366:	d0cd      	beq.n	8003304 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800337e:	e02c      	b.n	80033da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f8eb 	bl	8003560 <I2C_IsErrorOccurred>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e02a      	b.n	80033ea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d01e      	beq.n	80033da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339c:	f7fe f9dc 	bl	8001758 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d302      	bcc.n	80033b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d113      	bne.n	80033da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e007      	b.n	80033ea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d1cb      	bne.n	8003380 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033fe:	e028      	b.n	8003452 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f8ab 	bl	8003560 <I2C_IsErrorOccurred>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e026      	b.n	8003462 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003414:	f7fe f9a0 	bl	8001758 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d113      	bne.n	8003452 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e007      	b.n	8003462 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b20      	cmp	r3, #32
 800345e:	d1cf      	bne.n	8003400 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003478:	e064      	b.n	8003544 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f86e 	bl	8003560 <I2C_IsErrorOccurred>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e062      	b.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b20      	cmp	r3, #32
 800349a:	d138      	bne.n	800350e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d105      	bne.n	80034b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e04e      	b.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d107      	bne.n	80034d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2210      	movs	r2, #16
 80034ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2204      	movs	r2, #4
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
 80034d2:	e002      	b.n	80034da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2220      	movs	r2, #32
 80034e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80034ee:	400b      	ands	r3, r1
 80034f0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e022      	b.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fe f923 	bl	8001758 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10f      	bne.n	8003544 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e007      	b.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b04      	cmp	r3, #4
 8003550:	d193      	bne.n	800347a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	fe00e800 	.word	0xfe00e800

08003560 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d075      	beq.n	8003678 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2210      	movs	r2, #16
 8003592:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003594:	e056      	b.n	8003644 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d052      	beq.n	8003644 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7fe f8db 	bl	8001758 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <I2C_IsErrorOccurred+0x54>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d147      	bne.n	8003644 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d6:	d12e      	bne.n	8003636 <I2C_IsErrorOccurred+0xd6>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035de:	d02a      	beq.n	8003636 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d027      	beq.n	8003636 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035f6:	f7fe f8af 	bl	8001758 <HAL_GetTick>
 80035fa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035fc:	e01b      	b.n	8003636 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035fe:	f7fe f8ab 	bl	8001758 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b19      	cmp	r3, #25
 800360a:	d914      	bls.n	8003636 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b20      	cmp	r3, #32
 8003642:	d1dc      	bne.n	80035fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b20      	cmp	r3, #32
 8003650:	d003      	beq.n	800365a <I2C_IsErrorOccurred+0xfa>
 8003652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003656:	2b00      	cmp	r3, #0
 8003658:	d09d      	beq.n	8003596 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800365a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2220      	movs	r2, #32
 8003668:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800369a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f043 0308 	orr.w	r3, r3, #8
 80036b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d01c      	beq.n	8003728 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f7ff fdbd 	bl	800326e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <I2C_IsErrorOccurred+0x1d4>)
 8003700:	400b      	ands	r3, r1
 8003702:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	431a      	orrs	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800372c:	4618      	mov	r0, r3
 800372e:	3728      	adds	r7, #40	; 0x28
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	fe00e800 	.word	0xfe00e800

08003738 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	817b      	strh	r3, [r7, #10]
 8003746:	4613      	mov	r3, r2
 8003748:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800374a:	897b      	ldrh	r3, [r7, #10]
 800374c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003750:	7a7b      	ldrb	r3, [r7, #9]
 8003752:	041b      	lsls	r3, r3, #16
 8003754:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003758:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	4313      	orrs	r3, r2
 8003762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003766:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	0d5b      	lsrs	r3, r3, #21
 8003772:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003776:	4b08      	ldr	r3, [pc, #32]	; (8003798 <I2C_TransferConfig+0x60>)
 8003778:	430b      	orrs	r3, r1
 800377a:	43db      	mvns	r3, r3
 800377c:	ea02 0103 	and.w	r1, r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	03ff63ff 	.word	0x03ff63ff

0800379c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80037ac:	887b      	ldrh	r3, [r7, #2]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00f      	beq.n	80037d6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80037bc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037ca:	2b28      	cmp	r3, #40	; 0x28
 80037cc:	d003      	beq.n	80037d6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80037d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00f      	beq.n	8003800 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80037e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037f4:	2b28      	cmp	r3, #40	; 0x28
 80037f6:	d003      	beq.n	8003800 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80037fe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003800:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003804:	2b00      	cmp	r3, #0
 8003806:	da03      	bge.n	8003810 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800380e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003810:	887b      	ldrh	r3, [r7, #2]
 8003812:	2b10      	cmp	r3, #16
 8003814:	d103      	bne.n	800381e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800381c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	2b20      	cmp	r3, #32
 8003822:	d103      	bne.n	800382c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f043 0320 	orr.w	r3, r3, #32
 800382a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d103      	bne.n	800383a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003838:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	43da      	mvns	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	400a      	ands	r2, r1
 800384a:	601a      	str	r2, [r3, #0]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b20      	cmp	r3, #32
 800386c:	d138      	bne.n	80038e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003878:	2302      	movs	r3, #2
 800387a:	e032      	b.n	80038e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2224      	movs	r2, #36	; 0x24
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b20      	cmp	r3, #32
 8003902:	d139      	bne.n	8003978 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800390e:	2302      	movs	r3, #2
 8003910:	e033      	b.n	800397a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2224      	movs	r2, #36	; 0x24
 800391e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003940:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003990:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <HAL_PWREx_ConfigSupply+0xb0>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	2b06      	cmp	r3, #6
 800399a:	d00a      	beq.n	80039b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800399c:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <HAL_PWREx_ConfigSupply+0xb0>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d001      	beq.n	80039ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e040      	b.n	8003a30 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e03e      	b.n	8003a30 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039b2:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <HAL_PWREx_ConfigSupply+0xb0>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80039ba:	491f      	ldr	r1, [pc, #124]	; (8003a38 <HAL_PWREx_ConfigSupply+0xb0>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039c2:	f7fd fec9 	bl	8001758 <HAL_GetTick>
 80039c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039c8:	e009      	b.n	80039de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039ca:	f7fd fec5 	bl	8001758 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d8:	d901      	bls.n	80039de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e028      	b.n	8003a30 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <HAL_PWREx_ConfigSupply+0xb0>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ea:	d1ee      	bne.n	80039ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b1e      	cmp	r3, #30
 80039f0:	d008      	beq.n	8003a04 <HAL_PWREx_ConfigSupply+0x7c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b2e      	cmp	r3, #46	; 0x2e
 80039f6:	d005      	beq.n	8003a04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b1d      	cmp	r3, #29
 80039fc:	d002      	beq.n	8003a04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b2d      	cmp	r3, #45	; 0x2d
 8003a02:	d114      	bne.n	8003a2e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a04:	f7fd fea8 	bl	8001758 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a0a:	e009      	b.n	8003a20 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a0c:	f7fd fea4 	bl	8001758 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a1a:	d901      	bls.n	8003a20 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e007      	b.n	8003a30 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2c:	d1ee      	bne.n	8003a0c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	58024800 	.word	0x58024800

08003a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08c      	sub	sp, #48	; 0x30
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f000 bc1d 	b.w	800428a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8087 	beq.w	8003b6c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5e:	4b99      	ldr	r3, [pc, #612]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a68:	4b96      	ldr	r3, [pc, #600]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d007      	beq.n	8003a84 <HAL_RCC_OscConfig+0x48>
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	2b18      	cmp	r3, #24
 8003a78:	d110      	bne.n	8003a9c <HAL_RCC_OscConfig+0x60>
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d10b      	bne.n	8003a9c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	4b8f      	ldr	r3, [pc, #572]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d06c      	beq.n	8003b6a <HAL_RCC_OscConfig+0x12e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d168      	bne.n	8003b6a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e3f6      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x78>
 8003aa6:	4b87      	ldr	r3, [pc, #540]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a86      	ldr	r2, [pc, #536]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e02e      	b.n	8003b12 <HAL_RCC_OscConfig+0xd6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10c      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x9a>
 8003abc:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a80      	ldr	r2, [pc, #512]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b7e      	ldr	r3, [pc, #504]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7d      	ldr	r2, [pc, #500]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e01d      	b.n	8003b12 <HAL_RCC_OscConfig+0xd6>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ade:	d10c      	bne.n	8003afa <HAL_RCC_OscConfig+0xbe>
 8003ae0:	4b78      	ldr	r3, [pc, #480]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a77      	ldr	r2, [pc, #476]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003ae6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b75      	ldr	r3, [pc, #468]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a74      	ldr	r2, [pc, #464]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e00b      	b.n	8003b12 <HAL_RCC_OscConfig+0xd6>
 8003afa:	4b72      	ldr	r3, [pc, #456]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a71      	ldr	r2, [pc, #452]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b6f      	ldr	r3, [pc, #444]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6e      	ldr	r2, [pc, #440]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d013      	beq.n	8003b42 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fd fe1d 	bl	8001758 <HAL_GetTick>
 8003b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b22:	f7fd fe19 	bl	8001758 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b64      	cmp	r3, #100	; 0x64
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e3aa      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b34:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0xe6>
 8003b40:	e014      	b.n	8003b6c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd fe09 	bl	8001758 <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4a:	f7fd fe05 	bl	8001758 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b64      	cmp	r3, #100	; 0x64
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e396      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b5c:	4b59      	ldr	r3, [pc, #356]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x10e>
 8003b68:	e000      	b.n	8003b6c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80cb 	beq.w	8003d10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b7a:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b82:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b84:	4b4f      	ldr	r3, [pc, #316]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x164>
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	2b18      	cmp	r3, #24
 8003b94:	d156      	bne.n	8003c44 <HAL_RCC_OscConfig+0x208>
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d151      	bne.n	8003c44 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba0:	4b48      	ldr	r3, [pc, #288]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x17c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e368      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bb8:	4b42      	ldr	r3, [pc, #264]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f023 0219 	bic.w	r2, r3, #25
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	493f      	ldr	r1, [pc, #252]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bca:	f7fd fdc5 	bl	8001758 <HAL_GetTick>
 8003bce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd2:	f7fd fdc1 	bl	8001758 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e352      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003be4:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf0:	f7fd fdbe 	bl	8001770 <HAL_GetREVID>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d817      	bhi.n	8003c2e <HAL_RCC_OscConfig+0x1f2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d108      	bne.n	8003c18 <HAL_RCC_OscConfig+0x1dc>
 8003c06:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c0e:	4a2d      	ldr	r2, [pc, #180]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c14:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c16:	e07b      	b.n	8003d10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	031b      	lsls	r3, r3, #12
 8003c26:	4927      	ldr	r1, [pc, #156]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2c:	e070      	b.n	8003d10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	061b      	lsls	r3, r3, #24
 8003c3c:	4921      	ldr	r1, [pc, #132]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c42:	e065      	b.n	8003d10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d048      	beq.n	8003cde <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f023 0219 	bic.w	r2, r3, #25
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	491a      	ldr	r1, [pc, #104]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fd7b 	bl	8001758 <HAL_GetTick>
 8003c62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c66:	f7fd fd77 	bl	8001758 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e308      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	f7fd fd74 	bl	8001770 <HAL_GetREVID>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d81a      	bhi.n	8003cc8 <HAL_RCC_OscConfig+0x28c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d108      	bne.n	8003cac <HAL_RCC_OscConfig+0x270>
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca8:	6053      	str	r3, [r2, #4]
 8003caa:	e031      	b.n	8003d10 <HAL_RCC_OscConfig+0x2d4>
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	4902      	ldr	r1, [pc, #8]	; (8003cc4 <HAL_RCC_OscConfig+0x288>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
 8003cc0:	e026      	b.n	8003d10 <HAL_RCC_OscConfig+0x2d4>
 8003cc2:	bf00      	nop
 8003cc4:	58024400 	.word	0x58024400
 8003cc8:	4b9a      	ldr	r3, [pc, #616]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	4997      	ldr	r1, [pc, #604]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
 8003cdc:	e018      	b.n	8003d10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cde:	4b95      	ldr	r3, [pc, #596]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a94      	ldr	r2, [pc, #592]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fd fd35 	bl	8001758 <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7fd fd31 	bl	8001758 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e2c2      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d04:	4b8b      	ldr	r3, [pc, #556]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f0      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a9 	beq.w	8003e70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d1e:	4b85      	ldr	r3, [pc, #532]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d28:	4b82      	ldr	r3, [pc, #520]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d007      	beq.n	8003d44 <HAL_RCC_OscConfig+0x308>
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b18      	cmp	r3, #24
 8003d38:	d13a      	bne.n	8003db0 <HAL_RCC_OscConfig+0x374>
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d135      	bne.n	8003db0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d44:	4b7b      	ldr	r3, [pc, #492]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_OscConfig+0x320>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	2b80      	cmp	r3, #128	; 0x80
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e296      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d5c:	f7fd fd08 	bl	8001770 <HAL_GetREVID>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d817      	bhi.n	8003d9a <HAL_RCC_OscConfig+0x35e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d108      	bne.n	8003d84 <HAL_RCC_OscConfig+0x348>
 8003d72:	4b70      	ldr	r3, [pc, #448]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d7a:	4a6e      	ldr	r2, [pc, #440]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003d7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d80:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d82:	e075      	b.n	8003e70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d84:	4b6b      	ldr	r3, [pc, #428]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	069b      	lsls	r3, r3, #26
 8003d92:	4968      	ldr	r1, [pc, #416]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d98:	e06a      	b.n	8003e70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d9a:	4b66      	ldr	r3, [pc, #408]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	061b      	lsls	r3, r3, #24
 8003da8:	4962      	ldr	r1, [pc, #392]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dae:	e05f      	b.n	8003e70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d042      	beq.n	8003e3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003db8:	4b5e      	ldr	r3, [pc, #376]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a5d      	ldr	r2, [pc, #372]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fcc8 	bl	8001758 <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003dcc:	f7fd fcc4 	bl	8001758 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e255      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dde:	4b55      	ldr	r3, [pc, #340]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dea:	f7fd fcc1 	bl	8001770 <HAL_GetREVID>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d817      	bhi.n	8003e28 <HAL_RCC_OscConfig+0x3ec>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d108      	bne.n	8003e12 <HAL_RCC_OscConfig+0x3d6>
 8003e00:	4b4c      	ldr	r3, [pc, #304]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e08:	4a4a      	ldr	r2, [pc, #296]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e0e:	6053      	str	r3, [r2, #4]
 8003e10:	e02e      	b.n	8003e70 <HAL_RCC_OscConfig+0x434>
 8003e12:	4b48      	ldr	r3, [pc, #288]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	069b      	lsls	r3, r3, #26
 8003e20:	4944      	ldr	r1, [pc, #272]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
 8003e26:	e023      	b.n	8003e70 <HAL_RCC_OscConfig+0x434>
 8003e28:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	493f      	ldr	r1, [pc, #252]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60cb      	str	r3, [r1, #12]
 8003e3c:	e018      	b.n	8003e70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e3e:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fd fc85 	bl	8001758 <HAL_GetTick>
 8003e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e52:	f7fd fc81 	bl	8001758 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e212      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e64:	4b33      	ldr	r3, [pc, #204]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f0      	bne.n	8003e52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d036      	beq.n	8003eea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d019      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e88:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd fc62 	bl	8001758 <HAL_GetTick>
 8003e94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e98:	f7fd fc5e 	bl	8001758 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1ef      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eaa:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x45c>
 8003eb6:	e018      	b.n	8003eea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fd fc48 	bl	8001758 <HAL_GetTick>
 8003ec8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ecc:	f7fd fc44 	bl	8001758 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1d5      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d039      	beq.n	8003f6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01c      	beq.n	8003f38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003f04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f0a:	f7fd fc25 	bl	8001758 <HAL_GetTick>
 8003f0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f12:	f7fd fc21 	bl	8001758 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e1b2      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_RCC_OscConfig+0x4f8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x4d6>
 8003f30:	e01b      	b.n	8003f6a <HAL_RCC_OscConfig+0x52e>
 8003f32:	bf00      	nop
 8003f34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f38:	4b9b      	ldr	r3, [pc, #620]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a9a      	ldr	r2, [pc, #616]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f44:	f7fd fc08 	bl	8001758 <HAL_GetTick>
 8003f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f4c:	f7fd fc04 	bl	8001758 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e195      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f5e:	4b92      	ldr	r3, [pc, #584]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8081 	beq.w	800407a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f78:	4b8c      	ldr	r3, [pc, #560]	; (80041ac <HAL_RCC_OscConfig+0x770>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a8b      	ldr	r2, [pc, #556]	; (80041ac <HAL_RCC_OscConfig+0x770>)
 8003f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f84:	f7fd fbe8 	bl	8001758 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f8c:	f7fd fbe4 	bl	8001758 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e175      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9e:	4b83      	ldr	r3, [pc, #524]	; (80041ac <HAL_RCC_OscConfig+0x770>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d106      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x584>
 8003fb2:	4b7d      	ldr	r3, [pc, #500]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a7c      	ldr	r2, [pc, #496]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	e02d      	b.n	800401c <HAL_RCC_OscConfig+0x5e0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x5a6>
 8003fc8:	4b77      	ldr	r3, [pc, #476]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	4a76      	ldr	r2, [pc, #472]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd4:	4b74      	ldr	r3, [pc, #464]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a73      	ldr	r2, [pc, #460]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003fda:	f023 0304 	bic.w	r3, r3, #4
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe0:	e01c      	b.n	800401c <HAL_RCC_OscConfig+0x5e0>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0x5c8>
 8003fea:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a6e      	ldr	r2, [pc, #440]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	4a6b      	ldr	r2, [pc, #428]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	6713      	str	r3, [r2, #112]	; 0x70
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0x5e0>
 8004004:	4b68      	ldr	r3, [pc, #416]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a67      	ldr	r2, [pc, #412]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a64      	ldr	r2, [pc, #400]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004016:	f023 0304 	bic.w	r3, r3, #4
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d015      	beq.n	8004050 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fd fb98 	bl	8001758 <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800402a:	e00a      	b.n	8004042 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402c:	f7fd fb94 	bl	8001758 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e123      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004042:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ee      	beq.n	800402c <HAL_RCC_OscConfig+0x5f0>
 800404e:	e014      	b.n	800407a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7fd fb82 	bl	8001758 <HAL_GetTick>
 8004054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004056:	e00a      	b.n	800406e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004058:	f7fd fb7e 	bl	8001758 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	; 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e10d      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800406e:	4b4e      	ldr	r3, [pc, #312]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1ee      	bne.n	8004058 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8102 	beq.w	8004288 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004084:	4b48      	ldr	r3, [pc, #288]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800408c:	2b18      	cmp	r3, #24
 800408e:	f000 80bd 	beq.w	800420c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b02      	cmp	r3, #2
 8004098:	f040 809e 	bne.w	80041d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409c:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a41      	ldr	r2, [pc, #260]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 80040a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fd fb56 	bl	8001758 <HAL_GetTick>
 80040ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fd fb52 	bl	8001758 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0e3      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040c2:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 80040d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d2:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <HAL_RCC_OscConfig+0x774>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040de:	0112      	lsls	r2, r2, #4
 80040e0:	430a      	orrs	r2, r1
 80040e2:	4931      	ldr	r1, [pc, #196]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	628b      	str	r3, [r1, #40]	; 0x28
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	3b01      	subs	r3, #1
 80040ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	3b01      	subs	r3, #1
 80040f8:	025b      	lsls	r3, r3, #9
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	3b01      	subs	r3, #1
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	3b01      	subs	r3, #1
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004118:	4923      	ldr	r1, [pc, #140]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 800411a:	4313      	orrs	r3, r2
 800411c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800411e:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	4a21      	ldr	r2, [pc, #132]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 800412c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800412e:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_RCC_OscConfig+0x778>)
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004136:	00d2      	lsls	r2, r2, #3
 8004138:	491b      	ldr	r1, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 800413a:	4313      	orrs	r3, r2
 800413c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	f023 020c 	bic.w	r2, r3, #12
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4917      	ldr	r1, [pc, #92]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 800414c:	4313      	orrs	r3, r2
 800414e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004150:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f023 0202 	bic.w	r2, r3, #2
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415c:	4912      	ldr	r1, [pc, #72]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 800415e:	4313      	orrs	r3, r2
 8004160:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416e:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_RCC_OscConfig+0x76c>)
 8004198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800419c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419e:	f7fd fadb 	bl	8001758 <HAL_GetTick>
 80041a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041a4:	e011      	b.n	80041ca <HAL_RCC_OscConfig+0x78e>
 80041a6:	bf00      	nop
 80041a8:	58024400 	.word	0x58024400
 80041ac:	58024800 	.word	0x58024800
 80041b0:	fffffc0c 	.word	0xfffffc0c
 80041b4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b8:	f7fd face 	bl	8001758 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e05f      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ca:	4b32      	ldr	r3, [pc, #200]	; (8004294 <HAL_RCC_OscConfig+0x858>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x77c>
 80041d6:	e057      	b.n	8004288 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d8:	4b2e      	ldr	r3, [pc, #184]	; (8004294 <HAL_RCC_OscConfig+0x858>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <HAL_RCC_OscConfig+0x858>)
 80041de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fd fab8 	bl	8001758 <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fd fab4 	bl	8001758 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e045      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041fe:	4b25      	ldr	r3, [pc, #148]	; (8004294 <HAL_RCC_OscConfig+0x858>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x7b0>
 800420a:	e03d      	b.n	8004288 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800420c:	4b21      	ldr	r3, [pc, #132]	; (8004294 <HAL_RCC_OscConfig+0x858>)
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_RCC_OscConfig+0x858>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b01      	cmp	r3, #1
 800421e:	d031      	beq.n	8004284 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f003 0203 	and.w	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d12a      	bne.n	8004284 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d122      	bne.n	8004284 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d11a      	bne.n	8004284 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	0a5b      	lsrs	r3, r3, #9
 8004252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d111      	bne.n	8004284 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	0c1b      	lsrs	r3, r3, #16
 8004264:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d108      	bne.n	8004284 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	0e1b      	lsrs	r3, r3, #24
 8004276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3730      	adds	r7, #48	; 0x30
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	58024400 	.word	0x58024400

08004298 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e19c      	b.n	80045e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ac:	4b8a      	ldr	r3, [pc, #552]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d910      	bls.n	80042dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b87      	ldr	r3, [pc, #540]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 020f 	bic.w	r2, r3, #15
 80042c2:	4985      	ldr	r1, [pc, #532]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b83      	ldr	r3, [pc, #524]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e184      	b.n	80045e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d010      	beq.n	800430a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	4b7b      	ldr	r3, [pc, #492]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d908      	bls.n	800430a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042f8:	4b78      	ldr	r3, [pc, #480]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	4975      	ldr	r1, [pc, #468]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004306:	4313      	orrs	r3, r2
 8004308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d010      	beq.n	8004338 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	4b70      	ldr	r3, [pc, #448]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004322:	429a      	cmp	r2, r3
 8004324:	d908      	bls.n	8004338 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004326:	4b6d      	ldr	r3, [pc, #436]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	496a      	ldr	r1, [pc, #424]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004334:	4313      	orrs	r3, r2
 8004336:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	4b64      	ldr	r3, [pc, #400]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004350:	429a      	cmp	r2, r3
 8004352:	d908      	bls.n	8004366 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004354:	4b61      	ldr	r3, [pc, #388]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	495e      	ldr	r1, [pc, #376]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004362:	4313      	orrs	r3, r2
 8004364:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d010      	beq.n	8004394 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	4b59      	ldr	r3, [pc, #356]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800437e:	429a      	cmp	r2, r3
 8004380:	d908      	bls.n	8004394 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004382:	4b56      	ldr	r3, [pc, #344]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	4953      	ldr	r1, [pc, #332]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004390:	4313      	orrs	r3, r2
 8004392:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d010      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4b4d      	ldr	r3, [pc, #308]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d908      	bls.n	80043c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b0:	4b4a      	ldr	r3, [pc, #296]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f023 020f 	bic.w	r2, r3, #15
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4947      	ldr	r1, [pc, #284]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d055      	beq.n	800447a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043ce:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4940      	ldr	r1, [pc, #256]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d107      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043e8:	4b3c      	ldr	r3, [pc, #240]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d121      	bne.n	8004438 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0f6      	b.n	80045e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004400:	4b36      	ldr	r3, [pc, #216]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d115      	bne.n	8004438 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0ea      	b.n	80045e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d107      	bne.n	8004428 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004418:	4b30      	ldr	r3, [pc, #192]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0de      	b.n	80045e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004428:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0d6      	b.n	80045e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004438:	4b28      	ldr	r3, [pc, #160]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f023 0207 	bic.w	r2, r3, #7
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4925      	ldr	r1, [pc, #148]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004446:	4313      	orrs	r3, r2
 8004448:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fd f985 	bl	8001758 <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004450:	e00a      	b.n	8004468 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004452:	f7fd f981 	bl	8001758 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e0be      	b.n	80045e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004468:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	429a      	cmp	r2, r3
 8004478:	d1eb      	bne.n	8004452 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d010      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	4b14      	ldr	r3, [pc, #80]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	429a      	cmp	r2, r3
 8004494:	d208      	bcs.n	80044a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f023 020f 	bic.w	r2, r3, #15
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	490e      	ldr	r1, [pc, #56]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d214      	bcs.n	80044e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 020f 	bic.w	r2, r3, #15
 80044be:	4906      	ldr	r1, [pc, #24]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e086      	b.n	80045e6 <HAL_RCC_ClockConfig+0x34e>
 80044d8:	52002000 	.word	0x52002000
 80044dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d010      	beq.n	800450e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d208      	bcs.n	800450e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044fc:	4b3c      	ldr	r3, [pc, #240]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	4939      	ldr	r1, [pc, #228]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 800450a:	4313      	orrs	r3, r2
 800450c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d010      	beq.n	800453c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	4b34      	ldr	r3, [pc, #208]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004526:	429a      	cmp	r2, r3
 8004528:	d208      	bcs.n	800453c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800452a:	4b31      	ldr	r3, [pc, #196]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	492e      	ldr	r1, [pc, #184]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 8004538:	4313      	orrs	r3, r2
 800453a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	4b28      	ldr	r3, [pc, #160]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004554:	429a      	cmp	r2, r3
 8004556:	d208      	bcs.n	800456a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004558:	4b25      	ldr	r3, [pc, #148]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	4922      	ldr	r1, [pc, #136]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 8004566:	4313      	orrs	r3, r2
 8004568:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d010      	beq.n	8004598 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004582:	429a      	cmp	r2, r3
 8004584:	d208      	bcs.n	8004598 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	4917      	ldr	r1, [pc, #92]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 8004594:	4313      	orrs	r3, r2
 8004596:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004598:	f000 f834 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	4912      	ldr	r1, [pc, #72]	; (80045f4 <HAL_RCC_ClockConfig+0x35c>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
 80045b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <HAL_RCC_ClockConfig+0x358>)
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	4a0d      	ldr	r2, [pc, #52]	; (80045f4 <HAL_RCC_ClockConfig+0x35c>)
 80045c0:	5cd3      	ldrb	r3, [r2, r3]
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <HAL_RCC_ClockConfig+0x360>)
 80045ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045d0:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x364>)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_RCC_ClockConfig+0x368>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd f872 	bl	80016c4 <HAL_InitTick>
 80045e0:	4603      	mov	r3, r0
 80045e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	58024400 	.word	0x58024400
 80045f4:	08006624 	.word	0x08006624
 80045f8:	24000004 	.word	0x24000004
 80045fc:	24000000 	.word	0x24000000
 8004600:	24000088 	.word	0x24000088

08004604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800460a:	4bb3      	ldr	r3, [pc, #716]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004612:	2b18      	cmp	r3, #24
 8004614:	f200 8155 	bhi.w	80048c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_RCC_GetSysClockFreq+0x1c>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004685 	.word	0x08004685
 8004624:	080048c3 	.word	0x080048c3
 8004628:	080048c3 	.word	0x080048c3
 800462c:	080048c3 	.word	0x080048c3
 8004630:	080048c3 	.word	0x080048c3
 8004634:	080048c3 	.word	0x080048c3
 8004638:	080048c3 	.word	0x080048c3
 800463c:	080048c3 	.word	0x080048c3
 8004640:	080046ab 	.word	0x080046ab
 8004644:	080048c3 	.word	0x080048c3
 8004648:	080048c3 	.word	0x080048c3
 800464c:	080048c3 	.word	0x080048c3
 8004650:	080048c3 	.word	0x080048c3
 8004654:	080048c3 	.word	0x080048c3
 8004658:	080048c3 	.word	0x080048c3
 800465c:	080048c3 	.word	0x080048c3
 8004660:	080046b1 	.word	0x080046b1
 8004664:	080048c3 	.word	0x080048c3
 8004668:	080048c3 	.word	0x080048c3
 800466c:	080048c3 	.word	0x080048c3
 8004670:	080048c3 	.word	0x080048c3
 8004674:	080048c3 	.word	0x080048c3
 8004678:	080048c3 	.word	0x080048c3
 800467c:	080048c3 	.word	0x080048c3
 8004680:	080046b7 	.word	0x080046b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004684:	4b94      	ldr	r3, [pc, #592]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004690:	4b91      	ldr	r3, [pc, #580]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	08db      	lsrs	r3, r3, #3
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	4a90      	ldr	r2, [pc, #576]	; (80048dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
 80046a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80046a2:	e111      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046a4:	4b8d      	ldr	r3, [pc, #564]	; (80048dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046a6:	61bb      	str	r3, [r7, #24]
    break;
 80046a8:	e10e      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80046aa:	4b8d      	ldr	r3, [pc, #564]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046ac:	61bb      	str	r3, [r7, #24]
    break;
 80046ae:	e10b      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80046b0:	4b8c      	ldr	r3, [pc, #560]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046b2:	61bb      	str	r3, [r7, #24]
    break;
 80046b4:	e108      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046b6:	4b88      	ldr	r3, [pc, #544]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80046c0:	4b85      	ldr	r3, [pc, #532]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046cc:	4b82      	ldr	r3, [pc, #520]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80046d6:	4b80      	ldr	r3, [pc, #512]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046da:	08db      	lsrs	r3, r3, #3
 80046dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80e1 	beq.w	80048bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f000 8083 	beq.w	8004808 <HAL_RCC_GetSysClockFreq+0x204>
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b02      	cmp	r3, #2
 8004706:	f200 80a1 	bhi.w	800484c <HAL_RCC_GetSysClockFreq+0x248>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_RCC_GetSysClockFreq+0x114>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d056      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004716:	e099      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004718:	4b6f      	ldr	r3, [pc, #444]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02d      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004724:	4b6c      	ldr	r3, [pc, #432]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	4a6b      	ldr	r2, [pc, #428]	; (80048dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
 8004734:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b62      	ldr	r3, [pc, #392]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004762:	eddf 5a61 	vldr	s11, [pc, #388]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800477e:	e087      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80048ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800478e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004792:	4b51      	ldr	r3, [pc, #324]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047c2:	e065      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80048f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d6:	4b40      	ldr	r3, [pc, #256]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004806:	e043      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	eddf 6a38 	vldr	s13, [pc, #224]	; 80048f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481a:	4b2f      	ldr	r3, [pc, #188]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482a:	ed97 6a02 	vldr	s12, [r7, #8]
 800482e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800484a:	e021      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eddf 6a26 	vldr	s13, [pc, #152]	; 80048f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004872:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004890:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	0a5b      	lsrs	r3, r3, #9
 8004896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489a:	3301      	adds	r3, #1
 800489c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	ee07 3a90 	vmov	s15, r3
 80048a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b4:	ee17 3a90 	vmov	r3, s15
 80048b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80048ba:	e005      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	61bb      	str	r3, [r7, #24]
    break;
 80048c0:	e002      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048c4:	61bb      	str	r3, [r7, #24]
    break;
 80048c6:	bf00      	nop
  }

  return sysclockfreq;
 80048c8:	69bb      	ldr	r3, [r7, #24]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3724      	adds	r7, #36	; 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	58024400 	.word	0x58024400
 80048dc:	03d09000 	.word	0x03d09000
 80048e0:	003d0900 	.word	0x003d0900
 80048e4:	017d7840 	.word	0x017d7840
 80048e8:	46000000 	.word	0x46000000
 80048ec:	4c742400 	.word	0x4c742400
 80048f0:	4a742400 	.word	0x4a742400
 80048f4:	4bbebc20 	.word	0x4bbebc20

080048f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004900:	2300      	movs	r3, #0
 8004902:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004904:	2300      	movs	r3, #0
 8004906:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d03f      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004918:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800491c:	d02a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800491e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004922:	d824      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004928:	d018      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800492a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800492e:	d81e      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004938:	d007      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800493a:	e018      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493c:	4ba3      	ldr	r3, [pc, #652]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	4aa2      	ldr	r2, [pc, #648]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004948:	e015      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f000 ff17 	bl	8005784 <RCCEx_PLL2_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800495a:	e00c      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3324      	adds	r3, #36	; 0x24
 8004960:	2102      	movs	r1, #2
 8004962:	4618      	mov	r0, r3
 8004964:	f000 ffc0 	bl	80058e8 <RCCEx_PLL3_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800496c:	e003      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
      break;
 8004972:	e000      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004976:	7dfb      	ldrb	r3, [r7, #23]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d109      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800497c:	4b93      	ldr	r3, [pc, #588]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004988:	4990      	ldr	r1, [pc, #576]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	650b      	str	r3, [r1, #80]	; 0x50
 800498e:	e001      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d03d      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d826      	bhi.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049c5 	.word	0x080049c5
 80049b4:	080049d3 	.word	0x080049d3
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	080049fd 	.word	0x080049fd
 80049c0:	080049fd 	.word	0x080049fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c4:	4b81      	ldr	r3, [pc, #516]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	4a80      	ldr	r2, [pc, #512]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049d0:	e015      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fed3 	bl	8005784 <RCCEx_PLL2_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049e2:	e00c      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3324      	adds	r3, #36	; 0x24
 80049e8:	2100      	movs	r1, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 ff7c 	bl	80058e8 <RCCEx_PLL3_Config>
 80049f0:	4603      	mov	r3, r0
 80049f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049f4:	e003      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	75fb      	strb	r3, [r7, #23]
      break;
 80049fa:	e000      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80049fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a04:	4b71      	ldr	r3, [pc, #452]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a08:	f023 0207 	bic.w	r2, r3, #7
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	496e      	ldr	r1, [pc, #440]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	650b      	str	r3, [r1, #80]	; 0x50
 8004a16:	e001      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d042      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a30:	d02b      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a36:	d825      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a38:	2bc0      	cmp	r3, #192	; 0xc0
 8004a3a:	d028      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a3c:	2bc0      	cmp	r3, #192	; 0xc0
 8004a3e:	d821      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	d016      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004a44:	2b80      	cmp	r3, #128	; 0x80
 8004a46:	d81d      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d007      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004a50:	e018      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a52:	4b5e      	ldr	r3, [pc, #376]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	4a5d      	ldr	r2, [pc, #372]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a5e:	e017      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	2100      	movs	r1, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fe8c 	bl	8005784 <RCCEx_PLL2_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a70:	e00e      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3324      	adds	r3, #36	; 0x24
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 ff35 	bl	80058e8 <RCCEx_PLL3_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a82:	e005      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
      break;
 8004a88:	e002      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a96:	4b4d      	ldr	r3, [pc, #308]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa2:	494a      	ldr	r1, [pc, #296]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	650b      	str	r3, [r1, #80]	; 0x50
 8004aa8:	e001      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d049      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ac0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ac4:	d030      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aca:	d82a      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004acc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ad0:	d02c      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004ad2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ad6:	d824      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004adc:	d018      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae2:	d81e      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aec:	d007      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004aee:	e018      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af0:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	4a35      	ldr	r2, [pc, #212]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004afc:	e017      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fe3d 	bl	8005784 <RCCEx_PLL2_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b0e:	e00e      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3324      	adds	r3, #36	; 0x24
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fee6 	bl	80058e8 <RCCEx_PLL3_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b20:	e005      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	75fb      	strb	r3, [r7, #23]
      break;
 8004b26:	e002      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b28:	bf00      	nop
 8004b2a:	e000      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b2e:	7dfb      	ldrb	r3, [r7, #23]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b34:	4b25      	ldr	r3, [pc, #148]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b42:	4922      	ldr	r1, [pc, #136]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	658b      	str	r3, [r1, #88]	; 0x58
 8004b48:	e001      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
 8004b4c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d04b      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b64:	d030      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b6a:	d82a      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b70:	d02e      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004b72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b76:	d824      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b7c:	d018      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b82:	d81e      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b8c:	d007      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004b8e:	e018      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b90:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4a0d      	ldr	r2, [pc, #52]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b9c:	e019      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fded 	bl	8005784 <RCCEx_PLL2_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004bae:	e010      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3324      	adds	r3, #36	; 0x24
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fe96 	bl	80058e8 <RCCEx_PLL3_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bc0:	e007      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc6:	e004      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004bc8:	bf00      	nop
 8004bca:	e002      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004bcc:	58024400 	.word	0x58024400
      break;
 8004bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bd8:	4b99      	ldr	r3, [pc, #612]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004be6:	4996      	ldr	r1, [pc, #600]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	658b      	str	r3, [r1, #88]	; 0x58
 8004bec:	e001      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d032      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c02:	2b30      	cmp	r3, #48	; 0x30
 8004c04:	d01c      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004c06:	2b30      	cmp	r3, #48	; 0x30
 8004c08:	d817      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d00c      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d813      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d10f      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c1a:	4b89      	ldr	r3, [pc, #548]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	4a88      	ldr	r2, [pc, #544]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c26:	e00e      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fda8 	bl	8005784 <RCCEx_PLL2_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c38:	e005      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c4c:	4b7c      	ldr	r3, [pc, #496]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	4979      	ldr	r1, [pc, #484]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c5e:	e001      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d047      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c78:	d030      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c7e:	d82a      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c84:	d02c      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c8a:	d824      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c90:	d018      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c96:	d81e      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca0:	d007      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004ca2:	e018      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca4:	4b66      	ldr	r3, [pc, #408]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	4a65      	ldr	r2, [pc, #404]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cb0:	e017      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fd63 	bl	8005784 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cc2:	e00e      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3324      	adds	r3, #36	; 0x24
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fe0c 	bl	80058e8 <RCCEx_PLL3_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cd4:	e005      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cda:	e002      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004cdc:	bf00      	nop
 8004cde:	e000      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ce8:	4b55      	ldr	r3, [pc, #340]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf4:	4952      	ldr	r1, [pc, #328]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	650b      	str	r3, [r1, #80]	; 0x50
 8004cfa:	e001      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
 8004cfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d049      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d14:	d02e      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d1a:	d828      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d20:	d02a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d26:	d822      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d2c:	d026      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004d2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d32:	d81c      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d38:	d010      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d3e:	d816      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01d      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d111      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	2101      	movs	r1, #1
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fd17 	bl	8005784 <RCCEx_PLL2_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d5a:	e012      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3324      	adds	r3, #36	; 0x24
 8004d60:	2101      	movs	r1, #1
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fdc0 	bl	80058e8 <RCCEx_PLL3_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d6c:	e009      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
      break;
 8004d72:	e006      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d74:	bf00      	nop
 8004d76:	e004      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d78:	bf00      	nop
 8004d7a:	e002      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d88:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d94:	492a      	ldr	r1, [pc, #168]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	650b      	str	r3, [r1, #80]	; 0x50
 8004d9a:	e001      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d04d      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004db6:	d02e      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dbc:	d828      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc2:	d02a      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc8:	d822      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004dca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dce:	d026      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004dd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dd4:	d81c      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dda:	d010      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de0:	d816      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01d      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dea:	d111      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	2101      	movs	r1, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fcc6 	bl	8005784 <RCCEx_PLL2_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004dfc:	e012      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3324      	adds	r3, #36	; 0x24
 8004e02:	2101      	movs	r1, #1
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fd6f 	bl	80058e8 <RCCEx_PLL3_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e0e:	e009      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	75fb      	strb	r3, [r7, #23]
      break;
 8004e14:	e006      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e16:	bf00      	nop
 8004e18:	e004      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e002      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e38:	4901      	ldr	r1, [pc, #4]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	658b      	str	r3, [r1, #88]	; 0x58
 8004e3e:	e003      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d02f      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e5c:	d00e      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e62:	d814      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d015      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e6c:	d10f      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e6e:	4baf      	ldr	r3, [pc, #700]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	4aae      	ldr	r2, [pc, #696]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e7a:	e00c      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	2101      	movs	r1, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fc7e 	bl	8005784 <RCCEx_PLL2_Config>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e8c:	e003      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	75fb      	strb	r3, [r7, #23]
      break;
 8004e92:	e000      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e9c:	4ba3      	ldr	r3, [pc, #652]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea8:	49a0      	ldr	r1, [pc, #640]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	650b      	str	r3, [r1, #80]	; 0x50
 8004eae:	e001      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d032      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d81b      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004ec8:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ece:	bf00      	nop
 8004ed0:	08004f07 	.word	0x08004f07
 8004ed4:	08004ee1 	.word	0x08004ee1
 8004ed8:	08004eef 	.word	0x08004eef
 8004edc:	08004f07 	.word	0x08004f07
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee0:	4b92      	ldr	r3, [pc, #584]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	4a91      	ldr	r2, [pc, #580]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004eec:	e00c      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fc45 	bl	8005784 <RCCEx_PLL2_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004efe:	e003      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	75fb      	strb	r3, [r7, #23]
      break;
 8004f04:	e000      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d109      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f0e:	4b87      	ldr	r3, [pc, #540]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	f023 0203 	bic.w	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	4984      	ldr	r1, [pc, #528]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f20:	e001      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8086 	beq.w	8005040 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f34:	4b7e      	ldr	r3, [pc, #504]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a7d      	ldr	r2, [pc, #500]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f40:	f7fc fc0a 	bl	8001758 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f46:	e009      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f48:	f7fc fc06 	bl	8001758 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d902      	bls.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	75fb      	strb	r3, [r7, #23]
        break;
 8004f5a:	e005      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f5c:	4b74      	ldr	r3, [pc, #464]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0ef      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d166      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f6e:	4b6f      	ldr	r3, [pc, #444]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f78:	4053      	eors	r3, r2
 8004f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d013      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f82:	4b6a      	ldr	r3, [pc, #424]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f8c:	4b67      	ldr	r3, [pc, #412]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	4a66      	ldr	r2, [pc, #408]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f98:	4b64      	ldr	r3, [pc, #400]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a63      	ldr	r2, [pc, #396]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fa4:	4a61      	ldr	r2, [pc, #388]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb4:	d115      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb6:	f7fc fbcf 	bl	8001758 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fbc:	e00b      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fbe:	f7fc fbcb 	bl	8001758 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d902      	bls.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	75fb      	strb	r3, [r7, #23]
            break;
 8004fd4:	e005      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fd6:	4b55      	ldr	r3, [pc, #340]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ed      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004fe2:	7dfb      	ldrb	r3, [r7, #23]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d126      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ff6:	d10d      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004ff8:	4b4c      	ldr	r3, [pc, #304]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005006:	0919      	lsrs	r1, r3, #4
 8005008:	4b4a      	ldr	r3, [pc, #296]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800500a:	400b      	ands	r3, r1
 800500c:	4947      	ldr	r1, [pc, #284]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800500e:	4313      	orrs	r3, r2
 8005010:	610b      	str	r3, [r1, #16]
 8005012:	e005      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005014:	4b45      	ldr	r3, [pc, #276]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	4a44      	ldr	r2, [pc, #272]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800501a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800501e:	6113      	str	r3, [r2, #16]
 8005020:	4b42      	ldr	r3, [pc, #264]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800502a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502e:	493f      	ldr	r1, [pc, #252]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005030:	4313      	orrs	r3, r2
 8005032:	670b      	str	r3, [r1, #112]	; 0x70
 8005034:	e004      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005036:	7dfb      	ldrb	r3, [r7, #23]
 8005038:	75bb      	strb	r3, [r7, #22]
 800503a:	e001      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503c:	7dfb      	ldrb	r3, [r7, #23]
 800503e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8085 	beq.w	8005158 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005052:	2b28      	cmp	r3, #40	; 0x28
 8005054:	d866      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	08005139 	.word	0x08005139
 8005060:	08005125 	.word	0x08005125
 8005064:	08005125 	.word	0x08005125
 8005068:	08005125 	.word	0x08005125
 800506c:	08005125 	.word	0x08005125
 8005070:	08005125 	.word	0x08005125
 8005074:	08005125 	.word	0x08005125
 8005078:	08005125 	.word	0x08005125
 800507c:	08005101 	.word	0x08005101
 8005080:	08005125 	.word	0x08005125
 8005084:	08005125 	.word	0x08005125
 8005088:	08005125 	.word	0x08005125
 800508c:	08005125 	.word	0x08005125
 8005090:	08005125 	.word	0x08005125
 8005094:	08005125 	.word	0x08005125
 8005098:	08005125 	.word	0x08005125
 800509c:	08005113 	.word	0x08005113
 80050a0:	08005125 	.word	0x08005125
 80050a4:	08005125 	.word	0x08005125
 80050a8:	08005125 	.word	0x08005125
 80050ac:	08005125 	.word	0x08005125
 80050b0:	08005125 	.word	0x08005125
 80050b4:	08005125 	.word	0x08005125
 80050b8:	08005125 	.word	0x08005125
 80050bc:	08005139 	.word	0x08005139
 80050c0:	08005125 	.word	0x08005125
 80050c4:	08005125 	.word	0x08005125
 80050c8:	08005125 	.word	0x08005125
 80050cc:	08005125 	.word	0x08005125
 80050d0:	08005125 	.word	0x08005125
 80050d4:	08005125 	.word	0x08005125
 80050d8:	08005125 	.word	0x08005125
 80050dc:	08005139 	.word	0x08005139
 80050e0:	08005125 	.word	0x08005125
 80050e4:	08005125 	.word	0x08005125
 80050e8:	08005125 	.word	0x08005125
 80050ec:	08005125 	.word	0x08005125
 80050f0:	08005125 	.word	0x08005125
 80050f4:	08005125 	.word	0x08005125
 80050f8:	08005125 	.word	0x08005125
 80050fc:	08005139 	.word	0x08005139
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3304      	adds	r3, #4
 8005104:	2101      	movs	r1, #1
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fb3c 	bl	8005784 <RCCEx_PLL2_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005110:	e013      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3324      	adds	r3, #36	; 0x24
 8005116:	2101      	movs	r1, #1
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fbe5 	bl	80058e8 <RCCEx_PLL3_Config>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005122:	e00a      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	75fb      	strb	r3, [r7, #23]
      break;
 8005128:	e007      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800512a:	bf00      	nop
 800512c:	58024400 	.word	0x58024400
 8005130:	58024800 	.word	0x58024800
 8005134:	00ffffcf 	.word	0x00ffffcf
      break;
 8005138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005140:	4b96      	ldr	r3, [pc, #600]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800514c:	4993      	ldr	r1, [pc, #588]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800514e:	4313      	orrs	r3, r2
 8005150:	654b      	str	r3, [r1, #84]	; 0x54
 8005152:	e001      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d038      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005168:	2b05      	cmp	r3, #5
 800516a:	d821      	bhi.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800516c:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	080051b7 	.word	0x080051b7
 8005178:	0800518d 	.word	0x0800518d
 800517c:	0800519f 	.word	0x0800519f
 8005180:	080051b7 	.word	0x080051b7
 8005184:	080051b7 	.word	0x080051b7
 8005188:	080051b7 	.word	0x080051b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	2101      	movs	r1, #1
 8005192:	4618      	mov	r0, r3
 8005194:	f000 faf6 	bl	8005784 <RCCEx_PLL2_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800519c:	e00c      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3324      	adds	r3, #36	; 0x24
 80051a2:	2101      	movs	r1, #1
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fb9f 	bl	80058e8 <RCCEx_PLL3_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051ae:	e003      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	75fb      	strb	r3, [r7, #23]
      break;
 80051b4:	e000      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80051b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051be:	4b77      	ldr	r3, [pc, #476]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f023 0207 	bic.w	r2, r3, #7
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ca:	4974      	ldr	r1, [pc, #464]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	654b      	str	r3, [r1, #84]	; 0x54
 80051d0:	e001      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d03a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d821      	bhi.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005237 	.word	0x08005237
 80051f8:	0800520d 	.word	0x0800520d
 80051fc:	0800521f 	.word	0x0800521f
 8005200:	08005237 	.word	0x08005237
 8005204:	08005237 	.word	0x08005237
 8005208:	08005237 	.word	0x08005237
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	2101      	movs	r1, #1
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fab6 	bl	8005784 <RCCEx_PLL2_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800521c:	e00c      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3324      	adds	r3, #36	; 0x24
 8005222:	2101      	movs	r1, #1
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fb5f 	bl	80058e8 <RCCEx_PLL3_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800522e:	e003      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	75fb      	strb	r3, [r7, #23]
      break;
 8005234:	e000      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005238:	7dfb      	ldrb	r3, [r7, #23]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800523e:	4b57      	ldr	r3, [pc, #348]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005242:	f023 0207 	bic.w	r2, r3, #7
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524c:	4953      	ldr	r1, [pc, #332]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800524e:	4313      	orrs	r3, r2
 8005250:	658b      	str	r3, [r1, #88]	; 0x58
 8005252:	e001      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005254:	7dfb      	ldrb	r3, [r7, #23]
 8005256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d04b      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800526e:	d02e      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005274:	d828      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527a:	d02a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005280:	d822      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005282:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005286:	d026      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005288:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800528c:	d81c      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800528e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005292:	d010      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005298:	d816      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01d      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800529e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052a2:	d111      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fa6a 	bl	8005784 <RCCEx_PLL2_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052b4:	e012      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3324      	adds	r3, #36	; 0x24
 80052ba:	2102      	movs	r1, #2
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fb13 	bl	80058e8 <RCCEx_PLL3_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052c6:	e009      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75fb      	strb	r3, [r7, #23]
      break;
 80052cc:	e006      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80052ce:	bf00      	nop
 80052d0:	e004      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80052d2:	bf00      	nop
 80052d4:	e002      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80052d6:	bf00      	nop
 80052d8:	e000      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80052da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052e2:	4b2e      	ldr	r3, [pc, #184]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f0:	492a      	ldr	r1, [pc, #168]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	654b      	str	r3, [r1, #84]	; 0x54
 80052f6:	e001      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d04d      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800530e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005312:	d02e      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005314:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005318:	d828      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531e:	d02a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005324:	d822      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005326:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800532a:	d026      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800532c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005330:	d81c      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005336:	d010      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533c:	d816      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01d      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005346:	d111      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fa18 	bl	8005784 <RCCEx_PLL2_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005358:	e012      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3324      	adds	r3, #36	; 0x24
 800535e:	2102      	movs	r1, #2
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fac1 	bl	80058e8 <RCCEx_PLL3_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800536a:	e009      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	75fb      	strb	r3, [r7, #23]
      break;
 8005370:	e006      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005372:	bf00      	nop
 8005374:	e004      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005376:	bf00      	nop
 8005378:	e002      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800537e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10c      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005394:	4901      	ldr	r1, [pc, #4]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005396:	4313      	orrs	r3, r2
 8005398:	658b      	str	r3, [r1, #88]	; 0x58
 800539a:	e003      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800539c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d04b      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053ba:	d02e      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80053bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053c0:	d828      	bhi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80053c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c6:	d02a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80053c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053cc:	d822      	bhi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80053ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053d2:	d026      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80053d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053d8:	d81c      	bhi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80053da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053de:	d010      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80053e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053e4:	d816      	bhi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01d      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ee:	d111      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3304      	adds	r3, #4
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f9c4 	bl	8005784 <RCCEx_PLL2_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005400:	e012      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3324      	adds	r3, #36	; 0x24
 8005406:	2102      	movs	r1, #2
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fa6d 	bl	80058e8 <RCCEx_PLL3_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005412:	e009      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
      break;
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800541a:	bf00      	nop
 800541c:	e004      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800541e:	bf00      	nop
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800542e:	4b9d      	ldr	r3, [pc, #628]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800543c:	4999      	ldr	r1, [pc, #612]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800543e:	4313      	orrs	r3, r2
 8005440:	658b      	str	r3, [r1, #88]	; 0x58
 8005442:	e001      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545e:	d10a      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3324      	adds	r3, #36	; 0x24
 8005464:	2102      	movs	r1, #2
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fa3e 	bl	80058e8 <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005476:	4b8b      	ldr	r3, [pc, #556]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005484:	4987      	ldr	r1, [pc, #540]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005486:	4313      	orrs	r3, r2
 8005488:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01a      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800549c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a0:	d10a      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3324      	adds	r3, #36	; 0x24
 80054a6:	2102      	movs	r1, #2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fa1d 	bl	80058e8 <RCCEx_PLL3_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054b8:	4b7a      	ldr	r3, [pc, #488]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c6:	4977      	ldr	r1, [pc, #476]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d034      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054e2:	d01d      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80054e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054e8:	d817      	bhi.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80054ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f2:	d009      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80054f4:	e011      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3304      	adds	r3, #4
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 f941 	bl	8005784 <RCCEx_PLL2_Config>
 8005502:	4603      	mov	r3, r0
 8005504:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005506:	e00c      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3324      	adds	r3, #36	; 0x24
 800550c:	2102      	movs	r1, #2
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f9ea 	bl	80058e8 <RCCEx_PLL3_Config>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
      break;
 800551e:	e000      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005522:	7dfb      	ldrb	r3, [r7, #23]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005528:	4b5e      	ldr	r3, [pc, #376]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005536:	495b      	ldr	r1, [pc, #364]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005538:	4313      	orrs	r3, r2
 800553a:	658b      	str	r3, [r1, #88]	; 0x58
 800553c:	e001      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d033      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005558:	d01c      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800555a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800555e:	d816      	bhi.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005564:	d003      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800556a:	d007      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800556c:	e00f      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556e:	4b4d      	ldr	r3, [pc, #308]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	4a4c      	ldr	r2, [pc, #304]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005578:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800557a:	e00c      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3324      	adds	r3, #36	; 0x24
 8005580:	2101      	movs	r1, #1
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f9b0 	bl	80058e8 <RCCEx_PLL3_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800558c:	e003      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	75fb      	strb	r3, [r7, #23]
      break;
 8005592:	e000      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800559c:	4b41      	ldr	r3, [pc, #260]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055aa:	493e      	ldr	r1, [pc, #248]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	654b      	str	r3, [r1, #84]	; 0x54
 80055b0:	e001      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d029      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80055ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ce:	d007      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80055d0:	e00f      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d2:	4b34      	ldr	r3, [pc, #208]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	4a33      	ldr	r2, [pc, #204]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055de:	e00b      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3304      	adds	r3, #4
 80055e4:	2102      	movs	r1, #2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f8cc 	bl	8005784 <RCCEx_PLL2_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055f0:	e002      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	75fb      	strb	r3, [r7, #23]
      break;
 80055f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055f8:	7dfb      	ldrb	r3, [r7, #23]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80055fe:	4b29      	ldr	r3, [pc, #164]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	4926      	ldr	r1, [pc, #152]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800560c:	4313      	orrs	r3, r2
 800560e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005610:	e001      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005612:	7dfb      	ldrb	r3, [r7, #23]
 8005614:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3324      	adds	r3, #36	; 0x24
 8005626:	2102      	movs	r1, #2
 8005628:	4618      	mov	r0, r3
 800562a:	f000 f95d 	bl	80058e8 <RCCEx_PLL3_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d033      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800564c:	d017      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800564e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005652:	d811      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005658:	d013      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800565a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800565e:	d80b      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005660:	2b00      	cmp	r3, #0
 8005662:	d010      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005668:	d106      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566a:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	4a0d      	ldr	r2, [pc, #52]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005676:	e007      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
      break;
 800567c:	e004      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800567e:	bf00      	nop
 8005680:	e002      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005688:	7dfb      	ldrb	r3, [r7, #23]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10c      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800569a:	4902      	ldr	r1, [pc, #8]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800569c:	4313      	orrs	r3, r2
 800569e:	654b      	str	r3, [r1, #84]	; 0x54
 80056a0:	e004      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80056a2:	bf00      	nop
 80056a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056b8:	4b31      	ldr	r3, [pc, #196]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	492e      	ldr	r1, [pc, #184]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056d6:	4b2a      	ldr	r3, [pc, #168]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056e4:	4926      	ldr	r1, [pc, #152]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056f6:	4b22      	ldr	r3, [pc, #136]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005702:	491f      	ldr	r1, [pc, #124]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005704:	4313      	orrs	r3, r2
 8005706:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00d      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	4a19      	ldr	r2, [pc, #100]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800571a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800571e:	6113      	str	r3, [r2, #16]
 8005720:	4b17      	ldr	r3, [pc, #92]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800572a:	4915      	ldr	r1, [pc, #84]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800572c:	4313      	orrs	r3, r2
 800572e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	da08      	bge.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005738:	4b11      	ldr	r3, [pc, #68]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005744:	490e      	ldr	r1, [pc, #56]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005746:	4313      	orrs	r3, r2
 8005748:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005764:	4906      	ldr	r1, [pc, #24]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005766:	4313      	orrs	r3, r2
 8005768:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800576a:	7dbb      	ldrb	r3, [r7, #22]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e000      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	58024400 	.word	0x58024400

08005784 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005792:	4b53      	ldr	r3, [pc, #332]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b03      	cmp	r3, #3
 800579c:	d101      	bne.n	80057a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e099      	b.n	80058d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80057a2:	4b4f      	ldr	r3, [pc, #316]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a4e      	ldr	r2, [pc, #312]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 80057a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ae:	f7fb ffd3 	bl	8001758 <HAL_GetTick>
 80057b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057b4:	e008      	b.n	80057c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80057b6:	f7fb ffcf 	bl	8001758 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d901      	bls.n	80057c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e086      	b.n	80058d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057c8:	4b45      	ldr	r3, [pc, #276]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f0      	bne.n	80057b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80057d4:	4b42      	ldr	r3, [pc, #264]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	031b      	lsls	r3, r3, #12
 80057e2:	493f      	ldr	r1, [pc, #252]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	628b      	str	r3, [r1, #40]	; 0x28
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	025b      	lsls	r3, r3, #9
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	3b01      	subs	r3, #1
 8005804:	041b      	lsls	r3, r3, #16
 8005806:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	3b01      	subs	r3, #1
 8005812:	061b      	lsls	r3, r3, #24
 8005814:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005818:	4931      	ldr	r1, [pc, #196]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 800581a:	4313      	orrs	r3, r2
 800581c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800581e:	4b30      	ldr	r3, [pc, #192]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	492d      	ldr	r1, [pc, #180]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 800582c:	4313      	orrs	r3, r2
 800582e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005830:	4b2b      	ldr	r3, [pc, #172]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	f023 0220 	bic.w	r2, r3, #32
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	4928      	ldr	r1, [pc, #160]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005842:	4b27      	ldr	r3, [pc, #156]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	4a26      	ldr	r2, [pc, #152]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 8005848:	f023 0310 	bic.w	r3, r3, #16
 800584c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800584e:	4b24      	ldr	r3, [pc, #144]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 8005850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005852:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <RCCEx_PLL2_Config+0x160>)
 8005854:	4013      	ands	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	69d2      	ldr	r2, [r2, #28]
 800585a:	00d2      	lsls	r2, r2, #3
 800585c:	4920      	ldr	r1, [pc, #128]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 800585e:	4313      	orrs	r3, r2
 8005860:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005862:	4b1f      	ldr	r3, [pc, #124]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	4a1e      	ldr	r2, [pc, #120]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 8005868:	f043 0310 	orr.w	r3, r3, #16
 800586c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005874:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 800587a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800587e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005880:	e00f      	b.n	80058a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d106      	bne.n	8005896 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005888:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	4a14      	ldr	r2, [pc, #80]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 800588e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005892:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005894:	e005      	b.n	80058a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005896:	4b12      	ldr	r3, [pc, #72]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 800589c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80058a2:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a0e      	ldr	r2, [pc, #56]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 80058a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ae:	f7fb ff53 	bl	8001758 <HAL_GetTick>
 80058b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058b4:	e008      	b.n	80058c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80058b6:	f7fb ff4f 	bl	8001758 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e006      	b.n	80058d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <RCCEx_PLL2_Config+0x15c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0f0      	beq.n	80058b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	58024400 	.word	0x58024400
 80058e4:	ffff0007 	.word	0xffff0007

080058e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058f6:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d101      	bne.n	8005906 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e099      	b.n	8005a3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005906:	4b4f      	ldr	r3, [pc, #316]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a4e      	ldr	r2, [pc, #312]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 800590c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005912:	f7fb ff21 	bl	8001758 <HAL_GetTick>
 8005916:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005918:	e008      	b.n	800592c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800591a:	f7fb ff1d 	bl	8001758 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e086      	b.n	8005a3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800592c:	4b45      	ldr	r3, [pc, #276]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f0      	bne.n	800591a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005938:	4b42      	ldr	r3, [pc, #264]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	051b      	lsls	r3, r3, #20
 8005946:	493f      	ldr	r1, [pc, #252]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 8005948:	4313      	orrs	r3, r2
 800594a:	628b      	str	r3, [r1, #40]	; 0x28
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	3b01      	subs	r3, #1
 8005952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	3b01      	subs	r3, #1
 800595c:	025b      	lsls	r3, r3, #9
 800595e:	b29b      	uxth	r3, r3
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	3b01      	subs	r3, #1
 8005968:	041b      	lsls	r3, r3, #16
 800596a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	3b01      	subs	r3, #1
 8005976:	061b      	lsls	r3, r3, #24
 8005978:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800597c:	4931      	ldr	r1, [pc, #196]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 800597e:	4313      	orrs	r3, r2
 8005980:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005982:	4b30      	ldr	r3, [pc, #192]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	492d      	ldr	r1, [pc, #180]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 8005990:	4313      	orrs	r3, r2
 8005992:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005994:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	4928      	ldr	r1, [pc, #160]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80059a6:	4b27      	ldr	r3, [pc, #156]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	4a26      	ldr	r2, [pc, #152]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80059b2:	4b24      	ldr	r3, [pc, #144]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059b6:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <RCCEx_PLL3_Config+0x160>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	69d2      	ldr	r2, [r2, #28]
 80059be:	00d2      	lsls	r2, r2, #3
 80059c0:	4920      	ldr	r1, [pc, #128]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80059c6:	4b1f      	ldr	r3, [pc, #124]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80059d8:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059e4:	e00f      	b.n	8005a06 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d106      	bne.n	80059fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80059ec:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	4a14      	ldr	r2, [pc, #80]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059f8:	e005      	b.n	8005a06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 8005a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a0e      	ldr	r2, [pc, #56]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 8005a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a12:	f7fb fea1 	bl	8001758 <HAL_GetTick>
 8005a16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a18:	e008      	b.n	8005a2c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a1a:	f7fb fe9d 	bl	8001758 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e006      	b.n	8005a3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <RCCEx_PLL3_Config+0x15c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	58024400 	.word	0x58024400
 8005a48:	ffff0007 	.word	0xffff0007

08005a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e049      	b.n	8005af2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fb fd1c 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f000 faee 	bl	800606c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d001      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e054      	b.n	8005bbe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a26      	ldr	r2, [pc, #152]	; (8005bcc <HAL_TIM_Base_Start_IT+0xd0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d022      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3e:	d01d      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a22      	ldr	r2, [pc, #136]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d018      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a21      	ldr	r2, [pc, #132]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d013      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1f      	ldr	r2, [pc, #124]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00e      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1e      	ldr	r2, [pc, #120]	; (8005bdc <HAL_TIM_Base_Start_IT+0xe0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d009      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d115      	bne.n	8005ba8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <HAL_TIM_Base_Start_IT+0xec>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b06      	cmp	r3, #6
 8005b8c:	d015      	beq.n	8005bba <HAL_TIM_Base_Start_IT+0xbe>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b94:	d011      	beq.n	8005bba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0201 	orr.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba6:	e008      	b.n	8005bba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	e000      	b.n	8005bbc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40010400 	.word	0x40010400
 8005be0:	40001800 	.word	0x40001800
 8005be4:	40014000 	.word	0x40014000
 8005be8:	00010007 	.word	0x00010007

08005bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0202 	mvn.w	r2, #2
 8005c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f9fe 	bl	8006030 <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f9f0 	bl	800601c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fa01 	bl	8006044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0204 	mvn.w	r2, #4
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f9d4 	bl	8006030 <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9c6 	bl	800601c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f9d7 	bl	8006044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0208 	mvn.w	r2, #8
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2204      	movs	r2, #4
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f9aa 	bl	8006030 <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f99c 	bl	800601c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f9ad 	bl	8006044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0310 	and.w	r3, r3, #16
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b10      	cmp	r3, #16
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0210 	mvn.w	r2, #16
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f980 	bl	8006030 <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f972 	bl	800601c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f983 	bl	8006044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d10e      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0201 	mvn.w	r2, #1
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fb f968 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d10e      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b80      	cmp	r3, #128	; 0x80
 8005d8a:	d107      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fb38 	bl	800640c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005daa:	d10e      	bne.n	8005dca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db6:	2b80      	cmp	r3, #128	; 0x80
 8005db8:	d107      	bne.n	8005dca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fb2b 	bl	8006420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d10e      	bne.n	8005df6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d107      	bne.n	8005df6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f931 	bl	8006058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d10e      	bne.n	8005e22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d107      	bne.n	8005e22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f06f 0220 	mvn.w	r2, #32
 8005e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 faeb 	bl	80063f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIM_ConfigClockSource+0x1c>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e0dc      	b.n	8006002 <HAL_TIM_ConfigClockSource+0x1d6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	4b6a      	ldr	r3, [pc, #424]	; (800600c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a64      	ldr	r2, [pc, #400]	; (8006010 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	f000 80a9 	beq.w	8005fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e84:	4a62      	ldr	r2, [pc, #392]	; (8006010 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	f200 80ae 	bhi.w	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e8c:	4a61      	ldr	r2, [pc, #388]	; (8006014 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	f000 80a1 	beq.w	8005fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e94:	4a5f      	ldr	r2, [pc, #380]	; (8006014 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	f200 80a6 	bhi.w	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e9c:	4a5e      	ldr	r2, [pc, #376]	; (8006018 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	f000 8099 	beq.w	8005fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ea4:	4a5c      	ldr	r2, [pc, #368]	; (8006018 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	f200 809e 	bhi.w	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005eac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005eb0:	f000 8091 	beq.w	8005fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005eb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005eb8:	f200 8096 	bhi.w	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec0:	f000 8089 	beq.w	8005fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec8:	f200 808e 	bhi.w	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed0:	d03e      	beq.n	8005f50 <HAL_TIM_ConfigClockSource+0x124>
 8005ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed6:	f200 8087 	bhi.w	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ede:	f000 8086 	beq.w	8005fee <HAL_TIM_ConfigClockSource+0x1c2>
 8005ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee6:	d87f      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ee8:	2b70      	cmp	r3, #112	; 0x70
 8005eea:	d01a      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0xf6>
 8005eec:	2b70      	cmp	r3, #112	; 0x70
 8005eee:	d87b      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ef0:	2b60      	cmp	r3, #96	; 0x60
 8005ef2:	d050      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x16a>
 8005ef4:	2b60      	cmp	r3, #96	; 0x60
 8005ef6:	d877      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ef8:	2b50      	cmp	r3, #80	; 0x50
 8005efa:	d03c      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x14a>
 8005efc:	2b50      	cmp	r3, #80	; 0x50
 8005efe:	d873      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d058      	beq.n	8005fb6 <HAL_TIM_ConfigClockSource+0x18a>
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d86f      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f08:	2b30      	cmp	r3, #48	; 0x30
 8005f0a:	d064      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005f0c:	2b30      	cmp	r3, #48	; 0x30
 8005f0e:	d86b      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d060      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d867      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d05c      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d05a      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005f20:	e062      	b.n	8005fe8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6899      	ldr	r1, [r3, #8]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f000 f9b3 	bl	800629c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	609a      	str	r2, [r3, #8]
      break;
 8005f4e:	e04f      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	6899      	ldr	r1, [r3, #8]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f000 f99c 	bl	800629c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f72:	609a      	str	r2, [r3, #8]
      break;
 8005f74:	e03c      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6859      	ldr	r1, [r3, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f000 f90c 	bl	80061a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2150      	movs	r1, #80	; 0x50
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f966 	bl	8006260 <TIM_ITRx_SetConfig>
      break;
 8005f94:	e02c      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6859      	ldr	r1, [r3, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f000 f92b 	bl	80061fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2160      	movs	r1, #96	; 0x60
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 f956 	bl	8006260 <TIM_ITRx_SetConfig>
      break;
 8005fb4:	e01c      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6859      	ldr	r1, [r3, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f000 f8ec 	bl	80061a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2140      	movs	r1, #64	; 0x40
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 f946 	bl	8006260 <TIM_ITRx_SetConfig>
      break;
 8005fd4:	e00c      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	f000 f93d 	bl	8006260 <TIM_ITRx_SetConfig>
      break;
 8005fe6:	e003      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
      break;
 8005fec:	e000      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005fee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	ffceff88 	.word	0xffceff88
 8006010:	00100040 	.word	0x00100040
 8006014:	00100030 	.word	0x00100030
 8006018:	00100020 	.word	0x00100020

0800601c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a40      	ldr	r2, [pc, #256]	; (8006180 <TIM_Base_SetConfig+0x114>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608a:	d00f      	beq.n	80060ac <TIM_Base_SetConfig+0x40>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a3d      	ldr	r2, [pc, #244]	; (8006184 <TIM_Base_SetConfig+0x118>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <TIM_Base_SetConfig+0x40>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a3c      	ldr	r2, [pc, #240]	; (8006188 <TIM_Base_SetConfig+0x11c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <TIM_Base_SetConfig+0x40>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a3b      	ldr	r2, [pc, #236]	; (800618c <TIM_Base_SetConfig+0x120>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_Base_SetConfig+0x40>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a3a      	ldr	r2, [pc, #232]	; (8006190 <TIM_Base_SetConfig+0x124>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d108      	bne.n	80060be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2f      	ldr	r2, [pc, #188]	; (8006180 <TIM_Base_SetConfig+0x114>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d01f      	beq.n	8006106 <TIM_Base_SetConfig+0x9a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060cc:	d01b      	beq.n	8006106 <TIM_Base_SetConfig+0x9a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2c      	ldr	r2, [pc, #176]	; (8006184 <TIM_Base_SetConfig+0x118>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d017      	beq.n	8006106 <TIM_Base_SetConfig+0x9a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a2b      	ldr	r2, [pc, #172]	; (8006188 <TIM_Base_SetConfig+0x11c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <TIM_Base_SetConfig+0x9a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a2a      	ldr	r2, [pc, #168]	; (800618c <TIM_Base_SetConfig+0x120>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00f      	beq.n	8006106 <TIM_Base_SetConfig+0x9a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a29      	ldr	r2, [pc, #164]	; (8006190 <TIM_Base_SetConfig+0x124>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00b      	beq.n	8006106 <TIM_Base_SetConfig+0x9a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a28      	ldr	r2, [pc, #160]	; (8006194 <TIM_Base_SetConfig+0x128>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d007      	beq.n	8006106 <TIM_Base_SetConfig+0x9a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a27      	ldr	r2, [pc, #156]	; (8006198 <TIM_Base_SetConfig+0x12c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d003      	beq.n	8006106 <TIM_Base_SetConfig+0x9a>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a26      	ldr	r2, [pc, #152]	; (800619c <TIM_Base_SetConfig+0x130>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d108      	bne.n	8006118 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a10      	ldr	r2, [pc, #64]	; (8006180 <TIM_Base_SetConfig+0x114>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00f      	beq.n	8006164 <TIM_Base_SetConfig+0xf8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a12      	ldr	r2, [pc, #72]	; (8006190 <TIM_Base_SetConfig+0x124>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00b      	beq.n	8006164 <TIM_Base_SetConfig+0xf8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a11      	ldr	r2, [pc, #68]	; (8006194 <TIM_Base_SetConfig+0x128>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d007      	beq.n	8006164 <TIM_Base_SetConfig+0xf8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <TIM_Base_SetConfig+0x12c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d003      	beq.n	8006164 <TIM_Base_SetConfig+0xf8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a0f      	ldr	r2, [pc, #60]	; (800619c <TIM_Base_SetConfig+0x130>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d103      	bne.n	800616c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	615a      	str	r2, [r3, #20]
}
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40010000 	.word	0x40010000
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40000c00 	.word	0x40000c00
 8006190:	40010400 	.word	0x40010400
 8006194:	40014000 	.word	0x40014000
 8006198:	40014400 	.word	0x40014400
 800619c:	40014800 	.word	0x40014800

080061a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f023 030a 	bic.w	r3, r3, #10
 80061dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	621a      	str	r2, [r3, #32]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061fe:	b480      	push	{r7}
 8006200:	b087      	sub	sp, #28
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f023 0210 	bic.w	r2, r3, #16
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006228:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	031b      	lsls	r3, r3, #12
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800623a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4b09      	ldr	r3, [pc, #36]	; (8006298 <TIM_ITRx_SetConfig+0x38>)
 8006274:	4013      	ands	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	f043 0307 	orr.w	r3, r3, #7
 8006282:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	609a      	str	r2, [r3, #8]
}
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	ffcfff8f 	.word	0xffcfff8f

0800629c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	431a      	orrs	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	609a      	str	r2, [r3, #8]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e06d      	b.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a30      	ldr	r2, [pc, #192]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a2f      	ldr	r2, [pc, #188]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800632e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a20      	ldr	r2, [pc, #128]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d022      	beq.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006366:	d01d      	beq.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d018      	beq.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d013      	beq.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1a      	ldr	r2, [pc, #104]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00e      	beq.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d009      	beq.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d004      	beq.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a15      	ldr	r2, [pc, #84]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d10c      	bne.n	80063be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	40010000 	.word	0x40010000
 80063e0:	40010400 	.word	0x40010400
 80063e4:	40000400 	.word	0x40000400
 80063e8:	40000800 	.word	0x40000800
 80063ec:	40000c00 	.word	0x40000c00
 80063f0:	40001800 	.word	0x40001800
 80063f4:	40014000 	.word	0x40014000

080063f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <__errno>:
 8006434:	4b01      	ldr	r3, [pc, #4]	; (800643c <__errno+0x8>)
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	24000090 	.word	0x24000090

08006440 <__libc_init_array>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	4d0d      	ldr	r5, [pc, #52]	; (8006478 <__libc_init_array+0x38>)
 8006444:	4c0d      	ldr	r4, [pc, #52]	; (800647c <__libc_init_array+0x3c>)
 8006446:	1b64      	subs	r4, r4, r5
 8006448:	10a4      	asrs	r4, r4, #2
 800644a:	2600      	movs	r6, #0
 800644c:	42a6      	cmp	r6, r4
 800644e:	d109      	bne.n	8006464 <__libc_init_array+0x24>
 8006450:	4d0b      	ldr	r5, [pc, #44]	; (8006480 <__libc_init_array+0x40>)
 8006452:	4c0c      	ldr	r4, [pc, #48]	; (8006484 <__libc_init_array+0x44>)
 8006454:	f000 f8da 	bl	800660c <_init>
 8006458:	1b64      	subs	r4, r4, r5
 800645a:	10a4      	asrs	r4, r4, #2
 800645c:	2600      	movs	r6, #0
 800645e:	42a6      	cmp	r6, r4
 8006460:	d105      	bne.n	800646e <__libc_init_array+0x2e>
 8006462:	bd70      	pop	{r4, r5, r6, pc}
 8006464:	f855 3b04 	ldr.w	r3, [r5], #4
 8006468:	4798      	blx	r3
 800646a:	3601      	adds	r6, #1
 800646c:	e7ee      	b.n	800644c <__libc_init_array+0xc>
 800646e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006472:	4798      	blx	r3
 8006474:	3601      	adds	r6, #1
 8006476:	e7f2      	b.n	800645e <__libc_init_array+0x1e>
 8006478:	08006634 	.word	0x08006634
 800647c:	08006634 	.word	0x08006634
 8006480:	08006634 	.word	0x08006634
 8006484:	08006638 	.word	0x08006638

08006488 <malloc>:
 8006488:	4b02      	ldr	r3, [pc, #8]	; (8006494 <malloc+0xc>)
 800648a:	4601      	mov	r1, r0
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	f000 b82b 	b.w	80064e8 <_malloc_r>
 8006492:	bf00      	nop
 8006494:	24000090 	.word	0x24000090

08006498 <memset>:
 8006498:	4402      	add	r2, r0
 800649a:	4603      	mov	r3, r0
 800649c:	4293      	cmp	r3, r2
 800649e:	d100      	bne.n	80064a2 <memset+0xa>
 80064a0:	4770      	bx	lr
 80064a2:	f803 1b01 	strb.w	r1, [r3], #1
 80064a6:	e7f9      	b.n	800649c <memset+0x4>

080064a8 <sbrk_aligned>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	4e0e      	ldr	r6, [pc, #56]	; (80064e4 <sbrk_aligned+0x3c>)
 80064ac:	460c      	mov	r4, r1
 80064ae:	6831      	ldr	r1, [r6, #0]
 80064b0:	4605      	mov	r5, r0
 80064b2:	b911      	cbnz	r1, 80064ba <sbrk_aligned+0x12>
 80064b4:	f000 f88c 	bl	80065d0 <_sbrk_r>
 80064b8:	6030      	str	r0, [r6, #0]
 80064ba:	4621      	mov	r1, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	f000 f887 	bl	80065d0 <_sbrk_r>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d00a      	beq.n	80064dc <sbrk_aligned+0x34>
 80064c6:	1cc4      	adds	r4, r0, #3
 80064c8:	f024 0403 	bic.w	r4, r4, #3
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d007      	beq.n	80064e0 <sbrk_aligned+0x38>
 80064d0:	1a21      	subs	r1, r4, r0
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 f87c 	bl	80065d0 <_sbrk_r>
 80064d8:	3001      	adds	r0, #1
 80064da:	d101      	bne.n	80064e0 <sbrk_aligned+0x38>
 80064dc:	f04f 34ff 	mov.w	r4, #4294967295
 80064e0:	4620      	mov	r0, r4
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	24004214 	.word	0x24004214

080064e8 <_malloc_r>:
 80064e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ec:	1ccd      	adds	r5, r1, #3
 80064ee:	f025 0503 	bic.w	r5, r5, #3
 80064f2:	3508      	adds	r5, #8
 80064f4:	2d0c      	cmp	r5, #12
 80064f6:	bf38      	it	cc
 80064f8:	250c      	movcc	r5, #12
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	4607      	mov	r7, r0
 80064fe:	db01      	blt.n	8006504 <_malloc_r+0x1c>
 8006500:	42a9      	cmp	r1, r5
 8006502:	d905      	bls.n	8006510 <_malloc_r+0x28>
 8006504:	230c      	movs	r3, #12
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	2600      	movs	r6, #0
 800650a:	4630      	mov	r0, r6
 800650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006510:	4e2e      	ldr	r6, [pc, #184]	; (80065cc <_malloc_r+0xe4>)
 8006512:	f000 f86d 	bl	80065f0 <__malloc_lock>
 8006516:	6833      	ldr	r3, [r6, #0]
 8006518:	461c      	mov	r4, r3
 800651a:	bb34      	cbnz	r4, 800656a <_malloc_r+0x82>
 800651c:	4629      	mov	r1, r5
 800651e:	4638      	mov	r0, r7
 8006520:	f7ff ffc2 	bl	80064a8 <sbrk_aligned>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	4604      	mov	r4, r0
 8006528:	d14d      	bne.n	80065c6 <_malloc_r+0xde>
 800652a:	6834      	ldr	r4, [r6, #0]
 800652c:	4626      	mov	r6, r4
 800652e:	2e00      	cmp	r6, #0
 8006530:	d140      	bne.n	80065b4 <_malloc_r+0xcc>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	4631      	mov	r1, r6
 8006536:	4638      	mov	r0, r7
 8006538:	eb04 0803 	add.w	r8, r4, r3
 800653c:	f000 f848 	bl	80065d0 <_sbrk_r>
 8006540:	4580      	cmp	r8, r0
 8006542:	d13a      	bne.n	80065ba <_malloc_r+0xd2>
 8006544:	6821      	ldr	r1, [r4, #0]
 8006546:	3503      	adds	r5, #3
 8006548:	1a6d      	subs	r5, r5, r1
 800654a:	f025 0503 	bic.w	r5, r5, #3
 800654e:	3508      	adds	r5, #8
 8006550:	2d0c      	cmp	r5, #12
 8006552:	bf38      	it	cc
 8006554:	250c      	movcc	r5, #12
 8006556:	4629      	mov	r1, r5
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ffa5 	bl	80064a8 <sbrk_aligned>
 800655e:	3001      	adds	r0, #1
 8006560:	d02b      	beq.n	80065ba <_malloc_r+0xd2>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	442b      	add	r3, r5
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	e00e      	b.n	8006588 <_malloc_r+0xa0>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	1b52      	subs	r2, r2, r5
 800656e:	d41e      	bmi.n	80065ae <_malloc_r+0xc6>
 8006570:	2a0b      	cmp	r2, #11
 8006572:	d916      	bls.n	80065a2 <_malloc_r+0xba>
 8006574:	1961      	adds	r1, r4, r5
 8006576:	42a3      	cmp	r3, r4
 8006578:	6025      	str	r5, [r4, #0]
 800657a:	bf18      	it	ne
 800657c:	6059      	strne	r1, [r3, #4]
 800657e:	6863      	ldr	r3, [r4, #4]
 8006580:	bf08      	it	eq
 8006582:	6031      	streq	r1, [r6, #0]
 8006584:	5162      	str	r2, [r4, r5]
 8006586:	604b      	str	r3, [r1, #4]
 8006588:	4638      	mov	r0, r7
 800658a:	f104 060b 	add.w	r6, r4, #11
 800658e:	f000 f835 	bl	80065fc <__malloc_unlock>
 8006592:	f026 0607 	bic.w	r6, r6, #7
 8006596:	1d23      	adds	r3, r4, #4
 8006598:	1af2      	subs	r2, r6, r3
 800659a:	d0b6      	beq.n	800650a <_malloc_r+0x22>
 800659c:	1b9b      	subs	r3, r3, r6
 800659e:	50a3      	str	r3, [r4, r2]
 80065a0:	e7b3      	b.n	800650a <_malloc_r+0x22>
 80065a2:	6862      	ldr	r2, [r4, #4]
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	bf0c      	ite	eq
 80065a8:	6032      	streq	r2, [r6, #0]
 80065aa:	605a      	strne	r2, [r3, #4]
 80065ac:	e7ec      	b.n	8006588 <_malloc_r+0xa0>
 80065ae:	4623      	mov	r3, r4
 80065b0:	6864      	ldr	r4, [r4, #4]
 80065b2:	e7b2      	b.n	800651a <_malloc_r+0x32>
 80065b4:	4634      	mov	r4, r6
 80065b6:	6876      	ldr	r6, [r6, #4]
 80065b8:	e7b9      	b.n	800652e <_malloc_r+0x46>
 80065ba:	230c      	movs	r3, #12
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4638      	mov	r0, r7
 80065c0:	f000 f81c 	bl	80065fc <__malloc_unlock>
 80065c4:	e7a1      	b.n	800650a <_malloc_r+0x22>
 80065c6:	6025      	str	r5, [r4, #0]
 80065c8:	e7de      	b.n	8006588 <_malloc_r+0xa0>
 80065ca:	bf00      	nop
 80065cc:	24004210 	.word	0x24004210

080065d0 <_sbrk_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4d06      	ldr	r5, [pc, #24]	; (80065ec <_sbrk_r+0x1c>)
 80065d4:	2300      	movs	r3, #0
 80065d6:	4604      	mov	r4, r0
 80065d8:	4608      	mov	r0, r1
 80065da:	602b      	str	r3, [r5, #0]
 80065dc:	f7fa ffd6 	bl	800158c <_sbrk>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_sbrk_r+0x1a>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_sbrk_r+0x1a>
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	24004218 	.word	0x24004218

080065f0 <__malloc_lock>:
 80065f0:	4801      	ldr	r0, [pc, #4]	; (80065f8 <__malloc_lock+0x8>)
 80065f2:	f000 b809 	b.w	8006608 <__retarget_lock_acquire_recursive>
 80065f6:	bf00      	nop
 80065f8:	2400421c 	.word	0x2400421c

080065fc <__malloc_unlock>:
 80065fc:	4801      	ldr	r0, [pc, #4]	; (8006604 <__malloc_unlock+0x8>)
 80065fe:	f000 b804 	b.w	800660a <__retarget_lock_release_recursive>
 8006602:	bf00      	nop
 8006604:	2400421c 	.word	0x2400421c

08006608 <__retarget_lock_acquire_recursive>:
 8006608:	4770      	bx	lr

0800660a <__retarget_lock_release_recursive>:
 800660a:	4770      	bx	lr

0800660c <_init>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	bf00      	nop
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr

08006618 <_fini>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	bf00      	nop
 800661c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661e:	bc08      	pop	{r3}
 8006620:	469e      	mov	lr, r3
 8006622:	4770      	bx	lr
