
Stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e94  08002e94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000010  08002ea8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002ea8  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000933e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000155b  00000000  00000000  0002937a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa58  00000000  00000000  0002baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c4b  00000000  00000000  0004b548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4472  00000000  00000000  00055193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  00119658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e64 	.word	0x08002e64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002e64 	.word	0x08002e64

080001c8 <__aeabi_frsub>:
 80001c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__addsf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_fsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001d4 <__addsf3>:
 80001d4:	0042      	lsls	r2, r0, #1
 80001d6:	bf1f      	itttt	ne
 80001d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001dc:	ea92 0f03 	teqne	r2, r3
 80001e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e8:	d06a      	beq.n	80002c0 <__addsf3+0xec>
 80001ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001f2:	bfc1      	itttt	gt
 80001f4:	18d2      	addgt	r2, r2, r3
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	4048      	eorgt	r0, r1
 80001fa:	4041      	eorgt	r1, r0
 80001fc:	bfb8      	it	lt
 80001fe:	425b      	neglt	r3, r3
 8000200:	2b19      	cmp	r3, #25
 8000202:	bf88      	it	hi
 8000204:	4770      	bxhi	lr
 8000206:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800020a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000212:	bf18      	it	ne
 8000214:	4240      	negne	r0, r0
 8000216:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800021a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800021e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4249      	negne	r1, r1
 8000226:	ea92 0f03 	teq	r2, r3
 800022a:	d03f      	beq.n	80002ac <__addsf3+0xd8>
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	fa41 fc03 	asr.w	ip, r1, r3
 8000234:	eb10 000c 	adds.w	r0, r0, ip
 8000238:	f1c3 0320 	rsb	r3, r3, #32
 800023c:	fa01 f103 	lsl.w	r1, r1, r3
 8000240:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000244:	d502      	bpl.n	800024c <__addsf3+0x78>
 8000246:	4249      	negs	r1, r1
 8000248:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800024c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000250:	d313      	bcc.n	800027a <__addsf3+0xa6>
 8000252:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000256:	d306      	bcc.n	8000266 <__addsf3+0x92>
 8000258:	0840      	lsrs	r0, r0, #1
 800025a:	ea4f 0131 	mov.w	r1, r1, rrx
 800025e:	f102 0201 	add.w	r2, r2, #1
 8000262:	2afe      	cmp	r2, #254	; 0xfe
 8000264:	d251      	bcs.n	800030a <__addsf3+0x136>
 8000266:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800026a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026e:	bf08      	it	eq
 8000270:	f020 0001 	biceq.w	r0, r0, #1
 8000274:	ea40 0003 	orr.w	r0, r0, r3
 8000278:	4770      	bx	lr
 800027a:	0049      	lsls	r1, r1, #1
 800027c:	eb40 0000 	adc.w	r0, r0, r0
 8000280:	3a01      	subs	r2, #1
 8000282:	bf28      	it	cs
 8000284:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000288:	d2ed      	bcs.n	8000266 <__addsf3+0x92>
 800028a:	fab0 fc80 	clz	ip, r0
 800028e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000292:	ebb2 020c 	subs.w	r2, r2, ip
 8000296:	fa00 f00c 	lsl.w	r0, r0, ip
 800029a:	bfaa      	itet	ge
 800029c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002a0:	4252      	neglt	r2, r2
 80002a2:	4318      	orrge	r0, r3
 80002a4:	bfbc      	itt	lt
 80002a6:	40d0      	lsrlt	r0, r2
 80002a8:	4318      	orrlt	r0, r3
 80002aa:	4770      	bx	lr
 80002ac:	f092 0f00 	teq	r2, #0
 80002b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002b4:	bf06      	itte	eq
 80002b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ba:	3201      	addeq	r2, #1
 80002bc:	3b01      	subne	r3, #1
 80002be:	e7b5      	b.n	800022c <__addsf3+0x58>
 80002c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c8:	bf18      	it	ne
 80002ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ce:	d021      	beq.n	8000314 <__addsf3+0x140>
 80002d0:	ea92 0f03 	teq	r2, r3
 80002d4:	d004      	beq.n	80002e0 <__addsf3+0x10c>
 80002d6:	f092 0f00 	teq	r2, #0
 80002da:	bf08      	it	eq
 80002dc:	4608      	moveq	r0, r1
 80002de:	4770      	bx	lr
 80002e0:	ea90 0f01 	teq	r0, r1
 80002e4:	bf1c      	itt	ne
 80002e6:	2000      	movne	r0, #0
 80002e8:	4770      	bxne	lr
 80002ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ee:	d104      	bne.n	80002fa <__addsf3+0x126>
 80002f0:	0040      	lsls	r0, r0, #1
 80002f2:	bf28      	it	cs
 80002f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002f8:	4770      	bx	lr
 80002fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002fe:	bf3c      	itt	cc
 8000300:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000304:	4770      	bxcc	lr
 8000306:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800030a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800030e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000312:	4770      	bx	lr
 8000314:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000318:	bf16      	itet	ne
 800031a:	4608      	movne	r0, r1
 800031c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000320:	4601      	movne	r1, r0
 8000322:	0242      	lsls	r2, r0, #9
 8000324:	bf06      	itte	eq
 8000326:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800032a:	ea90 0f01 	teqeq	r0, r1
 800032e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000332:	4770      	bx	lr

08000334 <__aeabi_ui2f>:
 8000334:	f04f 0300 	mov.w	r3, #0
 8000338:	e004      	b.n	8000344 <__aeabi_i2f+0x8>
 800033a:	bf00      	nop

0800033c <__aeabi_i2f>:
 800033c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000340:	bf48      	it	mi
 8000342:	4240      	negmi	r0, r0
 8000344:	ea5f 0c00 	movs.w	ip, r0
 8000348:	bf08      	it	eq
 800034a:	4770      	bxeq	lr
 800034c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000350:	4601      	mov	r1, r0
 8000352:	f04f 0000 	mov.w	r0, #0
 8000356:	e01c      	b.n	8000392 <__aeabi_l2f+0x2a>

08000358 <__aeabi_ul2f>:
 8000358:	ea50 0201 	orrs.w	r2, r0, r1
 800035c:	bf08      	it	eq
 800035e:	4770      	bxeq	lr
 8000360:	f04f 0300 	mov.w	r3, #0
 8000364:	e00a      	b.n	800037c <__aeabi_l2f+0x14>
 8000366:	bf00      	nop

08000368 <__aeabi_l2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000374:	d502      	bpl.n	800037c <__aeabi_l2f+0x14>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	ea5f 0c01 	movs.w	ip, r1
 8000380:	bf02      	ittt	eq
 8000382:	4684      	moveq	ip, r0
 8000384:	4601      	moveq	r1, r0
 8000386:	2000      	moveq	r0, #0
 8000388:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800038c:	bf08      	it	eq
 800038e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000392:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000396:	fabc f28c 	clz	r2, ip
 800039a:	3a08      	subs	r2, #8
 800039c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003a0:	db10      	blt.n	80003c4 <__aeabi_l2f+0x5c>
 80003a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a6:	4463      	add	r3, ip
 80003a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003ac:	f1c2 0220 	rsb	r2, r2, #32
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b4:	fa20 f202 	lsr.w	r2, r0, r2
 80003b8:	eb43 0002 	adc.w	r0, r3, r2
 80003bc:	bf08      	it	eq
 80003be:	f020 0001 	biceq.w	r0, r0, #1
 80003c2:	4770      	bx	lr
 80003c4:	f102 0220 	add.w	r2, r2, #32
 80003c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003cc:	f1c2 0220 	rsb	r2, r2, #32
 80003d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d4:	fa21 f202 	lsr.w	r2, r1, r2
 80003d8:	eb43 0002 	adc.w	r0, r3, r2
 80003dc:	bf08      	it	eq
 80003de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003e2:	4770      	bx	lr

080003e4 <__aeabi_uldivmod>:
 80003e4:	b953      	cbnz	r3, 80003fc <__aeabi_uldivmod+0x18>
 80003e6:	b94a      	cbnz	r2, 80003fc <__aeabi_uldivmod+0x18>
 80003e8:	2900      	cmp	r1, #0
 80003ea:	bf08      	it	eq
 80003ec:	2800      	cmpeq	r0, #0
 80003ee:	bf1c      	itt	ne
 80003f0:	f04f 31ff 	movne.w	r1, #4294967295
 80003f4:	f04f 30ff 	movne.w	r0, #4294967295
 80003f8:	f000 b974 	b.w	80006e4 <__aeabi_idiv0>
 80003fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000400:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000404:	f000 f806 	bl	8000414 <__udivmoddi4>
 8000408:	f8dd e004 	ldr.w	lr, [sp, #4]
 800040c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000410:	b004      	add	sp, #16
 8000412:	4770      	bx	lr

08000414 <__udivmoddi4>:
 8000414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000418:	9d08      	ldr	r5, [sp, #32]
 800041a:	4604      	mov	r4, r0
 800041c:	468e      	mov	lr, r1
 800041e:	2b00      	cmp	r3, #0
 8000420:	d14d      	bne.n	80004be <__udivmoddi4+0xaa>
 8000422:	428a      	cmp	r2, r1
 8000424:	4694      	mov	ip, r2
 8000426:	d969      	bls.n	80004fc <__udivmoddi4+0xe8>
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	b152      	cbz	r2, 8000444 <__udivmoddi4+0x30>
 800042e:	fa01 f302 	lsl.w	r3, r1, r2
 8000432:	f1c2 0120 	rsb	r1, r2, #32
 8000436:	fa20 f101 	lsr.w	r1, r0, r1
 800043a:	fa0c fc02 	lsl.w	ip, ip, r2
 800043e:	ea41 0e03 	orr.w	lr, r1, r3
 8000442:	4094      	lsls	r4, r2
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	0c21      	lsrs	r1, r4, #16
 800044a:	fbbe f6f8 	udiv	r6, lr, r8
 800044e:	fa1f f78c 	uxth.w	r7, ip
 8000452:	fb08 e316 	mls	r3, r8, r6, lr
 8000456:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800045a:	fb06 f107 	mul.w	r1, r6, r7
 800045e:	4299      	cmp	r1, r3
 8000460:	d90a      	bls.n	8000478 <__udivmoddi4+0x64>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f106 30ff 	add.w	r0, r6, #4294967295
 800046a:	f080 811f 	bcs.w	80006ac <__udivmoddi4+0x298>
 800046e:	4299      	cmp	r1, r3
 8000470:	f240 811c 	bls.w	80006ac <__udivmoddi4+0x298>
 8000474:	3e02      	subs	r6, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000480:	fb08 3310 	mls	r3, r8, r0, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb00 f707 	mul.w	r7, r0, r7
 800048c:	42a7      	cmp	r7, r4
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x92>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 33ff 	add.w	r3, r0, #4294967295
 8000498:	f080 810a 	bcs.w	80006b0 <__udivmoddi4+0x29c>
 800049c:	42a7      	cmp	r7, r4
 800049e:	f240 8107 	bls.w	80006b0 <__udivmoddi4+0x29c>
 80004a2:	4464      	add	r4, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004aa:	1be4      	subs	r4, r4, r7
 80004ac:	2600      	movs	r6, #0
 80004ae:	b11d      	cbz	r5, 80004b8 <__udivmoddi4+0xa4>
 80004b0:	40d4      	lsrs	r4, r2
 80004b2:	2300      	movs	r3, #0
 80004b4:	e9c5 4300 	strd	r4, r3, [r5]
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	428b      	cmp	r3, r1
 80004c0:	d909      	bls.n	80004d6 <__udivmoddi4+0xc2>
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	f000 80ef 	beq.w	80006a6 <__udivmoddi4+0x292>
 80004c8:	2600      	movs	r6, #0
 80004ca:	e9c5 0100 	strd	r0, r1, [r5]
 80004ce:	4630      	mov	r0, r6
 80004d0:	4631      	mov	r1, r6
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	fab3 f683 	clz	r6, r3
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d14a      	bne.n	8000574 <__udivmoddi4+0x160>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d302      	bcc.n	80004e8 <__udivmoddi4+0xd4>
 80004e2:	4282      	cmp	r2, r0
 80004e4:	f200 80f9 	bhi.w	80006da <__udivmoddi4+0x2c6>
 80004e8:	1a84      	subs	r4, r0, r2
 80004ea:	eb61 0303 	sbc.w	r3, r1, r3
 80004ee:	2001      	movs	r0, #1
 80004f0:	469e      	mov	lr, r3
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	d0e0      	beq.n	80004b8 <__udivmoddi4+0xa4>
 80004f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80004fa:	e7dd      	b.n	80004b8 <__udivmoddi4+0xa4>
 80004fc:	b902      	cbnz	r2, 8000500 <__udivmoddi4+0xec>
 80004fe:	deff      	udf	#255	; 0xff
 8000500:	fab2 f282 	clz	r2, r2
 8000504:	2a00      	cmp	r2, #0
 8000506:	f040 8092 	bne.w	800062e <__udivmoddi4+0x21a>
 800050a:	eba1 010c 	sub.w	r1, r1, ip
 800050e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000512:	fa1f fe8c 	uxth.w	lr, ip
 8000516:	2601      	movs	r6, #1
 8000518:	0c20      	lsrs	r0, r4, #16
 800051a:	fbb1 f3f7 	udiv	r3, r1, r7
 800051e:	fb07 1113 	mls	r1, r7, r3, r1
 8000522:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000526:	fb0e f003 	mul.w	r0, lr, r3
 800052a:	4288      	cmp	r0, r1
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x12c>
 800052e:	eb1c 0101 	adds.w	r1, ip, r1
 8000532:	f103 38ff 	add.w	r8, r3, #4294967295
 8000536:	d202      	bcs.n	800053e <__udivmoddi4+0x12a>
 8000538:	4288      	cmp	r0, r1
 800053a:	f200 80cb 	bhi.w	80006d4 <__udivmoddi4+0x2c0>
 800053e:	4643      	mov	r3, r8
 8000540:	1a09      	subs	r1, r1, r0
 8000542:	b2a4      	uxth	r4, r4
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1110 	mls	r1, r7, r0, r1
 800054c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000550:	fb0e fe00 	mul.w	lr, lr, r0
 8000554:	45a6      	cmp	lr, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x156>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d202      	bcs.n	8000568 <__udivmoddi4+0x154>
 8000562:	45a6      	cmp	lr, r4
 8000564:	f200 80bb 	bhi.w	80006de <__udivmoddi4+0x2ca>
 8000568:	4608      	mov	r0, r1
 800056a:	eba4 040e 	sub.w	r4, r4, lr
 800056e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000572:	e79c      	b.n	80004ae <__udivmoddi4+0x9a>
 8000574:	f1c6 0720 	rsb	r7, r6, #32
 8000578:	40b3      	lsls	r3, r6
 800057a:	fa22 fc07 	lsr.w	ip, r2, r7
 800057e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000582:	fa20 f407 	lsr.w	r4, r0, r7
 8000586:	fa01 f306 	lsl.w	r3, r1, r6
 800058a:	431c      	orrs	r4, r3
 800058c:	40f9      	lsrs	r1, r7
 800058e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000592:	fa00 f306 	lsl.w	r3, r0, r6
 8000596:	fbb1 f8f9 	udiv	r8, r1, r9
 800059a:	0c20      	lsrs	r0, r4, #16
 800059c:	fa1f fe8c 	uxth.w	lr, ip
 80005a0:	fb09 1118 	mls	r1, r9, r8, r1
 80005a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005a8:	fb08 f00e 	mul.w	r0, r8, lr
 80005ac:	4288      	cmp	r0, r1
 80005ae:	fa02 f206 	lsl.w	r2, r2, r6
 80005b2:	d90b      	bls.n	80005cc <__udivmoddi4+0x1b8>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80005bc:	f080 8088 	bcs.w	80006d0 <__udivmoddi4+0x2bc>
 80005c0:	4288      	cmp	r0, r1
 80005c2:	f240 8085 	bls.w	80006d0 <__udivmoddi4+0x2bc>
 80005c6:	f1a8 0802 	sub.w	r8, r8, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	1a09      	subs	r1, r1, r0
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80005d4:	fb09 1110 	mls	r1, r9, r0, r1
 80005d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80005e0:	458e      	cmp	lr, r1
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x1e2>
 80005e4:	eb1c 0101 	adds.w	r1, ip, r1
 80005e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80005ec:	d26c      	bcs.n	80006c8 <__udivmoddi4+0x2b4>
 80005ee:	458e      	cmp	lr, r1
 80005f0:	d96a      	bls.n	80006c8 <__udivmoddi4+0x2b4>
 80005f2:	3802      	subs	r0, #2
 80005f4:	4461      	add	r1, ip
 80005f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005fa:	fba0 9402 	umull	r9, r4, r0, r2
 80005fe:	eba1 010e 	sub.w	r1, r1, lr
 8000602:	42a1      	cmp	r1, r4
 8000604:	46c8      	mov	r8, r9
 8000606:	46a6      	mov	lr, r4
 8000608:	d356      	bcc.n	80006b8 <__udivmoddi4+0x2a4>
 800060a:	d053      	beq.n	80006b4 <__udivmoddi4+0x2a0>
 800060c:	b15d      	cbz	r5, 8000626 <__udivmoddi4+0x212>
 800060e:	ebb3 0208 	subs.w	r2, r3, r8
 8000612:	eb61 010e 	sbc.w	r1, r1, lr
 8000616:	fa01 f707 	lsl.w	r7, r1, r7
 800061a:	fa22 f306 	lsr.w	r3, r2, r6
 800061e:	40f1      	lsrs	r1, r6
 8000620:	431f      	orrs	r7, r3
 8000622:	e9c5 7100 	strd	r7, r1, [r5]
 8000626:	2600      	movs	r6, #0
 8000628:	4631      	mov	r1, r6
 800062a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	40d8      	lsrs	r0, r3
 8000634:	fa0c fc02 	lsl.w	ip, ip, r2
 8000638:	fa21 f303 	lsr.w	r3, r1, r3
 800063c:	4091      	lsls	r1, r2
 800063e:	4301      	orrs	r1, r0
 8000640:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000644:	fa1f fe8c 	uxth.w	lr, ip
 8000648:	fbb3 f0f7 	udiv	r0, r3, r7
 800064c:	fb07 3610 	mls	r6, r7, r0, r3
 8000650:	0c0b      	lsrs	r3, r1, #16
 8000652:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000656:	fb00 f60e 	mul.w	r6, r0, lr
 800065a:	429e      	cmp	r6, r3
 800065c:	fa04 f402 	lsl.w	r4, r4, r2
 8000660:	d908      	bls.n	8000674 <__udivmoddi4+0x260>
 8000662:	eb1c 0303 	adds.w	r3, ip, r3
 8000666:	f100 38ff 	add.w	r8, r0, #4294967295
 800066a:	d22f      	bcs.n	80006cc <__udivmoddi4+0x2b8>
 800066c:	429e      	cmp	r6, r3
 800066e:	d92d      	bls.n	80006cc <__udivmoddi4+0x2b8>
 8000670:	3802      	subs	r0, #2
 8000672:	4463      	add	r3, ip
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	b289      	uxth	r1, r1
 8000678:	fbb3 f6f7 	udiv	r6, r3, r7
 800067c:	fb07 3316 	mls	r3, r7, r6, r3
 8000680:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000684:	fb06 f30e 	mul.w	r3, r6, lr
 8000688:	428b      	cmp	r3, r1
 800068a:	d908      	bls.n	800069e <__udivmoddi4+0x28a>
 800068c:	eb1c 0101 	adds.w	r1, ip, r1
 8000690:	f106 38ff 	add.w	r8, r6, #4294967295
 8000694:	d216      	bcs.n	80006c4 <__udivmoddi4+0x2b0>
 8000696:	428b      	cmp	r3, r1
 8000698:	d914      	bls.n	80006c4 <__udivmoddi4+0x2b0>
 800069a:	3e02      	subs	r6, #2
 800069c:	4461      	add	r1, ip
 800069e:	1ac9      	subs	r1, r1, r3
 80006a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006a4:	e738      	b.n	8000518 <__udivmoddi4+0x104>
 80006a6:	462e      	mov	r6, r5
 80006a8:	4628      	mov	r0, r5
 80006aa:	e705      	b.n	80004b8 <__udivmoddi4+0xa4>
 80006ac:	4606      	mov	r6, r0
 80006ae:	e6e3      	b.n	8000478 <__udivmoddi4+0x64>
 80006b0:	4618      	mov	r0, r3
 80006b2:	e6f8      	b.n	80004a6 <__udivmoddi4+0x92>
 80006b4:	454b      	cmp	r3, r9
 80006b6:	d2a9      	bcs.n	800060c <__udivmoddi4+0x1f8>
 80006b8:	ebb9 0802 	subs.w	r8, r9, r2
 80006bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006c0:	3801      	subs	r0, #1
 80006c2:	e7a3      	b.n	800060c <__udivmoddi4+0x1f8>
 80006c4:	4646      	mov	r6, r8
 80006c6:	e7ea      	b.n	800069e <__udivmoddi4+0x28a>
 80006c8:	4620      	mov	r0, r4
 80006ca:	e794      	b.n	80005f6 <__udivmoddi4+0x1e2>
 80006cc:	4640      	mov	r0, r8
 80006ce:	e7d1      	b.n	8000674 <__udivmoddi4+0x260>
 80006d0:	46d0      	mov	r8, sl
 80006d2:	e77b      	b.n	80005cc <__udivmoddi4+0x1b8>
 80006d4:	3b02      	subs	r3, #2
 80006d6:	4461      	add	r1, ip
 80006d8:	e732      	b.n	8000540 <__udivmoddi4+0x12c>
 80006da:	4630      	mov	r0, r6
 80006dc:	e709      	b.n	80004f2 <__udivmoddi4+0xde>
 80006de:	4464      	add	r4, ip
 80006e0:	3802      	subs	r0, #2
 80006e2:	e742      	b.n	800056a <__udivmoddi4+0x156>

080006e4 <__aeabi_idiv0>:
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fade 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f82c 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f000 f90c 	bl	8000910 <MX_GPIO_Init>
  MX_TIM4_Init();
 80006f8:	f000 f892 	bl	8000820 <MX_TIM4_Init>
//  Turn_Stepper(0, 0.5,5000);
//  HAL_Delay(1000);
//  Turn_Stepper(1, 1,5000);


   Turn_Stepper(0, 5);
 80006fc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f97d 	bl	8000a00 <Turn_Stepper>
   HAL_Delay(1000);
 8000706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070a:	f000 fb41 	bl	8000d90 <HAL_Delay>
   Turn_Stepper(1, 5);
 800070e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000712:	2001      	movs	r0, #1
 8000714:	f000 f974 	bl	8000a00 <Turn_Stepper>
   HAL_Delay(1000);
 8000718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071c:	f000 fb38 	bl	8000d90 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i=HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14);
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <main+0x54>)
 8000726:	f000 fe05 	bl	8001334 <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	461a      	mov	r2, r3
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <main+0x58>)
 8000730:	701a      	strb	r2, [r3, #0]
	  k=TIM4->ARR;
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <main+0x5c>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	4a04      	ldr	r2, [pc, #16]	; (8000748 <main+0x60>)
 8000738:	6013      	str	r3, [r2, #0]
	  i=HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14);
 800073a:	e7f1      	b.n	8000720 <main+0x38>
 800073c:	40020c00 	.word	0x40020c00
 8000740:	20000074 	.word	0x20000074
 8000744:	40000800 	.word	0x40000800
 8000748:	20000080 	.word	0x20000080

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2230      	movs	r2, #48	; 0x30
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fb7a 	bl	8002e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	4a27      	ldr	r2, [pc, #156]	; (8000818 <SystemClock_Config+0xcc>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	; 0x40
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <SystemClock_Config+0xd0>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007bc:	2308      	movs	r3, #8
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007c0:	23a8      	movs	r3, #168	; 0xa8
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c8:	2307      	movs	r3, #7
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fde1 	bl	8001398 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007dc:	f000 f966 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2105      	movs	r1, #5
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f842 	bl	8001888 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800080a:	f000 f94f 	bl	8000aac <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	; 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08e      	sub	sp, #56	; 0x38
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <MX_TIM4_Init+0xe8>)
 8000852:	4a2e      	ldr	r2, [pc, #184]	; (800090c <MX_TIM4_Init+0xec>)
 8000854:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20;
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_TIM4_Init+0xe8>)
 8000858:	2214      	movs	r2, #20
 800085a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <MX_TIM4_Init+0xe8>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_TIM4_Init+0xe8>)
 8000864:	f242 7210 	movw	r2, #10000	; 0x2710
 8000868:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <MX_TIM4_Init+0xe8>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_TIM4_Init+0xe8>)
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000876:	4824      	ldr	r0, [pc, #144]	; (8000908 <MX_TIM4_Init+0xe8>)
 8000878:	f001 f9f2 	bl	8001c60 <HAL_TIM_Base_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000882:	f000 f913 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800088c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000890:	4619      	mov	r1, r3
 8000892:	481d      	ldr	r0, [pc, #116]	; (8000908 <MX_TIM4_Init+0xe8>)
 8000894:	f001 fe2a 	bl	80024ec <HAL_TIM_ConfigClockSource>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800089e:	f000 f905 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008a2:	4819      	ldr	r0, [pc, #100]	; (8000908 <MX_TIM4_Init+0xe8>)
 80008a4:	f001 fa2b 	bl	8001cfe <HAL_TIM_PWM_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80008ae:	f000 f8fd 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	4619      	mov	r1, r3
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <MX_TIM4_Init+0xe8>)
 80008c2:	f002 fa13 	bl	8002cec <HAL_TIMEx_MasterConfigSynchronization>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80008cc:	f000 f8ee 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d0:	2360      	movs	r3, #96	; 0x60
 80008d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80008d4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80008d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	4619      	mov	r1, r3
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <MX_TIM4_Init+0xe8>)
 80008ea:	f001 fd3d 	bl	8002368 <HAL_TIM_PWM_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80008f4:	f000 f8da 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <MX_TIM4_Init+0xe8>)
 80008fa:	f000 f92d 	bl	8000b58 <HAL_TIM_MspPostInit>

}
 80008fe:	bf00      	nop
 8000900:	3738      	adds	r7, #56	; 0x38
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000002c 	.word	0x2000002c
 800090c:	40000800 	.word	0x40000800

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_GPIO_Init+0x98>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <MX_GPIO_Init+0x98>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_GPIO_Init+0x98>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_GPIO_Init+0x98>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <MX_GPIO_Init+0x98>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_GPIO_Init+0x98>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2102      	movs	r1, #2
 8000962:	4812      	ldr	r0, [pc, #72]	; (80009ac <MX_GPIO_Init+0x9c>)
 8000964:	f000 fcfe 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000968:	2302      	movs	r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2302      	movs	r3, #2
 8000976:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4619      	mov	r1, r3
 800097e:	480b      	ldr	r0, [pc, #44]	; (80009ac <MX_GPIO_Init+0x9c>)
 8000980:	f000 fb3c 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000984:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800098e:	2302      	movs	r3, #2
 8000990:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_GPIO_Init+0xa0>)
 800099a:	f000 fb2f 	bl	8000ffc <HAL_GPIO_Init>

}
 800099e:	bf00      	nop
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80009b4:	b4b0      	push	{r4, r5, r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	j++;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 80009be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c2:	1c54      	adds	r4, r2, #1
 80009c4:	f143 0500 	adc.w	r5, r3, #0
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 80009ca:	e9c3 4500 	strd	r4, r5, [r3]
	TIM4->ARR=TIM4->ARR-100;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80009d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80009d4:	3b64      	subs	r3, #100	; 0x64
 80009d6:	62d3      	str	r3, [r2, #44]	; 0x2c
	if((TIM4->ARR)<=VMAX)
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80009da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009dc:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d803      	bhi.n	80009ec <HAL_TIM_PWM_PulseFinishedCallback+0x38>
	{
		TIM4->ARR = VMAX;
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80009e6:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bcb0      	pop	{r4, r5, r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000078 	.word	0x20000078
 80009fc:	40000800 	.word	0x40000800

08000a00 <Turn_Stepper>:

void Turn_Stepper(uint8_t ClockWise, float Revolutions)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	ed87 0a00 	vstr	s0, [r7]
 8000a0c:	71fb      	strb	r3, [r7, #7]
	NbrOfPulses = Revolutions * Steps_Per_Revolution;
 8000a0e:	edd7 7a00 	vldr	s15, [r7]
 8000a12:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000a94 <Turn_Stepper+0x94>
 8000a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <Turn_Stepper+0x98>)
 8000a1c:	edc3 7a00 	vstr	s15, [r3]
	// Implement speed (varying timer 4 parameters after visualizing it with oscilo)
	if(1==ClockWise)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d105      	bne.n	8000a32 <Turn_Stepper+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2102      	movs	r1, #2
 8000a2a:	481c      	ldr	r0, [pc, #112]	; (8000a9c <Turn_Stepper+0x9c>)
 8000a2c:	f000 fc9a 	bl	8001364 <HAL_GPIO_WritePin>
 8000a30:	e007      	b.n	8000a42 <Turn_Stepper+0x42>
	}
	else if(0==ClockWise)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d104      	bne.n	8000a42 <Turn_Stepper+0x42>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4817      	ldr	r0, [pc, #92]	; (8000a9c <Turn_Stepper+0x9c>)
 8000a3e:	f000 fc91 	bl	8001364 <HAL_GPIO_WritePin>
	}

//	TIM4->PSC = 100 ;
//	TIM4->ARR = (Fclk)/(SpeedInHz*(TIM4->PSC+1));
//	TIM4->CCR1 = TIM4->ARR / 2;
	TIM4->ARR = VMIN;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <Turn_Stepper+0xa0>)
 8000a44:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <Turn_Stepper+0xa4>)
 8000a4e:	f001 f9af 	bl	8001db0 <HAL_TIM_PWM_Start_IT>
	while(j<NbrOfPulses)
 8000a52:	bf00      	nop
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <Turn_Stepper+0xa8>)
 8000a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f7ff fc7b 	bl	8000358 <__aeabi_ul2f>
 8000a62:	ee07 0a10 	vmov	s14, r0
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <Turn_Stepper+0x98>)
 8000a68:	edd3 7a00 	vldr	s15, [r3]
 8000a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a74:	d4ee      	bmi.n	8000a54 <Turn_Stepper+0x54>
	{

	}

	HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000a76:	2100      	movs	r1, #0
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <Turn_Stepper+0xa4>)
 8000a7a:	f001 faaf 	bl	8001fdc <HAL_TIM_PWM_Stop_IT>
	j=0;
 8000a7e:	490a      	ldr	r1, [pc, #40]	; (8000aa8 <Turn_Stepper+0xa8>)
 8000a80:	f04f 0200 	mov.w	r2, #0
 8000a84:	f04f 0300 	mov.w	r3, #0
 8000a88:	e9c1 2300 	strd	r2, r3, [r1]

}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	43480000 	.word	0x43480000
 8000a98:	20000084 	.word	0x20000084
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40000800 	.word	0x40000800
 8000aa4:	2000002c 	.word	0x2000002c
 8000aa8:	20000078 	.word	0x20000078

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af6:	2007      	movs	r0, #7
 8000af8:	f000 fa3e 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_TIM_Base_MspInit+0x48>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d115      	bne.n	8000b46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_TIM_Base_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <HAL_TIM_Base_MspInit+0x4c>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_TIM_Base_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	201e      	movs	r0, #30
 8000b3c:	f000 fa27 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b40:	201e      	movs	r0, #30
 8000b42:	f000 fa40 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40000800 	.word	0x40000800
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_TIM_MspPostInit+0x68>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d11e      	bne.n	8000bb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_TIM_MspPostInit+0x6c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_TIM_MspPostInit+0x6c>)
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_TIM_MspPostInit+0x6c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_TIM_MspPostInit+0x70>)
 8000bb4:	f000 fa22 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40000800 	.word	0x40000800
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020c00 	.word	0x40020c00

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f89a 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM4_IRQHandler+0x10>)
 8000c26:	f001 fa97 	bl	8002158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000002c 	.word	0x2000002c

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c5e:	490e      	ldr	r1, [pc, #56]	; (8000c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c74:	4c0b      	ldr	r4, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c82:	f7ff ffd7 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f002 f8c1 	bl	8002e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fd2d 	bl	80006e8 <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c9c:	08002e9c 	.word	0x08002e9c
  ldr r2, =_sbss
 8000ca0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ca4:	2000008c 	.word	0x2000008c

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f94f 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 f808 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff feea 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x54>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x58>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f967 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 f92f 	bl	8000f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <HAL_InitTick+0x5c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000088 	.word	0x20000088

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000088 	.word	0x20000088

08000d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff ffee 	bl	8000d78 <HAL_GetTick>
 8000d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da8:	d005      	beq.n	8000db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_Delay+0x44>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db6:	bf00      	nop
 8000db8:	f7ff ffde 	bl	8000d78 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8f7      	bhi.n	8000db8 <HAL_Delay+0x28>
  {
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff29 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff3e 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff8e 	bl	8000ecc <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5d 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff31 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffa2 	bl	8000f34 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e16b      	b.n	80012f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 815a 	bne.w	80012ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d005      	beq.n	800104e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	2b02      	cmp	r3, #2
 800104c:	d130      	bne.n	80010b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d017      	beq.n	80010ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d123      	bne.n	8001140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80b4 	beq.w	80012ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b60      	ldr	r3, [pc, #384]	; (8001308 <HAL_GPIO_Init+0x30c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a5f      	ldr	r2, [pc, #380]	; (8001308 <HAL_GPIO_Init+0x30c>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <HAL_GPIO_Init+0x30c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a5b      	ldr	r2, [pc, #364]	; (800130c <HAL_GPIO_Init+0x310>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <HAL_GPIO_Init+0x314>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02b      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a51      	ldr	r2, [pc, #324]	; (8001314 <HAL_GPIO_Init+0x318>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x222>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a50      	ldr	r2, [pc, #320]	; (8001318 <HAL_GPIO_Init+0x31c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	; (800131c <HAL_GPIO_Init+0x320>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <HAL_GPIO_Init+0x324>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	; (8001324 <HAL_GPIO_Init+0x328>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <HAL_GPIO_Init+0x32c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	; (800132c <HAL_GPIO_Init+0x330>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x20a>
 8001202:	2307      	movs	r3, #7
 8001204:	e00e      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001206:	2308      	movs	r3, #8
 8001208:	e00c      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120a:	2306      	movs	r3, #6
 800120c:	e00a      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120e:	2305      	movs	r3, #5
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001212:	2304      	movs	r3, #4
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001222:	2300      	movs	r3, #0
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001234:	4935      	ldr	r1, [pc, #212]	; (800130c <HAL_GPIO_Init+0x310>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001266:	4a32      	ldr	r2, [pc, #200]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800126c:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_GPIO_Init+0x334>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001290:	4a27      	ldr	r2, [pc, #156]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ba:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_GPIO_Init+0x334>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_GPIO_Init+0x334>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e4:	4a12      	ldr	r2, [pc, #72]	; (8001330 <HAL_GPIO_Init+0x334>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	f67f ae90 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40013800 	.word	0x40013800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40021400 	.word	0x40021400
 8001328:	40021800 	.word	0x40021800
 800132c:	40021c00 	.word	0x40021c00
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e267      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d075      	beq.n	80014a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b6:	4b88      	ldr	r3, [pc, #544]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d00c      	beq.n	80013dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d112      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ce:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013da:	d10b      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	4b7e      	ldr	r3, [pc, #504]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d05b      	beq.n	80014a0 <HAL_RCC_OscConfig+0x108>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d157      	bne.n	80014a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e242      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fc:	d106      	bne.n	800140c <HAL_RCC_OscConfig+0x74>
 80013fe:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a75      	ldr	r2, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0xb0>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x98>
 8001416:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6f      	ldr	r2, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b6d      	ldr	r3, [pc, #436]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6c      	ldr	r2, [pc, #432]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0xb0>
 8001430:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a68      	ldr	r2, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a65      	ldr	r2, [pc, #404]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fc92 	bl	8000d78 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fc8e 	bl	8000d78 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e207      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b5b      	ldr	r3, [pc, #364]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0xc0>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fc7e 	bl	8000d78 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fc7a 	bl	8000d78 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1f3      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0xe8>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d063      	beq.n	8001576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ae:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d11c      	bne.n	8001500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d116      	bne.n	8001500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x152>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e1c7      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4937      	ldr	r1, [pc, #220]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	e03a      	b.n	8001576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d020      	beq.n	800154a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_RCC_OscConfig+0x244>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fc33 	bl	8000d78 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fc2f 	bl	8000d78 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1a8      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4925      	ldr	r1, [pc, #148]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_OscConfig+0x244>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc12 	bl	8000d78 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff fc0e 	bl	8000d78 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e187      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d036      	beq.n	80015f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d016      	beq.n	80015b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_RCC_OscConfig+0x248>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fbf2 	bl	8000d78 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff fbee 	bl	8000d78 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e167      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x200>
 80015b6:	e01b      	b.n	80015f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_RCC_OscConfig+0x248>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fbdb 	bl	8000d78 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e00e      	b.n	80015e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fbd7 	bl	8000d78 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d907      	bls.n	80015e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e150      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
 80015d8:	40023800 	.word	0x40023800
 80015dc:	42470000 	.word	0x42470000
 80015e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80015e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ea      	bne.n	80015c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8097 	beq.w	800172c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001602:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b7d      	ldr	r3, [pc, #500]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a7c      	ldr	r2, [pc, #496]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b7a      	ldr	r3, [pc, #488]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b77      	ldr	r3, [pc, #476]	; (800180c <HAL_RCC_OscConfig+0x474>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4b74      	ldr	r3, [pc, #464]	; (800180c <HAL_RCC_OscConfig+0x474>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a73      	ldr	r2, [pc, #460]	; (800180c <HAL_RCC_OscConfig+0x474>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff fb97 	bl	8000d78 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7ff fb93 	bl	8000d78 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e10c      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	4b6a      	ldr	r3, [pc, #424]	; (800180c <HAL_RCC_OscConfig+0x474>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x2ea>
 8001674:	4b64      	ldr	r3, [pc, #400]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	4a63      	ldr	r2, [pc, #396]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
 8001680:	e01c      	b.n	80016bc <HAL_RCC_OscConfig+0x324>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x30c>
 800168a:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	4a5e      	ldr	r2, [pc, #376]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6713      	str	r3, [r2, #112]	; 0x70
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	4a5b      	ldr	r2, [pc, #364]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6713      	str	r3, [r2, #112]	; 0x70
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0x324>
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	4a57      	ldr	r2, [pc, #348]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6713      	str	r3, [r2, #112]	; 0x70
 80016b0:	4b55      	ldr	r3, [pc, #340]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4a54      	ldr	r2, [pc, #336]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016b6:	f023 0304 	bic.w	r3, r3, #4
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d015      	beq.n	80016f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fb58 	bl	8000d78 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff fb54 	bl	8000d78 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e0cb      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e2:	4b49      	ldr	r3, [pc, #292]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0ee      	beq.n	80016cc <HAL_RCC_OscConfig+0x334>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff fb42 	bl	8000d78 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff fb3e 	bl	8000d78 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0b5      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170e:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1ee      	bne.n	80016f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a38      	ldr	r2, [pc, #224]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80a1 	beq.w	8001878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b08      	cmp	r3, #8
 8001740:	d05c      	beq.n	80017fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d141      	bne.n	80017ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_RCC_OscConfig+0x478>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fb12 	bl	8000d78 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fb0e 	bl	8000d78 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e087      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	019b      	lsls	r3, r3, #6
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	085b      	lsrs	r3, r3, #1
 800178e:	3b01      	subs	r3, #1
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	061b      	lsls	r3, r3, #24
 800179a:	491b      	ldr	r1, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x478>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fae7 	bl	8000d78 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fae3 	bl	8000d78 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e05c      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x416>
 80017cc:	e054      	b.n	8001878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_RCC_OscConfig+0x478>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fad0 	bl	8000d78 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff facc 	bl	8000d78 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e045      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x444>
 80017fa:	e03d      	b.n	8001878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e038      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000
 8001810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x4ec>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d028      	beq.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d121      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d11a      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800184c:	4293      	cmp	r3, r2
 800184e:	d111      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d107      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0cc      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d90c      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494d      	ldr	r1, [pc, #308]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d044      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d119      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	2b03      	cmp	r3, #3
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e067      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 0203 	bic.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4934      	ldr	r1, [pc, #208]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001978:	f7ff f9fe 	bl	8000d78 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	e00a      	b.n	8001996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7ff f9fa 	bl	8000d78 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e04f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 020c 	and.w	r2, r3, #12
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1eb      	bne.n	8001980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d20c      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e032      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4916      	ldr	r1, [pc, #88]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f821 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	490a      	ldr	r1, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f95e 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08002e7c 	.word	0x08002e7c
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a58:	b094      	sub	sp, #80	; 0x50
 8001a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a60:	2300      	movs	r3, #0
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a64:	2300      	movs	r3, #0
 8001a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a6c:	4b79      	ldr	r3, [pc, #484]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d00d      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x40>
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	f200 80e1 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x34>
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a86:	e0db      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a8c:	e0db      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a92:	e0d8      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a94:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d063      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001abc:	633b      	str	r3, [r7, #48]	; 0x30
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	462b      	mov	r3, r5
 8001aca:	f04f 0000 	mov.w	r0, #0
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	0159      	lsls	r1, r3, #5
 8001ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad8:	0150      	lsls	r0, r2, #5
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4621      	mov	r1, r4
 8001ae0:	1a51      	subs	r1, r2, r1
 8001ae2:	6139      	str	r1, [r7, #16]
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001af8:	4659      	mov	r1, fp
 8001afa:	018b      	lsls	r3, r1, #6
 8001afc:	4651      	mov	r1, sl
 8001afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b02:	4651      	mov	r1, sl
 8001b04:	018a      	lsls	r2, r1, #6
 8001b06:	4651      	mov	r1, sl
 8001b08:	ebb2 0801 	subs.w	r8, r2, r1
 8001b0c:	4659      	mov	r1, fp
 8001b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b26:	4690      	mov	r8, r2
 8001b28:	4699      	mov	r9, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	eb18 0303 	adds.w	r3, r8, r3
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	462b      	mov	r3, r5
 8001b34:	eb49 0303 	adc.w	r3, r9, r3
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b46:	4629      	mov	r1, r5
 8001b48:	024b      	lsls	r3, r1, #9
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b50:	4621      	mov	r1, r4
 8001b52:	024a      	lsls	r2, r1, #9
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b64:	f7fe fc3e 	bl	80003e4 <__aeabi_uldivmod>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b70:	e058      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b82:	623b      	str	r3, [r7, #32]
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
 8001b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	464b      	mov	r3, r9
 8001b90:	f04f 0000 	mov.w	r0, #0
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	0159      	lsls	r1, r3, #5
 8001b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b9e:	0150      	lsls	r0, r2, #5
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4641      	mov	r1, r8
 8001ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001baa:	4649      	mov	r1, r9
 8001bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	00eb      	lsls	r3, r5, #3
 8001bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bda:	00e2      	lsls	r2, r4, #3
 8001bdc:	4614      	mov	r4, r2
 8001bde:	461d      	mov	r5, r3
 8001be0:	4643      	mov	r3, r8
 8001be2:	18e3      	adds	r3, r4, r3
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	464b      	mov	r3, r9
 8001be8:	eb45 0303 	adc.w	r3, r5, r3
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	028b      	lsls	r3, r1, #10
 8001bfe:	4621      	mov	r1, r4
 8001c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c04:	4621      	mov	r1, r4
 8001c06:	028a      	lsls	r2, r1, #10
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	61fa      	str	r2, [r7, #28]
 8001c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c18:	f7fe fbe4 	bl	80003e4 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3750      	adds	r7, #80	; 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	007a1200 	.word	0x007a1200

08001c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e041      	b.n	8001cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe ff3e 	bl	8000b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 fd14 	bl	80026cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e041      	b.n	8001d94 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d106      	bne.n	8001d2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f839 	bl	8001d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	f000 fcc5 	bl	80026cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <HAL_TIM_PWM_Start_IT+0x28>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	e022      	b.n	8001e1e <HAL_TIM_PWM_Start_IT+0x6e>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d109      	bne.n	8001df2 <HAL_TIM_PWM_Start_IT+0x42>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	e015      	b.n	8001e1e <HAL_TIM_PWM_Start_IT+0x6e>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d109      	bne.n	8001e0c <HAL_TIM_PWM_Start_IT+0x5c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e008      	b.n	8001e1e <HAL_TIM_PWM_Start_IT+0x6e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	bf14      	ite	ne
 8001e18:	2301      	movne	r3, #1
 8001e1a:	2300      	moveq	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0c7      	b.n	8001fb6 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d104      	bne.n	8001e36 <HAL_TIM_PWM_Start_IT+0x86>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e34:	e013      	b.n	8001e5e <HAL_TIM_PWM_Start_IT+0xae>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d104      	bne.n	8001e46 <HAL_TIM_PWM_Start_IT+0x96>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e44:	e00b      	b.n	8001e5e <HAL_TIM_PWM_Start_IT+0xae>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d104      	bne.n	8001e56 <HAL_TIM_PWM_Start_IT+0xa6>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e54:	e003      	b.n	8001e5e <HAL_TIM_PWM_Start_IT+0xae>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	d841      	bhi.n	8001ee8 <HAL_TIM_PWM_Start_IT+0x138>
 8001e64:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <HAL_TIM_PWM_Start_IT+0xbc>)
 8001e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6a:	bf00      	nop
 8001e6c:	08001ea1 	.word	0x08001ea1
 8001e70:	08001ee9 	.word	0x08001ee9
 8001e74:	08001ee9 	.word	0x08001ee9
 8001e78:	08001ee9 	.word	0x08001ee9
 8001e7c:	08001eb3 	.word	0x08001eb3
 8001e80:	08001ee9 	.word	0x08001ee9
 8001e84:	08001ee9 	.word	0x08001ee9
 8001e88:	08001ee9 	.word	0x08001ee9
 8001e8c:	08001ec5 	.word	0x08001ec5
 8001e90:	08001ee9 	.word	0x08001ee9
 8001e94:	08001ee9 	.word	0x08001ee9
 8001e98:	08001ee9 	.word	0x08001ee9
 8001e9c:	08001ed7 	.word	0x08001ed7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0202 	orr.w	r2, r2, #2
 8001eae:	60da      	str	r2, [r3, #12]
      break;
 8001eb0:	e01d      	b.n	8001eee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0204 	orr.w	r2, r2, #4
 8001ec0:	60da      	str	r2, [r3, #12]
      break;
 8001ec2:	e014      	b.n	8001eee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	60da      	str	r2, [r3, #12]
      break;
 8001ed4:	e00b      	b.n	8001eee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0210 	orr.w	r2, r2, #16
 8001ee4:	60da      	str	r2, [r3, #12]
      break;
 8001ee6:	e002      	b.n	8001eee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      break;
 8001eec:	bf00      	nop
  }

  if (status == HAL_OK)
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d15f      	bne.n	8001fb4 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fecf 	bl	8002ca0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a2e      	ldr	r2, [pc, #184]	; (8001fc0 <HAL_TIM_PWM_Start_IT+0x210>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_TIM_PWM_Start_IT+0x166>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2c      	ldr	r2, [pc, #176]	; (8001fc4 <HAL_TIM_PWM_Start_IT+0x214>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_PWM_Start_IT+0x16a>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_TIM_PWM_Start_IT+0x16c>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_TIM_PWM_Start_IT+0x210>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d022      	beq.n	8001f80 <HAL_TIM_PWM_Start_IT+0x1d0>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f42:	d01d      	beq.n	8001f80 <HAL_TIM_PWM_Start_IT+0x1d0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_TIM_PWM_Start_IT+0x218>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d018      	beq.n	8001f80 <HAL_TIM_PWM_Start_IT+0x1d0>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_TIM_PWM_Start_IT+0x21c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <HAL_TIM_PWM_Start_IT+0x1d0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_TIM_PWM_Start_IT+0x220>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00e      	beq.n	8001f80 <HAL_TIM_PWM_Start_IT+0x1d0>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_TIM_PWM_Start_IT+0x214>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d009      	beq.n	8001f80 <HAL_TIM_PWM_Start_IT+0x1d0>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_TIM_PWM_Start_IT+0x224>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <HAL_TIM_PWM_Start_IT+0x1d0>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_TIM_PWM_Start_IT+0x228>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d010      	beq.n	8001fb4 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa2:	e007      	b.n	8001fb4 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	40010400 	.word	0x40010400
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40000800 	.word	0x40000800
 8001fd0:	40000c00 	.word	0x40000c00
 8001fd4:	40014000 	.word	0x40014000
 8001fd8:	40001800 	.word	0x40001800

08001fdc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b0c      	cmp	r3, #12
 8001fee:	d841      	bhi.n	8002074 <HAL_TIM_PWM_Stop_IT+0x98>
 8001ff0:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8001ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff6:	bf00      	nop
 8001ff8:	0800202d 	.word	0x0800202d
 8001ffc:	08002075 	.word	0x08002075
 8002000:	08002075 	.word	0x08002075
 8002004:	08002075 	.word	0x08002075
 8002008:	0800203f 	.word	0x0800203f
 800200c:	08002075 	.word	0x08002075
 8002010:	08002075 	.word	0x08002075
 8002014:	08002075 	.word	0x08002075
 8002018:	08002051 	.word	0x08002051
 800201c:	08002075 	.word	0x08002075
 8002020:	08002075 	.word	0x08002075
 8002024:	08002075 	.word	0x08002075
 8002028:	08002063 	.word	0x08002063
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0202 	bic.w	r2, r2, #2
 800203a:	60da      	str	r2, [r3, #12]
      break;
 800203c:	e01d      	b.n	800207a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0204 	bic.w	r2, r2, #4
 800204c:	60da      	str	r2, [r3, #12]
      break;
 800204e:	e014      	b.n	800207a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0208 	bic.w	r2, r2, #8
 800205e:	60da      	str	r2, [r3, #12]
      break;
 8002060:	e00b      	b.n	800207a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0210 	bic.w	r2, r2, #16
 8002070:	60da      	str	r2, [r3, #12]
      break;
 8002072:	e002      	b.n	800207a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	bf00      	nop
  }

  if (status == HAL_OK)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d161      	bne.n	8002144 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	6839      	ldr	r1, [r7, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fe09 	bl	8002ca0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <HAL_TIM_PWM_Stop_IT+0x174>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_TIM_PWM_Stop_IT+0xc6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2d      	ldr	r2, [pc, #180]	; (8002154 <HAL_TIM_PWM_Stop_IT+0x178>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_PWM_Stop_IT+0xca>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_TIM_PWM_Stop_IT+0xcc>
 80020a6:	2300      	movs	r3, #0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d017      	beq.n	80020dc <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6a1a      	ldr	r2, [r3, #32]
 80020b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10f      	bne.n	80020dc <HAL_TIM_PWM_Stop_IT+0x100>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	f240 4344 	movw	r3, #1092	; 0x444
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_PWM_Stop_IT+0x100>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10f      	bne.n	800210c <HAL_TIM_PWM_Stop_IT+0x130>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6a1a      	ldr	r2, [r3, #32]
 80020f2:	f240 4344 	movw	r3, #1092	; 0x444
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_TIM_PWM_Stop_IT+0x130>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d104      	bne.n	800211c <HAL_TIM_PWM_Stop_IT+0x140>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800211a:	e013      	b.n	8002144 <HAL_TIM_PWM_Stop_IT+0x168>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b04      	cmp	r3, #4
 8002120:	d104      	bne.n	800212c <HAL_TIM_PWM_Stop_IT+0x150>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800212a:	e00b      	b.n	8002144 <HAL_TIM_PWM_Stop_IT+0x168>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b08      	cmp	r3, #8
 8002130:	d104      	bne.n	800213c <HAL_TIM_PWM_Stop_IT+0x160>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800213a:	e003      	b.n	8002144 <HAL_TIM_PWM_Stop_IT+0x168>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000
 8002154:	40010400 	.word	0x40010400

08002158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d122      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b02      	cmp	r3, #2
 800217a:	d11b      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0202 	mvn.w	r2, #2
 8002184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fa81 	bl	80026a2 <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fa73 	bl	800268e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7fe fc03 	bl	80009b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d122      	bne.n	8002208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d11b      	bne.n	8002208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0204 	mvn.w	r2, #4
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa57 	bl	80026a2 <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fa49 	bl	800268e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7fe fbd9 	bl	80009b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b08      	cmp	r3, #8
 8002214:	d122      	bne.n	800225c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b08      	cmp	r3, #8
 8002222:	d11b      	bne.n	800225c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0208 	mvn.w	r2, #8
 800222c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2204      	movs	r2, #4
 8002232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fa2d 	bl	80026a2 <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fa1f 	bl	800268e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe fbaf 	bl	80009b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b10      	cmp	r3, #16
 8002268:	d122      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b10      	cmp	r3, #16
 8002276:	d11b      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0210 	mvn.w	r2, #16
 8002280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2208      	movs	r2, #8
 8002286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fa03 	bl	80026a2 <HAL_TIM_IC_CaptureCallback>
 800229c:	e005      	b.n	80022aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f9f5 	bl	800268e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7fe fb85 	bl	80009b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d10e      	bne.n	80022dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d107      	bne.n	80022dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0201 	mvn.w	r2, #1
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f9cf 	bl	800267a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	2b80      	cmp	r3, #128	; 0x80
 80022e8:	d10e      	bne.n	8002308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d107      	bne.n	8002308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fd78 	bl	8002df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b40      	cmp	r3, #64	; 0x40
 8002314:	d10e      	bne.n	8002334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	d107      	bne.n	8002334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800232c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f9c1 	bl	80026b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b20      	cmp	r3, #32
 8002340:	d10e      	bne.n	8002360 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b20      	cmp	r3, #32
 800234e:	d107      	bne.n	8002360 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0220 	mvn.w	r2, #32
 8002358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fd42 	bl	8002de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002382:	2302      	movs	r3, #2
 8002384:	e0ae      	b.n	80024e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b0c      	cmp	r3, #12
 8002392:	f200 809f 	bhi.w	80024d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002396:	a201      	add	r2, pc, #4	; (adr r2, 800239c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	080023d1 	.word	0x080023d1
 80023a0:	080024d5 	.word	0x080024d5
 80023a4:	080024d5 	.word	0x080024d5
 80023a8:	080024d5 	.word	0x080024d5
 80023ac:	08002411 	.word	0x08002411
 80023b0:	080024d5 	.word	0x080024d5
 80023b4:	080024d5 	.word	0x080024d5
 80023b8:	080024d5 	.word	0x080024d5
 80023bc:	08002453 	.word	0x08002453
 80023c0:	080024d5 	.word	0x080024d5
 80023c4:	080024d5 	.word	0x080024d5
 80023c8:	080024d5 	.word	0x080024d5
 80023cc:	08002493 	.word	0x08002493
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fa18 	bl	800280c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0208 	orr.w	r2, r2, #8
 80023ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0204 	bic.w	r2, r2, #4
 80023fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6999      	ldr	r1, [r3, #24]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	619a      	str	r2, [r3, #24]
      break;
 800240e:	e064      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fa68 	bl	80028ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6999      	ldr	r1, [r3, #24]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	021a      	lsls	r2, r3, #8
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	619a      	str	r2, [r3, #24]
      break;
 8002450:	e043      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fabd 	bl	80029d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0208 	orr.w	r2, r2, #8
 800246c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0204 	bic.w	r2, r2, #4
 800247c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69d9      	ldr	r1, [r3, #28]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	61da      	str	r2, [r3, #28]
      break;
 8002490:	e023      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fb11 	bl	8002ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69d9      	ldr	r1, [r3, #28]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	021a      	lsls	r2, r3, #8
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	61da      	str	r2, [r3, #28]
      break;
 80024d2:	e002      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	75fb      	strb	r3, [r7, #23]
      break;
 80024d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_TIM_ConfigClockSource+0x1c>
 8002504:	2302      	movs	r3, #2
 8002506:	e0b4      	b.n	8002672 <HAL_TIM_ConfigClockSource+0x186>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800252e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002540:	d03e      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002546:	f200 8087 	bhi.w	8002658 <HAL_TIM_ConfigClockSource+0x16c>
 800254a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254e:	f000 8086 	beq.w	800265e <HAL_TIM_ConfigClockSource+0x172>
 8002552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002556:	d87f      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x16c>
 8002558:	2b70      	cmp	r3, #112	; 0x70
 800255a:	d01a      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0xa6>
 800255c:	2b70      	cmp	r3, #112	; 0x70
 800255e:	d87b      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x16c>
 8002560:	2b60      	cmp	r3, #96	; 0x60
 8002562:	d050      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x11a>
 8002564:	2b60      	cmp	r3, #96	; 0x60
 8002566:	d877      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x16c>
 8002568:	2b50      	cmp	r3, #80	; 0x50
 800256a:	d03c      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0xfa>
 800256c:	2b50      	cmp	r3, #80	; 0x50
 800256e:	d873      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x16c>
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d058      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x13a>
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	d86f      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x16c>
 8002578:	2b30      	cmp	r3, #48	; 0x30
 800257a:	d064      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x15a>
 800257c:	2b30      	cmp	r3, #48	; 0x30
 800257e:	d86b      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b20      	cmp	r3, #32
 8002582:	d060      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x15a>
 8002584:	2b20      	cmp	r3, #32
 8002586:	d867      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b00      	cmp	r3, #0
 800258a:	d05c      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x15a>
 800258c:	2b10      	cmp	r3, #16
 800258e:	d05a      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x15a>
 8002590:	e062      	b.n	8002658 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f000 fb5d 	bl	8002c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	609a      	str	r2, [r3, #8]
      break;
 80025be:	e04f      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6899      	ldr	r1, [r3, #8]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f000 fb46 	bl	8002c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e2:	609a      	str	r2, [r3, #8]
      break;
 80025e4:	e03c      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f000 faba 	bl	8002b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2150      	movs	r1, #80	; 0x50
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fb13 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 8002604:	e02c      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	461a      	mov	r2, r3
 8002614:	f000 fad9 	bl	8002bca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2160      	movs	r1, #96	; 0x60
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fb03 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 8002624:	e01c      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	461a      	mov	r2, r3
 8002634:	f000 fa9a 	bl	8002b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2140      	movs	r1, #64	; 0x40
 800263e:	4618      	mov	r0, r3
 8002640:	f000 faf3 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 8002644:	e00c      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f000 faea 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 8002656:	e003      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      break;
 800265c:	e000      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800265e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <TIM_Base_SetConfig+0x114>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d013      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ea:	d00f      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a3d      	ldr	r2, [pc, #244]	; (80027e4 <TIM_Base_SetConfig+0x118>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00b      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <TIM_Base_SetConfig+0x11c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3b      	ldr	r2, [pc, #236]	; (80027ec <TIM_Base_SetConfig+0x120>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3a      	ldr	r2, [pc, #232]	; (80027f0 <TIM_Base_SetConfig+0x124>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <TIM_Base_SetConfig+0x114>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02b      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d027      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2c      	ldr	r2, [pc, #176]	; (80027e4 <TIM_Base_SetConfig+0x118>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d023      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2b      	ldr	r2, [pc, #172]	; (80027e8 <TIM_Base_SetConfig+0x11c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <TIM_Base_SetConfig+0x120>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01b      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <TIM_Base_SetConfig+0x124>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d017      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <TIM_Base_SetConfig+0x128>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a27      	ldr	r2, [pc, #156]	; (80027f8 <TIM_Base_SetConfig+0x12c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00f      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a26      	ldr	r2, [pc, #152]	; (80027fc <TIM_Base_SetConfig+0x130>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00b      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a25      	ldr	r2, [pc, #148]	; (8002800 <TIM_Base_SetConfig+0x134>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a24      	ldr	r2, [pc, #144]	; (8002804 <TIM_Base_SetConfig+0x138>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a23      	ldr	r2, [pc, #140]	; (8002808 <TIM_Base_SetConfig+0x13c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <TIM_Base_SetConfig+0x114>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d003      	beq.n	80027c4 <TIM_Base_SetConfig+0xf8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <TIM_Base_SetConfig+0x124>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d103      	bne.n	80027cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	615a      	str	r2, [r3, #20]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800
 80027ec:	40000c00 	.word	0x40000c00
 80027f0:	40010400 	.word	0x40010400
 80027f4:	40014000 	.word	0x40014000
 80027f8:	40014400 	.word	0x40014400
 80027fc:	40014800 	.word	0x40014800
 8002800:	40001800 	.word	0x40001800
 8002804:	40001c00 	.word	0x40001c00
 8002808:	40002000 	.word	0x40002000

0800280c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0201 	bic.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f023 0302 	bic.w	r3, r3, #2
 8002854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a20      	ldr	r2, [pc, #128]	; (80028e4 <TIM_OC1_SetConfig+0xd8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d003      	beq.n	8002870 <TIM_OC1_SetConfig+0x64>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <TIM_OC1_SetConfig+0xdc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d10c      	bne.n	800288a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f023 0308 	bic.w	r3, r3, #8
 8002876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <TIM_OC1_SetConfig+0xd8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_OC1_SetConfig+0x8e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <TIM_OC1_SetConfig+0xdc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d111      	bne.n	80028be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	621a      	str	r2, [r3, #32]
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40010000 	.word	0x40010000
 80028e8:	40010400 	.word	0x40010400

080028ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f023 0210 	bic.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f023 0320 	bic.w	r3, r3, #32
 8002936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <TIM_OC2_SetConfig+0xe4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d003      	beq.n	8002954 <TIM_OC2_SetConfig+0x68>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <TIM_OC2_SetConfig+0xe8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d10d      	bne.n	8002970 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800295a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800296e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <TIM_OC2_SetConfig+0xe4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_OC2_SetConfig+0x94>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <TIM_OC2_SetConfig+0xe8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d113      	bne.n	80029a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800298e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	621a      	str	r2, [r3, #32]
}
 80029c2:	bf00      	nop
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40010000 	.word	0x40010000
 80029d4:	40010400 	.word	0x40010400

080029d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0303 	bic.w	r3, r3, #3
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <TIM_OC3_SetConfig+0xe0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_OC3_SetConfig+0x66>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a20      	ldr	r2, [pc, #128]	; (8002abc <TIM_OC3_SetConfig+0xe4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d10d      	bne.n	8002a5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <TIM_OC3_SetConfig+0xe0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d003      	beq.n	8002a6a <TIM_OC3_SetConfig+0x92>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <TIM_OC3_SetConfig+0xe4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d113      	bne.n	8002a92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	621a      	str	r2, [r3, #32]
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40010400 	.word	0x40010400

08002ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	031b      	lsls	r3, r3, #12
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <TIM_OC4_SetConfig+0xa4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_OC4_SetConfig+0x68>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <TIM_OC4_SetConfig+0xa8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d109      	bne.n	8002b3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	019b      	lsls	r3, r3, #6
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	621a      	str	r2, [r3, #32]
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40010400 	.word	0x40010400

08002b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f023 0201 	bic.w	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f023 030a 	bic.w	r3, r3, #10
 8002ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b087      	sub	sp, #28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0210 	bic.w	r2, r3, #16
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f043 0307 	orr.w	r3, r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	021a      	lsls	r2, r3, #8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1a      	ldr	r2, [r3, #32]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e05a      	b.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d01d      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d018      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1a      	ldr	r2, [pc, #104]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00e      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a18      	ldr	r2, [pc, #96]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d004      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10c      	bne.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800
 8002dd4:	40000c00 	.word	0x40000c00
 8002dd8:	40010400 	.word	0x40010400
 8002ddc:	40014000 	.word	0x40014000
 8002de0:	40001800 	.word	0x40001800

08002de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <__libc_init_array>:
 8002e0c:	b570      	push	{r4, r5, r6, lr}
 8002e0e:	4d0d      	ldr	r5, [pc, #52]	; (8002e44 <__libc_init_array+0x38>)
 8002e10:	4c0d      	ldr	r4, [pc, #52]	; (8002e48 <__libc_init_array+0x3c>)
 8002e12:	1b64      	subs	r4, r4, r5
 8002e14:	10a4      	asrs	r4, r4, #2
 8002e16:	2600      	movs	r6, #0
 8002e18:	42a6      	cmp	r6, r4
 8002e1a:	d109      	bne.n	8002e30 <__libc_init_array+0x24>
 8002e1c:	4d0b      	ldr	r5, [pc, #44]	; (8002e4c <__libc_init_array+0x40>)
 8002e1e:	4c0c      	ldr	r4, [pc, #48]	; (8002e50 <__libc_init_array+0x44>)
 8002e20:	f000 f820 	bl	8002e64 <_init>
 8002e24:	1b64      	subs	r4, r4, r5
 8002e26:	10a4      	asrs	r4, r4, #2
 8002e28:	2600      	movs	r6, #0
 8002e2a:	42a6      	cmp	r6, r4
 8002e2c:	d105      	bne.n	8002e3a <__libc_init_array+0x2e>
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
 8002e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e34:	4798      	blx	r3
 8002e36:	3601      	adds	r6, #1
 8002e38:	e7ee      	b.n	8002e18 <__libc_init_array+0xc>
 8002e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3e:	4798      	blx	r3
 8002e40:	3601      	adds	r6, #1
 8002e42:	e7f2      	b.n	8002e2a <__libc_init_array+0x1e>
 8002e44:	08002e94 	.word	0x08002e94
 8002e48:	08002e94 	.word	0x08002e94
 8002e4c:	08002e94 	.word	0x08002e94
 8002e50:	08002e98 	.word	0x08002e98

08002e54 <memset>:
 8002e54:	4402      	add	r2, r0
 8002e56:	4603      	mov	r3, r0
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <memset+0xa>
 8002e5c:	4770      	bx	lr
 8002e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e62:	e7f9      	b.n	8002e58 <memset+0x4>

08002e64 <_init>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	bf00      	nop
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr

08002e70 <_fini>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	bf00      	nop
 8002e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e76:	bc08      	pop	{r3}
 8002e78:	469e      	mov	lr, r3
 8002e7a:	4770      	bx	lr
