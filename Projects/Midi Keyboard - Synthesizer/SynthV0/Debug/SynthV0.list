
SynthV0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009498  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015e0  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac00  0800ac00  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac00  0800ac00  0001ac00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac08  0800ac08  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac08  0800ac08  0001ac08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac0c  0800ac0c  0001ac0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800ac10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018ce8  200000b0  0800acc0  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018d98  0800acc0  00028d98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015883  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000355d  00000000  00000000  00035963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00038ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023838  00000000  00000000  0003b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a53  00000000  00000000  0005ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b03  00000000  00000000  0007763b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a13e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e8  00000000  00000000  0014a194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009608 	.word	0x08009608

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	08009608 	.word	0x08009608

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96e 	b.w	8000e58 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8083 	bne.w	8000caa <__udivmoddi4+0x116>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d947      	bls.n	8000c3a <__udivmoddi4+0xa6>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b142      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	f1c2 0020 	rsb	r0, r2, #32
 8000bb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	4097      	lsls	r7, r2
 8000bbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bcc:	fa1f fe87 	uxth.w	lr, r7
 8000bd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000be6:	f080 8119 	bcs.w	8000e1c <__udivmoddi4+0x288>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8116 	bls.w	8000e1c <__udivmoddi4+0x288>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	443b      	add	r3, r7
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8105 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f240 8102 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	2600      	movs	r6, #0
 8000c2a:	b11d      	cbz	r5, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c5 4300 	strd	r4, r3, [r5]
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	b902      	cbnz	r2, 8000c3e <__udivmoddi4+0xaa>
 8000c3c:	deff      	udf	#255	; 0xff
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d150      	bne.n	8000ce8 <__udivmoddi4+0x154>
 8000c46:	1bcb      	subs	r3, r1, r7
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	2601      	movs	r6, #1
 8000c52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c56:	0c21      	lsrs	r1, r4, #16
 8000c58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb08 f30c 	mul.w	r3, r8, ip
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0xe2>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	f200 80e9 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x10c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x10a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80d9 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e7bf      	b.n	8000c2a <__udivmoddi4+0x96>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0x12e>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <__udivmoddi4+0x282>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x1cc>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0x140>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80b8 	bhi.w	8000e44 <__udivmoddi4+0x2b0>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0a8      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000ce2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfa:	40d9      	lsrs	r1, r3
 8000cfc:	4330      	orrs	r0, r6
 8000cfe:	0c03      	lsrs	r3, r0, #16
 8000d00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f108 	mul.w	r1, r6, r8
 8000d14:	4299      	cmp	r1, r3
 8000d16:	fa04 f402 	lsl.w	r4, r4, r2
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x19c>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d22:	f080 808d 	bcs.w	8000e40 <__udivmoddi4+0x2ac>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 808a 	bls.w	8000e40 <__udivmoddi4+0x2ac>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	443b      	add	r3, r7
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b281      	uxth	r1, r0
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d40:	fb00 f308 	mul.w	r3, r0, r8
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x1c4>
 8000d48:	1879      	adds	r1, r7, r1
 8000d4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d4e:	d273      	bcs.n	8000e38 <__udivmoddi4+0x2a4>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d971      	bls.n	8000e38 <__udivmoddi4+0x2a4>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4439      	add	r1, r7
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d5e:	e778      	b.n	8000c52 <__udivmoddi4+0xbe>
 8000d60:	f1c6 0c20 	rsb	ip, r6, #32
 8000d64:	fa03 f406 	lsl.w	r4, r3, r6
 8000d68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	0c3b      	lsrs	r3, r7, #16
 8000d82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d86:	fa1f f884 	uxth.w	r8, r4
 8000d8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d92:	fb09 fa08 	mul.w	sl, r9, r8
 8000d96:	458a      	cmp	sl, r1
 8000d98:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x220>
 8000da2:	1861      	adds	r1, r4, r1
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	d248      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000daa:	458a      	cmp	sl, r1
 8000dac:	d946      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000dae:	f1a9 0902 	sub.w	r9, r9, #2
 8000db2:	4421      	add	r1, r4
 8000db4:	eba1 010a 	sub.w	r1, r1, sl
 8000db8:	b2bf      	uxth	r7, r7
 8000dba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dc6:	fb00 f808 	mul.w	r8, r0, r8
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x24a>
 8000dce:	19e7      	adds	r7, r4, r7
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d22e      	bcs.n	8000e34 <__udivmoddi4+0x2a0>
 8000dd6:	45b8      	cmp	r8, r7
 8000dd8:	d92c      	bls.n	8000e34 <__udivmoddi4+0x2a0>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4427      	add	r7, r4
 8000dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de2:	eba7 0708 	sub.w	r7, r7, r8
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	454f      	cmp	r7, r9
 8000dec:	46c6      	mov	lr, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	d31a      	bcc.n	8000e28 <__udivmoddi4+0x294>
 8000df2:	d017      	beq.n	8000e24 <__udivmoddi4+0x290>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x27a>
 8000df6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e02:	40f2      	lsrs	r2, r6
 8000e04:	ea4c 0202 	orr.w	r2, ip, r2
 8000e08:	40f7      	lsrs	r7, r6
 8000e0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e70b      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6fd      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e24:	4543      	cmp	r3, r8
 8000e26:	d2e5      	bcs.n	8000df4 <__udivmoddi4+0x260>
 8000e28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7df      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e7d2      	b.n	8000dde <__udivmoddi4+0x24a>
 8000e38:	4660      	mov	r0, ip
 8000e3a:	e78d      	b.n	8000d58 <__udivmoddi4+0x1c4>
 8000e3c:	4681      	mov	r9, r0
 8000e3e:	e7b9      	b.n	8000db4 <__udivmoddi4+0x220>
 8000e40:	4666      	mov	r6, ip
 8000e42:	e775      	b.n	8000d30 <__udivmoddi4+0x19c>
 8000e44:	4630      	mov	r0, r6
 8000e46:	e74a      	b.n	8000cde <__udivmoddi4+0x14a>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	4439      	add	r1, r7
 8000e4e:	e713      	b.n	8000c78 <__udivmoddi4+0xe4>
 8000e50:	3802      	subs	r0, #2
 8000e52:	443c      	add	r4, r7
 8000e54:	e724      	b.n	8000ca0 <__udivmoddi4+0x10c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e62:	463b      	mov	r3, r7
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e6e:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000e70:	4a22      	ldr	r2, [pc, #136]	; (8000efc <MX_ADC1_Init+0xa0>)
 8000e72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000e76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000e7e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000e82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <MX_ADC1_Init+0xa4>)
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000ec0:	f004 f982 	bl	80051c8 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000eca:	f003 fe35 	bl	8004b38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000ee0:	f004 fb10 	bl	8005504 <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000eea:	f003 fe25 	bl	8004b38 <Error_Handler>
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200185b0 	.word	0x200185b0
 8000efc:	40012000 	.word	0x40012000
 8000f00:	0f000001 	.word	0x0f000001

08000f04 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f18:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <MX_ADC2_Init+0xa0>)
 8000f1a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f22:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_6B;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f26:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000f2a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f48:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <MX_ADC2_Init+0xa4>)
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f68:	f004 f92e 	bl	80051c8 <HAL_ADC_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000f72:	f003 fde1 	bl	8004b38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_ADC2_Init+0x9c>)
 8000f88:	f004 fabc 	bl	8005504 <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000f92:	f003 fdd1 	bl	8004b38 <Error_Handler>
  }

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20018508 	.word	0x20018508
 8000fa4:	40012100 	.word	0x40012100
 8000fa8:	0f000001 	.word	0x0f000001

08000fac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <MX_ADC3_Init+0x9c>)
 8000fc0:	4a22      	ldr	r2, [pc, #136]	; (800104c <MX_ADC3_Init+0xa0>)
 8000fc2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_ADC3_Init+0x9c>)
 8000fc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_6B;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_ADC3_Init+0x9c>)
 8000fce:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000fd2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_ADC3_Init+0x9c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_ADC3_Init+0x9c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_ADC3_Init+0x9c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_ADC3_Init+0x9c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_ADC3_Init+0x9c>)
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <MX_ADC3_Init+0xa4>)
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_ADC3_Init+0x9c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_ADC3_Init+0x9c>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_ADC3_Init+0x9c>)
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_ADC3_Init+0x9c>)
 800100a:	2201      	movs	r2, #1
 800100c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <MX_ADC3_Init+0x9c>)
 8001010:	f004 f8da 	bl	80051c8 <HAL_ADC_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 800101a:	f003 fd8d 	bl	8004b38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800101e:	2302      	movs	r3, #2
 8001020:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_ADC3_Init+0x9c>)
 8001030:	f004 fa68 	bl	8005504 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 800103a:	f003 fd7d 	bl	8004b38 <Error_Handler>
  }

}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200185f8 	.word	0x200185f8
 800104c:	40012200 	.word	0x40012200
 8001050:	0f000001 	.word	0x0f000001

08001054 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	; 0x38
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a8f      	ldr	r2, [pc, #572]	; (80012b0 <HAL_ADC_MspInit+0x25c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d159      	bne.n	800112a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
 800107a:	4b8e      	ldr	r3, [pc, #568]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a8d      	ldr	r2, [pc, #564]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b8b      	ldr	r3, [pc, #556]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	623b      	str	r3, [r7, #32]
 8001090:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	4b87      	ldr	r3, [pc, #540]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a86      	ldr	r2, [pc, #536]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b84      	ldr	r3, [pc, #528]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ae:	2301      	movs	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b2:	2303      	movs	r3, #3
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	487d      	ldr	r0, [pc, #500]	; (80012b8 <HAL_ADC_MspInit+0x264>)
 80010c2:	f005 fde3 	bl	8006c8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010c6:	4b7d      	ldr	r3, [pc, #500]	; (80012bc <HAL_ADC_MspInit+0x268>)
 80010c8:	4a7d      	ldr	r2, [pc, #500]	; (80012c0 <HAL_ADC_MspInit+0x26c>)
 80010ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010cc:	4b7b      	ldr	r3, [pc, #492]	; (80012bc <HAL_ADC_MspInit+0x268>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d2:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <HAL_ADC_MspInit+0x268>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d8:	4b78      	ldr	r3, [pc, #480]	; (80012bc <HAL_ADC_MspInit+0x268>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010de:	4b77      	ldr	r3, [pc, #476]	; (80012bc <HAL_ADC_MspInit+0x268>)
 80010e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010e6:	4b75      	ldr	r3, [pc, #468]	; (80012bc <HAL_ADC_MspInit+0x268>)
 80010e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ee:	4b73      	ldr	r3, [pc, #460]	; (80012bc <HAL_ADC_MspInit+0x268>)
 80010f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010f6:	4b71      	ldr	r3, [pc, #452]	; (80012bc <HAL_ADC_MspInit+0x268>)
 80010f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010fe:	4b6f      	ldr	r3, [pc, #444]	; (80012bc <HAL_ADC_MspInit+0x268>)
 8001100:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001104:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001106:	4b6d      	ldr	r3, [pc, #436]	; (80012bc <HAL_ADC_MspInit+0x268>)
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800110c:	486b      	ldr	r0, [pc, #428]	; (80012bc <HAL_ADC_MspInit+0x268>)
 800110e:	f004 ffcd 	bl	80060ac <HAL_DMA_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001118:	f003 fd0e 	bl	8004b38 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a67      	ldr	r2, [pc, #412]	; (80012bc <HAL_ADC_MspInit+0x268>)
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
 8001122:	4a66      	ldr	r2, [pc, #408]	; (80012bc <HAL_ADC_MspInit+0x268>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001128:	e0bd      	b.n	80012a6 <HAL_ADC_MspInit+0x252>
  else if(adcHandle->Instance==ADC2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a65      	ldr	r2, [pc, #404]	; (80012c4 <HAL_ADC_MspInit+0x270>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d15a      	bne.n	80011ea <HAL_ADC_MspInit+0x196>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	4a5d      	ldr	r2, [pc, #372]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001142:	6453      	str	r3, [r2, #68]	; 0x44
 8001144:	4b5b      	ldr	r3, [pc, #364]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b54      	ldr	r3, [pc, #336]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Osc2_Pin;
 800116c:	2302      	movs	r3, #2
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001170:	2303      	movs	r3, #3
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Osc2_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4619      	mov	r1, r3
 800117e:	484e      	ldr	r0, [pc, #312]	; (80012b8 <HAL_ADC_MspInit+0x264>)
 8001180:	f005 fd84 	bl	8006c8c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001184:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 8001186:	4a51      	ldr	r2, [pc, #324]	; (80012cc <HAL_ADC_MspInit+0x278>)
 8001188:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800118a:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 800118c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001190:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001192:	4b4d      	ldr	r3, [pc, #308]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001198:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800119e:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 80011a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011a6:	4b48      	ldr	r3, [pc, #288]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 80011a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ac:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ae:	4b46      	ldr	r3, [pc, #280]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 80011b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80011b6:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 80011b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011bc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011be:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 80011c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011c4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c6:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011cc:	483e      	ldr	r0, [pc, #248]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 80011ce:	f004 ff6d 	bl	80060ac <HAL_DMA_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_ADC_MspInit+0x188>
      Error_Handler();
 80011d8:	f003 fcae 	bl	8004b38 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a3a      	ldr	r2, [pc, #232]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 80011e0:	639a      	str	r2, [r3, #56]	; 0x38
 80011e2:	4a39      	ldr	r2, [pc, #228]	; (80012c8 <HAL_ADC_MspInit+0x274>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011e8:	e05d      	b.n	80012a6 <HAL_ADC_MspInit+0x252>
  else if(adcHandle->Instance==ADC3)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a38      	ldr	r2, [pc, #224]	; (80012d0 <HAL_ADC_MspInit+0x27c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d158      	bne.n	80012a6 <HAL_ADC_MspInit+0x252>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 80011fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fc:	4a2d      	ldr	r2, [pc, #180]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	6453      	str	r3, [r2, #68]	; 0x44
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a26      	ldr	r2, [pc, #152]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_ADC_MspInit+0x260>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Osc3_Pin;
 800122c:	2304      	movs	r3, #4
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001230:	2303      	movs	r3, #3
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Osc3_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	4619      	mov	r1, r3
 800123e:	481e      	ldr	r0, [pc, #120]	; (80012b8 <HAL_ADC_MspInit+0x264>)
 8001240:	f005 fd24 	bl	8006c8c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 8001246:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_ADC_MspInit+0x284>)
 8001248:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800124a:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 800124c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001250:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 8001260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001264:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 8001268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 8001270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001274:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 8001278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800127c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800128a:	4812      	ldr	r0, [pc, #72]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 800128c:	f004 ff0e 	bl	80060ac <HAL_DMA_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_ADC_MspInit+0x246>
      Error_Handler();
 8001296:	f003 fc4f 	bl	8004b38 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 800129e:	639a      	str	r2, [r3, #56]	; 0x38
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_ADC_MspInit+0x280>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012a6:	bf00      	nop
 80012a8:	3738      	adds	r7, #56	; 0x38
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40012000 	.word	0x40012000
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	20018640 	.word	0x20018640
 80012c0:	40026410 	.word	0x40026410
 80012c4:	40012100 	.word	0x40012100
 80012c8:	200186a0 	.word	0x200186a0
 80012cc:	40026440 	.word	0x40026440
 80012d0:	40012200 	.word	0x40012200
 80012d4:	20018550 	.word	0x20018550
 80012d8:	40026428 	.word	0x40026428

080012dc <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80012e2:	463b      	mov	r3, r7
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_DAC_Init+0x4c>)
 80012ec:	4a0f      	ldr	r2, [pc, #60]	; (800132c <MX_DAC_Init+0x50>)
 80012ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_DAC_Init+0x4c>)
 80012f2:	f004 fcb8 	bl	8005c66 <HAL_DAC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80012fc:	f003 fc1c 	bl	8004b38 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001300:	2324      	movs	r3, #36	; 0x24
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_DAC_Init+0x4c>)
 8001310:	f004 fde7 	bl	8005ee2 <HAL_DAC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800131a:	f003 fc0d 	bl	8004b38 <Error_Handler>
  }

}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20018760 	.word	0x20018760
 800132c:	40007400 	.word	0x40007400

08001330 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a30      	ldr	r2, [pc, #192]	; (8001410 <HAL_DAC_MspInit+0xe0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d159      	bne.n	8001406 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <HAL_DAC_MspInit+0xe4>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a2e      	ldr	r2, [pc, #184]	; (8001414 <HAL_DAC_MspInit+0xe4>)
 800135c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <HAL_DAC_MspInit+0xe4>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <HAL_DAC_MspInit+0xe4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a27      	ldr	r2, [pc, #156]	; (8001414 <HAL_DAC_MspInit+0xe4>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_DAC_MspInit+0xe4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800138a:	2310      	movs	r3, #16
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138e:	2303      	movs	r3, #3
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	481e      	ldr	r0, [pc, #120]	; (8001418 <HAL_DAC_MspInit+0xe8>)
 800139e:	f005 fc75 	bl	8006c8c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_DAC_MspInit+0xf0>)
 80013a6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013aa:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80013ae:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ca:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013da:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013e2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80013ea:	480c      	ldr	r0, [pc, #48]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013ec:	f004 fe5e 	bl	80060ac <HAL_DMA_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80013f6:	f003 fb9f 	bl	8004b38 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_DAC_MspInit+0xec>)
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_DAC_MspInit+0xec>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40007400 	.word	0x40007400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000
 800141c:	20018700 	.word	0x20018700
 8001420:	40026088 	.word	0x40026088

08001424 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream3
  */
void MX_DMA_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <MX_DMA_Init+0x100>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a3c      	ldr	r2, [pc, #240]	; (8001524 <MX_DMA_Init+0x100>)
 8001434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <MX_DMA_Init+0x100>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b36      	ldr	r3, [pc, #216]	; (8001524 <MX_DMA_Init+0x100>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a35      	ldr	r2, [pc, #212]	; (8001524 <MX_DMA_Init+0x100>)
 8001450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b33      	ldr	r3, [pc, #204]	; (8001524 <MX_DMA_Init+0x100>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 8001462:	4b31      	ldr	r3, [pc, #196]	; (8001528 <MX_DMA_Init+0x104>)
 8001464:	4a31      	ldr	r2, [pc, #196]	; (800152c <MX_DMA_Init+0x108>)
 8001466:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Channel = DMA_CHANNEL_0;
 8001468:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <MX_DMA_Init+0x104>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <MX_DMA_Init+0x104>)
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001474:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <MX_DMA_Init+0x104>)
 8001476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <MX_DMA_Init+0x104>)
 800147e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001482:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_DMA_Init+0x104>)
 8001486:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800148a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_DMA_Init+0x104>)
 800148e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001492:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_DMA_Init+0x104>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_HIGH;
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_DMA_Init+0x104>)
 800149c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014a0:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <MX_DMA_Init+0x104>)
 80014a4:	2204      	movs	r2, #4
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_DMA_Init+0x104>)
 80014aa:	2203      	movs	r2, #3
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_DMA_Init+0x104>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_DMA_Init+0x104>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 80014ba:	481b      	ldr	r0, [pc, #108]	; (8001528 <MX_DMA_Init+0x104>)
 80014bc:	f004 fdf6 	bl	80060ac <HAL_DMA_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_DMA_Init+0xa6>
  {
    Error_Handler();
 80014c6:	f003 fb37 	bl	8004b38 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	200f      	movs	r0, #15
 80014d0:	f004 fb93 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80014d4:	200f      	movs	r0, #15
 80014d6:	f004 fbac 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2010      	movs	r0, #16
 80014e0:	f004 fb8b 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014e4:	2010      	movs	r0, #16
 80014e6:	f004 fba4 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2038      	movs	r0, #56	; 0x38
 80014f0:	f004 fb83 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014f4:	2038      	movs	r0, #56	; 0x38
 80014f6:	f004 fb9c 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2039      	movs	r0, #57	; 0x39
 8001500:	f004 fb7b 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001504:	2039      	movs	r0, #57	; 0x39
 8001506:	f004 fb94 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	203a      	movs	r0, #58	; 0x3a
 8001510:	f004 fb73 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001514:	203a      	movs	r0, #58	; 0x3a
 8001516:	f004 fb8c 	bl	8005c32 <HAL_NVIC_EnableIRQ>

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	20018774 	.word	0x20018774
 800152c:	40026458 	.word	0x40026458

08001530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	4b48      	ldr	r3, [pc, #288]	; (800166c <MX_GPIO_Init+0x13c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a47      	ldr	r2, [pc, #284]	; (800166c <MX_GPIO_Init+0x13c>)
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b45      	ldr	r3, [pc, #276]	; (800166c <MX_GPIO_Init+0x13c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <MX_GPIO_Init+0x13c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a40      	ldr	r2, [pc, #256]	; (800166c <MX_GPIO_Init+0x13c>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b3e      	ldr	r3, [pc, #248]	; (800166c <MX_GPIO_Init+0x13c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <MX_GPIO_Init+0x13c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a39      	ldr	r2, [pc, #228]	; (800166c <MX_GPIO_Init+0x13c>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <MX_GPIO_Init+0x13c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b33      	ldr	r3, [pc, #204]	; (800166c <MX_GPIO_Init+0x13c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a32      	ldr	r2, [pc, #200]	; (800166c <MX_GPIO_Init+0x13c>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b30      	ldr	r3, [pc, #192]	; (800166c <MX_GPIO_Init+0x13c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b2c      	ldr	r3, [pc, #176]	; (800166c <MX_GPIO_Init+0x13c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a2b      	ldr	r2, [pc, #172]	; (800166c <MX_GPIO_Init+0x13c>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b29      	ldr	r3, [pc, #164]	; (800166c <MX_GPIO_Init+0x13c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <MX_GPIO_Init+0x13c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a24      	ldr	r2, [pc, #144]	; (800166c <MX_GPIO_Init+0x13c>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <MX_GPIO_Init+0x13c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_GreenLed_Pin|LD3_OrangeLed_Pin|LD5_RedLed_Pin|LD6_BlueLed_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80015f4:	481e      	ldr	r0, [pc, #120]	; (8001670 <MX_GPIO_Init+0x140>)
 80015f6:	f005 fcfd 	bl	8006ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = B4_Pin|B3_Pin|B2_Pin|B1_Pin
 80015fa:	f643 73bf 	movw	r3, #16319	; 0x3fbf
 80015fe:	61fb      	str	r3, [r7, #28]
                          |BOsc1_Pin|BOsc2_Pin|BOsc3_Pin|BGauche_Pin
                          |BDroite_Pin|BOui_Pin|BNon_Pin|B6_Pin
                          |B5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001604:	2302      	movs	r3, #2
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	4619      	mov	r1, r3
 800160e:	4819      	ldr	r0, [pc, #100]	; (8001674 <MX_GPIO_Init+0x144>)
 8001610:	f005 fb3c 	bl	8006c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_GreenLed_Pin|LD3_OrangeLed_Pin|LD5_RedLed_Pin|LD6_BlueLed_Pin;
 8001614:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	4810      	ldr	r0, [pc, #64]	; (8001670 <MX_GPIO_Init+0x140>)
 800162e:	f005 fb2d 	bl	8006c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = B8_Pin|B14_Pin|B16_Pin|B15_Pin
 8001632:	23de      	movs	r3, #222	; 0xde
 8001634:	61fb      	str	r3, [r7, #28]
                          |B13_Pin|B12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800163a:	2302      	movs	r3, #2
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	480a      	ldr	r0, [pc, #40]	; (8001670 <MX_GPIO_Init+0x140>)
 8001646:	f005 fb21 	bl	8006c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = B11_Pin|B10_Pin|B9_Pin|B7_Pin;
 800164a:	23b8      	movs	r3, #184	; 0xb8
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001652:	2302      	movs	r3, #2
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4806      	ldr	r0, [pc, #24]	; (8001678 <MX_GPIO_Init+0x148>)
 800165e:	f005 fb15 	bl	8006c8c <HAL_GPIO_Init>

}
 8001662:	bf00      	nop
 8001664:	3730      	adds	r7, #48	; 0x30
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40020c00 	.word	0x40020c00
 8001674:	40021000 	.word	0x40021000
 8001678:	40020400 	.word	0x40020400

0800167c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af02      	add	r7, sp, #8
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f023 030f 	bic.w	r3, r3, #15
 800168c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	f043 030c 	orr.w	r3, r3, #12
 800169a:	b2db      	uxtb	r3, r3
 800169c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	f043 030c 	orr.w	r3, r3, #12
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	f043 0308 	orr.w	r3, r3, #8
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016bc:	f107 0208 	add.w	r2, r7, #8
 80016c0:	2364      	movs	r3, #100	; 0x64
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2304      	movs	r3, #4
 80016c6:	214e      	movs	r1, #78	; 0x4e
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <lcd_send_cmd+0x5c>)
 80016ca:	f005 fdf1 	bl	80072b0 <HAL_I2C_Master_Transmit>
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200187d4 	.word	0x200187d4

080016dc <lcd_send_data>:

void lcd_send_data (char data)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f023 030f 	bic.w	r3, r3, #15
 80016ec:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	f043 030d 	orr.w	r3, r3, #13
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f043 0309 	orr.w	r3, r3, #9
 8001704:	b2db      	uxtb	r3, r3
 8001706:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001708:	7bbb      	ldrb	r3, [r7, #14]
 800170a:	f043 030d 	orr.w	r3, r3, #13
 800170e:	b2db      	uxtb	r3, r3
 8001710:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001712:	7bbb      	ldrb	r3, [r7, #14]
 8001714:	f043 0309 	orr.w	r3, r3, #9
 8001718:	b2db      	uxtb	r3, r3
 800171a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800171c:	f107 0208 	add.w	r2, r7, #8
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2304      	movs	r3, #4
 8001726:	214e      	movs	r1, #78	; 0x4e
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <lcd_send_data+0x5c>)
 800172a:	f005 fdc1 	bl	80072b0 <HAL_I2C_Master_Transmit>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200187d4 	.word	0x200187d4

0800173c <lcd_clear>:

void lcd_clear (void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001742:	2080      	movs	r0, #128	; 0x80
 8001744:	f7ff ff9a 	bl	800167c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	e005      	b.n	800175a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800174e:	2020      	movs	r0, #32
 8001750:	f7ff ffc4 	bl	80016dc <lcd_send_data>
	for (int i=0; i<70; i++)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3301      	adds	r3, #1
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b45      	cmp	r3, #69	; 0x45
 800175e:	ddf6      	ble.n	800174e <lcd_clear+0x12>
	}
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
    switch (row)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <lcd_put_cur+0x18>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d005      	beq.n	800178c <lcd_put_cur+0x22>
 8001780:	e009      	b.n	8001796 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001788:	603b      	str	r3, [r7, #0]
            break;
 800178a:	e004      	b.n	8001796 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001792:	603b      	str	r3, [r7, #0]
            break;
 8001794:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff6e 	bl	800167c <lcd_send_cmd>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <lcd_init>:


void lcd_init (void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80017ac:	2032      	movs	r0, #50	; 0x32
 80017ae:	f003 fce7 	bl	8005180 <HAL_Delay>
	lcd_send_cmd (0x30);
 80017b2:	2030      	movs	r0, #48	; 0x30
 80017b4:	f7ff ff62 	bl	800167c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80017b8:	2005      	movs	r0, #5
 80017ba:	f003 fce1 	bl	8005180 <HAL_Delay>
	lcd_send_cmd (0x30);
 80017be:	2030      	movs	r0, #48	; 0x30
 80017c0:	f7ff ff5c 	bl	800167c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80017c4:	2001      	movs	r0, #1
 80017c6:	f003 fcdb 	bl	8005180 <HAL_Delay>
	lcd_send_cmd (0x30);
 80017ca:	2030      	movs	r0, #48	; 0x30
 80017cc:	f7ff ff56 	bl	800167c <lcd_send_cmd>
	HAL_Delay(10);
 80017d0:	200a      	movs	r0, #10
 80017d2:	f003 fcd5 	bl	8005180 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80017d6:	2020      	movs	r0, #32
 80017d8:	f7ff ff50 	bl	800167c <lcd_send_cmd>
	HAL_Delay(10);
 80017dc:	200a      	movs	r0, #10
 80017de:	f003 fccf 	bl	8005180 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80017e2:	2028      	movs	r0, #40	; 0x28
 80017e4:	f7ff ff4a 	bl	800167c <lcd_send_cmd>
	HAL_Delay(1);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f003 fcc9 	bl	8005180 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80017ee:	2008      	movs	r0, #8
 80017f0:	f7ff ff44 	bl	800167c <lcd_send_cmd>
	HAL_Delay(1);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f003 fcc3 	bl	8005180 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff ff3e 	bl	800167c <lcd_send_cmd>
	HAL_Delay(1);
 8001800:	2001      	movs	r0, #1
 8001802:	f003 fcbd 	bl	8005180 <HAL_Delay>
	HAL_Delay(1);
 8001806:	2001      	movs	r0, #1
 8001808:	f003 fcba 	bl	8005180 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800180c:	2006      	movs	r0, #6
 800180e:	f7ff ff35 	bl	800167c <lcd_send_cmd>
	HAL_Delay(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f003 fcb4 	bl	8005180 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001818:	200c      	movs	r0, #12
 800181a:	f7ff ff2f 	bl	800167c <lcd_send_cmd>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}

08001822 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800182a:	e006      	b.n	800183a <lcd_send_string+0x18>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff51 	bl	80016dc <lcd_send_data>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f4      	bne.n	800182c <lcd_send_string+0xa>
}
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_I2C1_Init+0x50>)
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <MX_I2C1_Init+0x54>)
 8001854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_I2C1_Init+0x50>)
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <MX_I2C1_Init+0x58>)
 800185a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_I2C1_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_I2C1_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_I2C1_Init+0x50>)
 800186a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <MX_I2C1_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_I2C1_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <MX_I2C1_Init+0x50>)
 800188a:	f005 fbcd 	bl	8007028 <HAL_I2C_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001894:	f003 f950 	bl	8004b38 <Error_Handler>
  }

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200187d4 	.word	0x200187d4
 80018a0:	40005400 	.word	0x40005400
 80018a4:	000186a0 	.word	0x000186a0

080018a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a19      	ldr	r2, [pc, #100]	; (800192c <HAL_I2C_MspInit+0x84>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d12c      	bne.n	8001924 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_I2C_MspInit+0x88>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_I2C_MspInit+0x88>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_I2C_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ec:	2312      	movs	r3, #18
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f8:	2304      	movs	r3, #4
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	480c      	ldr	r0, [pc, #48]	; (8001934 <HAL_I2C_MspInit+0x8c>)
 8001904:	f005 f9c2 	bl	8006c8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_I2C_MspInit+0x88>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_I2C_MspInit+0x88>)
 8001912:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_I2C_MspInit+0x88>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	; 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40005400 	.word	0x40005400
 8001930:	40023800 	.word	0x40023800
 8001934:	40020400 	.word	0x40020400

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193e:	f003 fbad 	bl	800509c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001942:	f000 fdd7 	bl	80024f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001946:	f7ff fdf3 	bl	8001530 <MX_GPIO_Init>
  MX_DMA_Init();
 800194a:	f7ff fd6b 	bl	8001424 <MX_DMA_Init>
  MX_ADC1_Init();
 800194e:	f7ff fa85 	bl	8000e5c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001952:	f7ff fad7 	bl	8000f04 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001956:	f7ff fb29 	bl	8000fac <MX_ADC3_Init>
  MX_DAC_Init();
 800195a:	f7ff fcbf 	bl	80012dc <MX_DAC_Init>
  MX_TIM2_Init();
 800195e:	f003 f99b 	bl	8004c98 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001962:	f7ff ff73 	bl	800184c <MX_I2C1_Init>
  MX_UART4_Init();
 8001966:	f003 fac1 	bl	8004eec <MX_UART4_Init>
  MX_TIM6_Init();
 800196a:	f003 f9e1 	bl	8004d30 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800196e:	f7ff ff1b 	bl	80017a8 <lcd_init>
  lcd_clear();
 8001972:	f7ff fee3 	bl	800173c <lcd_clear>
  lcd_put_cur(0,0);
 8001976:	2100      	movs	r1, #0
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fef6 	bl	800176a <lcd_put_cur>
  lcd_send_string(&"   Synth V0.4   ");
 800197e:	48b5      	ldr	r0, [pc, #724]	; (8001c54 <main+0x31c>)
 8001980:	f7ff ff4f 	bl	8001822 <lcd_send_string>
  HAL_Delay(2000);
 8001984:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001988:	f003 fbfa 	bl	8005180 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adc1, 32);
 800198c:	2220      	movs	r2, #32
 800198e:	49b2      	ldr	r1, [pc, #712]	; (8001c58 <main+0x320>)
 8001990:	48b2      	ldr	r0, [pc, #712]	; (8001c5c <main+0x324>)
 8001992:	f003 fc5d 	bl	8005250 <HAL_ADC_Start_DMA>
  adc1[1]=adc1[0];
 8001996:	4bb0      	ldr	r3, [pc, #704]	; (8001c58 <main+0x320>)
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	4baf      	ldr	r3, [pc, #700]	; (8001c58 <main+0x320>)
 800199c:	805a      	strh	r2, [r3, #2]
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*) adc2, 32);
 800199e:	2220      	movs	r2, #32
 80019a0:	49af      	ldr	r1, [pc, #700]	; (8001c60 <main+0x328>)
 80019a2:	48b0      	ldr	r0, [pc, #704]	; (8001c64 <main+0x32c>)
 80019a4:	f003 fc54 	bl	8005250 <HAL_ADC_Start_DMA>
  adc2[1]=adc2[0];
 80019a8:	4bad      	ldr	r3, [pc, #692]	; (8001c60 <main+0x328>)
 80019aa:	881a      	ldrh	r2, [r3, #0]
 80019ac:	4bac      	ldr	r3, [pc, #688]	; (8001c60 <main+0x328>)
 80019ae:	805a      	strh	r2, [r3, #2]
  HAL_ADC_Start_DMA(&hadc3,(uint32_t*) adc3, 32);
 80019b0:	2220      	movs	r2, #32
 80019b2:	49ad      	ldr	r1, [pc, #692]	; (8001c68 <main+0x330>)
 80019b4:	48ad      	ldr	r0, [pc, #692]	; (8001c6c <main+0x334>)
 80019b6:	f003 fc4b 	bl	8005250 <HAL_ADC_Start_DMA>
  adc3[1]=adc3[0];
 80019ba:	4bab      	ldr	r3, [pc, #684]	; (8001c68 <main+0x330>)
 80019bc:	881a      	ldrh	r2, [r3, #0]
 80019be:	4baa      	ldr	r3, [pc, #680]	; (8001c68 <main+0x330>)
 80019c0:	805a      	strh	r2, [r3, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(mode==0)
 80019c2:	4bab      	ldr	r3, [pc, #684]	; (8001c70 <main+0x338>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d149      	bne.n	8001a5e <main+0x126>
	  {
		  lcd_clear();
 80019ca:	f7ff feb7 	bl	800173c <lcd_clear>
		  lcd_put_cur(0, 0);
 80019ce:	2100      	movs	r1, #0
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff feca 	bl	800176a <lcd_put_cur>
		  lcd_send_string(&"BG : MIDI Mode");
 80019d6:	48a7      	ldr	r0, [pc, #668]	; (8001c74 <main+0x33c>)
 80019d8:	f7ff ff23 	bl	8001822 <lcd_send_string>
		  lcd_put_cur(1,0);
 80019dc:	2100      	movs	r1, #0
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff fec3 	bl	800176a <lcd_put_cur>
		  lcd_send_string(&"BD : SYNTH Mode");
 80019e4:	48a4      	ldr	r0, [pc, #656]	; (8001c78 <main+0x340>)
 80019e6:	f7ff ff1c 	bl	8001822 <lcd_send_string>
		  while((HAL_GPIO_ReadPin(BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_RESET)){}
 80019ea:	bf00      	nop
 80019ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019f0:	48a2      	ldr	r0, [pc, #648]	; (8001c7c <main+0x344>)
 80019f2:	f005 fae7 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d107      	bne.n	8001a0c <main+0xd4>
 80019fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a00:	489e      	ldr	r0, [pc, #632]	; (8001c7c <main+0x344>)
 8001a02:	f005 fadf 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0ef      	beq.n	80019ec <main+0xb4>
		  if(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET)
 8001a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a10:	489a      	ldr	r0, [pc, #616]	; (8001c7c <main+0x344>)
 8001a12:	f005 fad7 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d10b      	bne.n	8001a34 <main+0xfc>
		  {
			  while(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET){}
 8001a1c:	bf00      	nop
 8001a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a22:	4896      	ldr	r0, [pc, #600]	; (8001c7c <main+0x344>)
 8001a24:	f005 face 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d0f7      	beq.n	8001a1e <main+0xe6>
			  mode=1;
 8001a2e:	4b90      	ldr	r3, [pc, #576]	; (8001c70 <main+0x338>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
		  }
		  if(HAL_GPIO_ReadPin(BDroite_GPIO_Port,BDroite_Pin)==GPIO_PIN_SET)
 8001a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a38:	4890      	ldr	r0, [pc, #576]	; (8001c7c <main+0x344>)
 8001a3a:	f005 fac3 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d1be      	bne.n	80019c2 <main+0x8a>
		  {
			  while(HAL_GPIO_ReadPin(BDroite_GPIO_Port,BDroite_Pin)==GPIO_PIN_SET){}
 8001a44:	bf00      	nop
 8001a46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a4a:	488c      	ldr	r0, [pc, #560]	; (8001c7c <main+0x344>)
 8001a4c:	f005 faba 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d0f7      	beq.n	8001a46 <main+0x10e>
			  mode=2;
 8001a56:	4b86      	ldr	r3, [pc, #536]	; (8001c70 <main+0x338>)
 8001a58:	2202      	movs	r2, #2
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e7b1      	b.n	80019c2 <main+0x8a>
		  }
	  }
	  else if(mode==1)
 8001a5e:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <main+0x338>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	f040 843e 	bne.w	80022e4 <main+0x9ac>
	  {
		  lcd_clear();
 8001a68:	f7ff fe68 	bl	800173c <lcd_clear>
		  if(MidiMode==0)
 8001a6c:	4b84      	ldr	r3, [pc, #528]	; (8001c80 <main+0x348>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 808e 	bne.w	8001b92 <main+0x25a>
		  {
			  lcd_put_cur(0, 0);
 8001a76:	2100      	movs	r1, #0
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fe76 	bl	800176a <lcd_put_cur>
			  lcd_send_string(&"Octave:");
 8001a7e:	4881      	ldr	r0, [pc, #516]	; (8001c84 <main+0x34c>)
 8001a80:	f7ff fecf 	bl	8001822 <lcd_send_string>
			  lcd_put_cur(1,0);
 8001a84:	2100      	movs	r1, #0
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7ff fe6f 	bl	800176a <lcd_put_cur>
			  itoa(Octave,Octaves,10);
 8001a8c:	4b7e      	ldr	r3, [pc, #504]	; (8001c88 <main+0x350>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	220a      	movs	r2, #10
 8001a92:	497e      	ldr	r1, [pc, #504]	; (8001c8c <main+0x354>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f007 fd6b 	bl	8009570 <itoa>
			  lcd_send_string(&Octaves);
 8001a9a:	487c      	ldr	r0, [pc, #496]	; (8001c8c <main+0x354>)
 8001a9c:	f7ff fec1 	bl	8001822 <lcd_send_string>
			  if(HAL_GPIO_ReadPin(BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_SET)
 8001aa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa4:	4875      	ldr	r0, [pc, #468]	; (8001c7c <main+0x344>)
 8001aa6:	f005 fa8d 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d12e      	bne.n	8001b0e <main+0x1d6>
			  {
				  while((BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_SET){}
 8001ab0:	bf00      	nop
				  OctavePred=Octave;
 8001ab2:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <main+0x350>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a76      	ldr	r2, [pc, #472]	; (8001c90 <main+0x358>)
 8001ab8:	6013      	str	r3, [r2, #0]
				  Octave++;
 8001aba:	4b73      	ldr	r3, [pc, #460]	; (8001c88 <main+0x350>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <main+0x350>)
 8001ac2:	6013      	str	r3, [r2, #0]
				  if (Octave>OctavePred)
 8001ac4:	4b70      	ldr	r3, [pc, #448]	; (8001c88 <main+0x350>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b71      	ldr	r3, [pc, #452]	; (8001c90 <main+0x358>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dd1e      	ble.n	8001b0e <main+0x1d6>
				  {
					  for(int i=0;i<17;i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e018      	b.n	8001b08 <main+0x1d0>
					  {
					 	NoteChrom[i]=NoteChrom[i]+12;
 8001ad6:	4a6f      	ldr	r2, [pc, #444]	; (8001c94 <main+0x35c>)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	330c      	adds	r3, #12
 8001ae0:	b2d9      	uxtb	r1, r3
 8001ae2:	4a6c      	ldr	r2, [pc, #432]	; (8001c94 <main+0x35c>)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	460a      	mov	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
					 	NoteOrg[i]=NoteOrg[i]+12;
 8001aec:	4a6a      	ldr	r2, [pc, #424]	; (8001c98 <main+0x360>)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	330c      	adds	r3, #12
 8001af6:	b2d9      	uxtb	r1, r3
 8001af8:	4a67      	ldr	r2, [pc, #412]	; (8001c98 <main+0x360>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	4413      	add	r3, r2
 8001afe:	460a      	mov	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
					  for(int i=0;i<17;i++)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3301      	adds	r3, #1
 8001b06:	61fb      	str	r3, [r7, #28]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	dde3      	ble.n	8001ad6 <main+0x19e>
					  }
				  }
			  }
			  if(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET)
 8001b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b12:	485a      	ldr	r0, [pc, #360]	; (8001c7c <main+0x344>)
 8001b14:	f005 fa56 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	f040 8335 	bne.w	800218a <main+0x852>
			  {
				  while(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET){}
 8001b20:	bf00      	nop
 8001b22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b26:	4855      	ldr	r0, [pc, #340]	; (8001c7c <main+0x344>)
 8001b28:	f005 fa4c 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d0f7      	beq.n	8001b22 <main+0x1ea>
				  OctavePred=Octave;
 8001b32:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <main+0x350>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a56      	ldr	r2, [pc, #344]	; (8001c90 <main+0x358>)
 8001b38:	6013      	str	r3, [r2, #0]
				  Octave--;
 8001b3a:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <main+0x350>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	4a51      	ldr	r2, [pc, #324]	; (8001c88 <main+0x350>)
 8001b42:	6013      	str	r3, [r2, #0]
				  if (Octave<OctavePred)
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <main+0x350>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b51      	ldr	r3, [pc, #324]	; (8001c90 <main+0x358>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f280 831c 	bge.w	800218a <main+0x852>
				  {
					  for(int i=0;i<17;i++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	e018      	b.n	8001b8a <main+0x252>
					  {
					 	NoteChrom[i]=NoteChrom[i]-12;
 8001b58:	4a4e      	ldr	r2, [pc, #312]	; (8001c94 <main+0x35c>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	3b0c      	subs	r3, #12
 8001b62:	b2d9      	uxtb	r1, r3
 8001b64:	4a4b      	ldr	r2, [pc, #300]	; (8001c94 <main+0x35c>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4413      	add	r3, r2
 8001b6a:	460a      	mov	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
					 	NoteOrg[i]=NoteOrg[i]-12;
 8001b6e:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <main+0x360>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	4413      	add	r3, r2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	3b0c      	subs	r3, #12
 8001b78:	b2d9      	uxtb	r1, r3
 8001b7a:	4a47      	ldr	r2, [pc, #284]	; (8001c98 <main+0x360>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4413      	add	r3, r2
 8001b80:	460a      	mov	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
					  for(int i=0;i<17;i++)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	dde3      	ble.n	8001b58 <main+0x220>
 8001b90:	e2fb      	b.n	800218a <main+0x852>
					  }
				  }
			  }
		  }
		  else if(MidiMode==1)
 8001b92:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <main+0x348>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	f040 8175 	bne.w	8001e86 <main+0x54e>
		  {
			  lcd_put_cur(0, 0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff fde3 	bl	800176a <lcd_put_cur>
			  lcd_send_string(&"Mode Chr");
 8001ba4:	483d      	ldr	r0, [pc, #244]	; (8001c9c <main+0x364>)
 8001ba6:	f7ff fe3c 	bl	8001822 <lcd_send_string>
			  lcd_put_cur(1, 0);
 8001baa:	2100      	movs	r1, #0
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7ff fddc 	bl	800176a <lcd_put_cur>
			  if(Tonique>=0)
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <main+0x368>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f2c0 8096 	blt.w	8001ce8 <main+0x3b0>
			  {
				  switch(Tonique%12)
 8001bbc:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <main+0x368>)
 8001bbe:	6819      	ldr	r1, [r3, #0]
 8001bc0:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <main+0x36c>)
 8001bc2:	fb83 2301 	smull	r2, r3, r3, r1
 8001bc6:	105a      	asrs	r2, r3, #1
 8001bc8:	17cb      	asrs	r3, r1, #31
 8001bca:	1ad2      	subs	r2, r2, r3
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	1aca      	subs	r2, r1, r3
 8001bd6:	2a0b      	cmp	r2, #11
 8001bd8:	f200 80e2 	bhi.w	8001da0 <main+0x468>
 8001bdc:	a301      	add	r3, pc, #4	; (adr r3, 8001be4 <main+0x2ac>)
 8001bde:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001c15 	.word	0x08001c15
 8001be8:	08001c1d 	.word	0x08001c1d
 8001bec:	08001c25 	.word	0x08001c25
 8001bf0:	08001c2d 	.word	0x08001c2d
 8001bf4:	08001c35 	.word	0x08001c35
 8001bf8:	08001c3d 	.word	0x08001c3d
 8001bfc:	08001c45 	.word	0x08001c45
 8001c00:	08001c4d 	.word	0x08001c4d
 8001c04:	08001cc9 	.word	0x08001cc9
 8001c08:	08001cd1 	.word	0x08001cd1
 8001c0c:	08001cd9 	.word	0x08001cd9
 8001c10:	08001ce1 	.word	0x08001ce1
				  {
				  case 0:lcd_send_string(&"A");break;
 8001c14:	4824      	ldr	r0, [pc, #144]	; (8001ca8 <main+0x370>)
 8001c16:	f7ff fe04 	bl	8001822 <lcd_send_string>
 8001c1a:	e0c1      	b.n	8001da0 <main+0x468>
				  case 1:lcd_send_string(&"A#");break;
 8001c1c:	4823      	ldr	r0, [pc, #140]	; (8001cac <main+0x374>)
 8001c1e:	f7ff fe00 	bl	8001822 <lcd_send_string>
 8001c22:	e0bd      	b.n	8001da0 <main+0x468>
				  case 2:lcd_send_string(&"B");break;
 8001c24:	4822      	ldr	r0, [pc, #136]	; (8001cb0 <main+0x378>)
 8001c26:	f7ff fdfc 	bl	8001822 <lcd_send_string>
 8001c2a:	e0b9      	b.n	8001da0 <main+0x468>
				  case 3:lcd_send_string(&"C");break;
 8001c2c:	4821      	ldr	r0, [pc, #132]	; (8001cb4 <main+0x37c>)
 8001c2e:	f7ff fdf8 	bl	8001822 <lcd_send_string>
 8001c32:	e0b5      	b.n	8001da0 <main+0x468>
				  case 4:lcd_send_string(&"C#");break;
 8001c34:	4820      	ldr	r0, [pc, #128]	; (8001cb8 <main+0x380>)
 8001c36:	f7ff fdf4 	bl	8001822 <lcd_send_string>
 8001c3a:	e0b1      	b.n	8001da0 <main+0x468>
				  case 5:lcd_send_string(&"D");break;
 8001c3c:	481f      	ldr	r0, [pc, #124]	; (8001cbc <main+0x384>)
 8001c3e:	f7ff fdf0 	bl	8001822 <lcd_send_string>
 8001c42:	e0ad      	b.n	8001da0 <main+0x468>
				  case 6:lcd_send_string(&"D#");break;
 8001c44:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <main+0x388>)
 8001c46:	f7ff fdec 	bl	8001822 <lcd_send_string>
 8001c4a:	e0a9      	b.n	8001da0 <main+0x468>
				  case 7:lcd_send_string(&"E");break;
 8001c4c:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <main+0x38c>)
 8001c4e:	f7ff fde8 	bl	8001822 <lcd_send_string>
 8001c52:	e0a5      	b.n	8001da0 <main+0x468>
 8001c54:	08009620 	.word	0x08009620
 8001c58:	20000080 	.word	0x20000080
 8001c5c:	200185b0 	.word	0x200185b0
 8001c60:	20000084 	.word	0x20000084
 8001c64:	20018508 	.word	0x20018508
 8001c68:	20000088 	.word	0x20000088
 8001c6c:	200185f8 	.word	0x200185f8
 8001c70:	200184f4 	.word	0x200184f4
 8001c74:	08009634 	.word	0x08009634
 8001c78:	08009644 	.word	0x08009644
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	20018504 	.word	0x20018504
 8001c84:	08009654 	.word	0x08009654
 8001c88:	200184e4 	.word	0x200184e4
 8001c8c:	20018c50 	.word	0x20018c50
 8001c90:	200184e8 	.word	0x200184e8
 8001c94:	20000058 	.word	0x20000058
 8001c98:	2000006c 	.word	0x2000006c
 8001c9c:	0800965c 	.word	0x0800965c
 8001ca0:	200184ec 	.word	0x200184ec
 8001ca4:	2aaaaaab 	.word	0x2aaaaaab
 8001ca8:	08009668 	.word	0x08009668
 8001cac:	0800966c 	.word	0x0800966c
 8001cb0:	08009670 	.word	0x08009670
 8001cb4:	08009674 	.word	0x08009674
 8001cb8:	08009678 	.word	0x08009678
 8001cbc:	0800967c 	.word	0x0800967c
 8001cc0:	08009680 	.word	0x08009680
 8001cc4:	08009684 	.word	0x08009684
				  case 8:lcd_send_string(&"F");break;
 8001cc8:	48a7      	ldr	r0, [pc, #668]	; (8001f68 <main+0x630>)
 8001cca:	f7ff fdaa 	bl	8001822 <lcd_send_string>
 8001cce:	e067      	b.n	8001da0 <main+0x468>
				  case 9:lcd_send_string(&"F#");break;
 8001cd0:	48a6      	ldr	r0, [pc, #664]	; (8001f6c <main+0x634>)
 8001cd2:	f7ff fda6 	bl	8001822 <lcd_send_string>
 8001cd6:	e063      	b.n	8001da0 <main+0x468>
				  case 10:lcd_send_string(&"G");break;
 8001cd8:	48a5      	ldr	r0, [pc, #660]	; (8001f70 <main+0x638>)
 8001cda:	f7ff fda2 	bl	8001822 <lcd_send_string>
 8001cde:	e05f      	b.n	8001da0 <main+0x468>
				  case 11:lcd_send_string(&"G#");break;
 8001ce0:	48a4      	ldr	r0, [pc, #656]	; (8001f74 <main+0x63c>)
 8001ce2:	f7ff fd9e 	bl	8001822 <lcd_send_string>
 8001ce6:	e05b      	b.n	8001da0 <main+0x468>
				  }
			  }
			  else
			  {
				  switch((11-Tonique)%12)
 8001ce8:	4ba3      	ldr	r3, [pc, #652]	; (8001f78 <main+0x640>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1c3 010b 	rsb	r1, r3, #11
 8001cf0:	4ba2      	ldr	r3, [pc, #648]	; (8001f7c <main+0x644>)
 8001cf2:	fb83 2301 	smull	r2, r3, r3, r1
 8001cf6:	105a      	asrs	r2, r3, #1
 8001cf8:	17cb      	asrs	r3, r1, #31
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	1aca      	subs	r2, r1, r3
 8001d06:	2a0b      	cmp	r2, #11
 8001d08:	d84a      	bhi.n	8001da0 <main+0x468>
 8001d0a:	a301      	add	r3, pc, #4	; (adr r3, 8001d10 <main+0x3d8>)
 8001d0c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001d10:	08001d41 	.word	0x08001d41
 8001d14:	08001d49 	.word	0x08001d49
 8001d18:	08001d51 	.word	0x08001d51
 8001d1c:	08001d59 	.word	0x08001d59
 8001d20:	08001d61 	.word	0x08001d61
 8001d24:	08001d69 	.word	0x08001d69
 8001d28:	08001d71 	.word	0x08001d71
 8001d2c:	08001d79 	.word	0x08001d79
 8001d30:	08001d81 	.word	0x08001d81
 8001d34:	08001d89 	.word	0x08001d89
 8001d38:	08001d91 	.word	0x08001d91
 8001d3c:	08001d99 	.word	0x08001d99
				  {
				  case 0:lcd_send_string(&"A");break;
 8001d40:	488f      	ldr	r0, [pc, #572]	; (8001f80 <main+0x648>)
 8001d42:	f7ff fd6e 	bl	8001822 <lcd_send_string>
 8001d46:	e02b      	b.n	8001da0 <main+0x468>
				  case 1:lcd_send_string(&"A#");break;
 8001d48:	488e      	ldr	r0, [pc, #568]	; (8001f84 <main+0x64c>)
 8001d4a:	f7ff fd6a 	bl	8001822 <lcd_send_string>
 8001d4e:	e027      	b.n	8001da0 <main+0x468>
				  case 2:lcd_send_string(&"B");break;
 8001d50:	488d      	ldr	r0, [pc, #564]	; (8001f88 <main+0x650>)
 8001d52:	f7ff fd66 	bl	8001822 <lcd_send_string>
 8001d56:	e023      	b.n	8001da0 <main+0x468>
				  case 3:lcd_send_string(&"C");break;
 8001d58:	488c      	ldr	r0, [pc, #560]	; (8001f8c <main+0x654>)
 8001d5a:	f7ff fd62 	bl	8001822 <lcd_send_string>
 8001d5e:	e01f      	b.n	8001da0 <main+0x468>
				  case 4:lcd_send_string(&"C#");break;
 8001d60:	488b      	ldr	r0, [pc, #556]	; (8001f90 <main+0x658>)
 8001d62:	f7ff fd5e 	bl	8001822 <lcd_send_string>
 8001d66:	e01b      	b.n	8001da0 <main+0x468>
				  case 5:lcd_send_string(&"D");break;
 8001d68:	488a      	ldr	r0, [pc, #552]	; (8001f94 <main+0x65c>)
 8001d6a:	f7ff fd5a 	bl	8001822 <lcd_send_string>
 8001d6e:	e017      	b.n	8001da0 <main+0x468>
				  case 6:lcd_send_string(&"D#");break;
 8001d70:	4889      	ldr	r0, [pc, #548]	; (8001f98 <main+0x660>)
 8001d72:	f7ff fd56 	bl	8001822 <lcd_send_string>
 8001d76:	e013      	b.n	8001da0 <main+0x468>
				  case 7:lcd_send_string(&"E");break;
 8001d78:	4888      	ldr	r0, [pc, #544]	; (8001f9c <main+0x664>)
 8001d7a:	f7ff fd52 	bl	8001822 <lcd_send_string>
 8001d7e:	e00f      	b.n	8001da0 <main+0x468>
				  case 8:lcd_send_string(&"F");break;
 8001d80:	4879      	ldr	r0, [pc, #484]	; (8001f68 <main+0x630>)
 8001d82:	f7ff fd4e 	bl	8001822 <lcd_send_string>
 8001d86:	e00b      	b.n	8001da0 <main+0x468>
				  case 9:lcd_send_string(&"F#");break;
 8001d88:	4878      	ldr	r0, [pc, #480]	; (8001f6c <main+0x634>)
 8001d8a:	f7ff fd4a 	bl	8001822 <lcd_send_string>
 8001d8e:	e007      	b.n	8001da0 <main+0x468>
				  case 10:lcd_send_string(&"G");break;
 8001d90:	4877      	ldr	r0, [pc, #476]	; (8001f70 <main+0x638>)
 8001d92:	f7ff fd46 	bl	8001822 <lcd_send_string>
 8001d96:	e003      	b.n	8001da0 <main+0x468>
				  case 11:lcd_send_string(&"G#");break;
 8001d98:	4876      	ldr	r0, [pc, #472]	; (8001f74 <main+0x63c>)
 8001d9a:	f7ff fd42 	bl	8001822 <lcd_send_string>
 8001d9e:	bf00      	nop
				  }
			  }
			  if(HAL_GPIO_ReadPin(BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_SET)
 8001da0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001da4:	487e      	ldr	r0, [pc, #504]	; (8001fa0 <main+0x668>)
 8001da6:	f005 f90d 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d123      	bne.n	8001df8 <main+0x4c0>
			  {
				  while((BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_SET){}
 8001db0:	bf00      	nop
				  ToniquePred=Tonique;
 8001db2:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <main+0x640>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7b      	ldr	r2, [pc, #492]	; (8001fa4 <main+0x66c>)
 8001db8:	6013      	str	r3, [r2, #0]
				  Tonique++;
 8001dba:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <main+0x640>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a6d      	ldr	r2, [pc, #436]	; (8001f78 <main+0x640>)
 8001dc2:	6013      	str	r3, [r2, #0]
				  if (Tonique>ToniquePred)
 8001dc4:	4b6c      	ldr	r3, [pc, #432]	; (8001f78 <main+0x640>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <main+0x66c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dd13      	ble.n	8001df8 <main+0x4c0>
				  {
					  for(int i=0;i<17;i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e00d      	b.n	8001df2 <main+0x4ba>
					  {
					 	NoteChrom[i]=NoteChrom[i]+1;
 8001dd6:	4a74      	ldr	r2, [pc, #464]	; (8001fa8 <main+0x670>)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	4413      	add	r3, r2
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	b2d9      	uxtb	r1, r3
 8001de2:	4a71      	ldr	r2, [pc, #452]	; (8001fa8 <main+0x670>)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	4413      	add	r3, r2
 8001de8:	460a      	mov	r2, r1
 8001dea:	701a      	strb	r2, [r3, #0]
					  for(int i=0;i<17;i++)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b10      	cmp	r3, #16
 8001df6:	ddee      	ble.n	8001dd6 <main+0x49e>
					  }
				  }
			  }

			  if(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET)
 8001df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dfc:	4868      	ldr	r0, [pc, #416]	; (8001fa0 <main+0x668>)
 8001dfe:	f005 f8e1 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d12b      	bne.n	8001e60 <main+0x528>
			  {
				  while(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET){}
 8001e08:	bf00      	nop
 8001e0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0e:	4864      	ldr	r0, [pc, #400]	; (8001fa0 <main+0x668>)
 8001e10:	f005 f8d8 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d0f7      	beq.n	8001e0a <main+0x4d2>
				  ToniquePred=Tonique;
 8001e1a:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <main+0x640>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a61      	ldr	r2, [pc, #388]	; (8001fa4 <main+0x66c>)
 8001e20:	6013      	str	r3, [r2, #0]
				  Tonique--;
 8001e22:	4b55      	ldr	r3, [pc, #340]	; (8001f78 <main+0x640>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	4a53      	ldr	r2, [pc, #332]	; (8001f78 <main+0x640>)
 8001e2a:	6013      	str	r3, [r2, #0]
				  if (Tonique<ToniquePred)
 8001e2c:	4b52      	ldr	r3, [pc, #328]	; (8001f78 <main+0x640>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <main+0x66c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	da13      	bge.n	8001e60 <main+0x528>
				  {
					  for(int i=0;i<17;i++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	e00d      	b.n	8001e5a <main+0x522>
					  {
					 	NoteChrom[i]=NoteChrom[i]-1;
 8001e3e:	4a5a      	ldr	r2, [pc, #360]	; (8001fa8 <main+0x670>)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b2d9      	uxtb	r1, r3
 8001e4a:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <main+0x670>)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	460a      	mov	r2, r1
 8001e52:	701a      	strb	r2, [r3, #0]
					  for(int i=0;i<17;i++)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	3301      	adds	r3, #1
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	ddee      	ble.n	8001e3e <main+0x506>
					  }
				  }
			  }

			  for(int i=0;i<17;i++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e00b      	b.n	8001e7e <main+0x546>
			  {
				  Note[i]=NoteChrom[i];
 8001e66:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <main+0x670>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	7819      	ldrb	r1, [r3, #0]
 8001e6e:	4a4f      	ldr	r2, [pc, #316]	; (8001fac <main+0x674>)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	460a      	mov	r2, r1
 8001e76:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<17;i++)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	ddf0      	ble.n	8001e66 <main+0x52e>
 8001e84:	e181      	b.n	800218a <main+0x852>
			  }

		  }
		  else if(MidiMode==2)
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <main+0x678>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	f040 817d 	bne.w	800218a <main+0x852>
		  {
			  lcd_put_cur(0, 0);
 8001e90:	2100      	movs	r1, #0
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff fc69 	bl	800176a <lcd_put_cur>
			  lcd_send_string(&"Mode Major/Minor");
 8001e98:	4846      	ldr	r0, [pc, #280]	; (8001fb4 <main+0x67c>)
 8001e9a:	f7ff fcc2 	bl	8001822 <lcd_send_string>
			  lcd_put_cur(1, 0);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff fc62 	bl	800176a <lcd_put_cur>
			  if(Tonique>=0)
 8001ea6:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <main+0x640>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f2c0 809c 	blt.w	8001fe8 <main+0x6b0>
			  {
				  switch(Tonique%12)
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <main+0x640>)
 8001eb2:	6819      	ldr	r1, [r3, #0]
 8001eb4:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <main+0x644>)
 8001eb6:	fb83 2301 	smull	r2, r3, r3, r1
 8001eba:	105a      	asrs	r2, r3, #1
 8001ebc:	17cb      	asrs	r3, r1, #31
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	1aca      	subs	r2, r1, r3
 8001eca:	2a0b      	cmp	r2, #11
 8001ecc:	f200 80e8 	bhi.w	80020a0 <main+0x768>
 8001ed0:	a301      	add	r3, pc, #4	; (adr r3, 8001ed8 <main+0x5a0>)
 8001ed2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	08001f09 	.word	0x08001f09
 8001edc:	08001f11 	.word	0x08001f11
 8001ee0:	08001f19 	.word	0x08001f19
 8001ee4:	08001f21 	.word	0x08001f21
 8001ee8:	08001f29 	.word	0x08001f29
 8001eec:	08001f31 	.word	0x08001f31
 8001ef0:	08001f39 	.word	0x08001f39
 8001ef4:	08001f41 	.word	0x08001f41
 8001ef8:	08001f49 	.word	0x08001f49
 8001efc:	08001f51 	.word	0x08001f51
 8001f00:	08001f59 	.word	0x08001f59
 8001f04:	08001f61 	.word	0x08001f61
				  {
				  case 0:lcd_send_string(&"A min / C Maj");break;
 8001f08:	482b      	ldr	r0, [pc, #172]	; (8001fb8 <main+0x680>)
 8001f0a:	f7ff fc8a 	bl	8001822 <lcd_send_string>
 8001f0e:	e0c7      	b.n	80020a0 <main+0x768>
				  case 1:lcd_send_string(&"A# min / C# Maj");break;
 8001f10:	482a      	ldr	r0, [pc, #168]	; (8001fbc <main+0x684>)
 8001f12:	f7ff fc86 	bl	8001822 <lcd_send_string>
 8001f16:	e0c3      	b.n	80020a0 <main+0x768>
				  case 2:lcd_send_string(&"B min / D Maj");break;
 8001f18:	4829      	ldr	r0, [pc, #164]	; (8001fc0 <main+0x688>)
 8001f1a:	f7ff fc82 	bl	8001822 <lcd_send_string>
 8001f1e:	e0bf      	b.n	80020a0 <main+0x768>
				  case 3:lcd_send_string(&"C min / D# Maj");break;
 8001f20:	4828      	ldr	r0, [pc, #160]	; (8001fc4 <main+0x68c>)
 8001f22:	f7ff fc7e 	bl	8001822 <lcd_send_string>
 8001f26:	e0bb      	b.n	80020a0 <main+0x768>
				  case 4:lcd_send_string(&"C# min / E Maj");break;
 8001f28:	4827      	ldr	r0, [pc, #156]	; (8001fc8 <main+0x690>)
 8001f2a:	f7ff fc7a 	bl	8001822 <lcd_send_string>
 8001f2e:	e0b7      	b.n	80020a0 <main+0x768>
				  case 5:lcd_send_string(&"D min / F Maj");break;
 8001f30:	4826      	ldr	r0, [pc, #152]	; (8001fcc <main+0x694>)
 8001f32:	f7ff fc76 	bl	8001822 <lcd_send_string>
 8001f36:	e0b3      	b.n	80020a0 <main+0x768>
				  case 6:lcd_send_string(&"D# min / F# Maj");break;
 8001f38:	4825      	ldr	r0, [pc, #148]	; (8001fd0 <main+0x698>)
 8001f3a:	f7ff fc72 	bl	8001822 <lcd_send_string>
 8001f3e:	e0af      	b.n	80020a0 <main+0x768>
				  case 7:lcd_send_string(&"E min / G Maj");break;
 8001f40:	4824      	ldr	r0, [pc, #144]	; (8001fd4 <main+0x69c>)
 8001f42:	f7ff fc6e 	bl	8001822 <lcd_send_string>
 8001f46:	e0ab      	b.n	80020a0 <main+0x768>
				  case 8:lcd_send_string(&"F min / G# Maj");break;
 8001f48:	4823      	ldr	r0, [pc, #140]	; (8001fd8 <main+0x6a0>)
 8001f4a:	f7ff fc6a 	bl	8001822 <lcd_send_string>
 8001f4e:	e0a7      	b.n	80020a0 <main+0x768>
				  case 9:lcd_send_string(&"F# min / A Maj");break;
 8001f50:	4822      	ldr	r0, [pc, #136]	; (8001fdc <main+0x6a4>)
 8001f52:	f7ff fc66 	bl	8001822 <lcd_send_string>
 8001f56:	e0a3      	b.n	80020a0 <main+0x768>
				  case 10:lcd_send_string(&"G min / A# Maj");break;
 8001f58:	4821      	ldr	r0, [pc, #132]	; (8001fe0 <main+0x6a8>)
 8001f5a:	f7ff fc62 	bl	8001822 <lcd_send_string>
 8001f5e:	e09f      	b.n	80020a0 <main+0x768>
				  case 11:lcd_send_string(&"G# min / B Maj");break;
 8001f60:	4820      	ldr	r0, [pc, #128]	; (8001fe4 <main+0x6ac>)
 8001f62:	f7ff fc5e 	bl	8001822 <lcd_send_string>
 8001f66:	e09b      	b.n	80020a0 <main+0x768>
 8001f68:	08009688 	.word	0x08009688
 8001f6c:	0800968c 	.word	0x0800968c
 8001f70:	08009690 	.word	0x08009690
 8001f74:	08009694 	.word	0x08009694
 8001f78:	200184ec 	.word	0x200184ec
 8001f7c:	2aaaaaab 	.word	0x2aaaaaab
 8001f80:	08009668 	.word	0x08009668
 8001f84:	0800966c 	.word	0x0800966c
 8001f88:	08009670 	.word	0x08009670
 8001f8c:	08009674 	.word	0x08009674
 8001f90:	08009678 	.word	0x08009678
 8001f94:	0800967c 	.word	0x0800967c
 8001f98:	08009680 	.word	0x08009680
 8001f9c:	08009684 	.word	0x08009684
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	200184f0 	.word	0x200184f0
 8001fa8:	20000058 	.word	0x20000058
 8001fac:	20000044 	.word	0x20000044
 8001fb0:	20018504 	.word	0x20018504
 8001fb4:	08009698 	.word	0x08009698
 8001fb8:	080096ac 	.word	0x080096ac
 8001fbc:	080096bc 	.word	0x080096bc
 8001fc0:	080096cc 	.word	0x080096cc
 8001fc4:	080096dc 	.word	0x080096dc
 8001fc8:	080096ec 	.word	0x080096ec
 8001fcc:	080096fc 	.word	0x080096fc
 8001fd0:	0800970c 	.word	0x0800970c
 8001fd4:	0800971c 	.word	0x0800971c
 8001fd8:	0800972c 	.word	0x0800972c
 8001fdc:	0800973c 	.word	0x0800973c
 8001fe0:	0800974c 	.word	0x0800974c
 8001fe4:	0800975c 	.word	0x0800975c
				  }
			  }
			  else
			  {
				  switch((11-Tonique)%12)
 8001fe8:	4baa      	ldr	r3, [pc, #680]	; (8002294 <main+0x95c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f1c3 010b 	rsb	r1, r3, #11
 8001ff0:	4ba9      	ldr	r3, [pc, #676]	; (8002298 <main+0x960>)
 8001ff2:	fb83 2301 	smull	r2, r3, r3, r1
 8001ff6:	105a      	asrs	r2, r3, #1
 8001ff8:	17cb      	asrs	r3, r1, #31
 8001ffa:	1ad2      	subs	r2, r2, r3
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	1aca      	subs	r2, r1, r3
 8002006:	2a0b      	cmp	r2, #11
 8002008:	d84a      	bhi.n	80020a0 <main+0x768>
 800200a:	a301      	add	r3, pc, #4	; (adr r3, 8002010 <main+0x6d8>)
 800200c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002010:	08002041 	.word	0x08002041
 8002014:	08002049 	.word	0x08002049
 8002018:	08002051 	.word	0x08002051
 800201c:	08002059 	.word	0x08002059
 8002020:	08002061 	.word	0x08002061
 8002024:	08002069 	.word	0x08002069
 8002028:	08002071 	.word	0x08002071
 800202c:	08002079 	.word	0x08002079
 8002030:	08002081 	.word	0x08002081
 8002034:	08002089 	.word	0x08002089
 8002038:	08002091 	.word	0x08002091
 800203c:	08002099 	.word	0x08002099
				  {
				  case 0:lcd_send_string(&"A min / C Maj");break;
 8002040:	4896      	ldr	r0, [pc, #600]	; (800229c <main+0x964>)
 8002042:	f7ff fbee 	bl	8001822 <lcd_send_string>
 8002046:	e02b      	b.n	80020a0 <main+0x768>
				  case 1:lcd_send_string(&"A# min / C# Maj");break;
 8002048:	4895      	ldr	r0, [pc, #596]	; (80022a0 <main+0x968>)
 800204a:	f7ff fbea 	bl	8001822 <lcd_send_string>
 800204e:	e027      	b.n	80020a0 <main+0x768>
				  case 2:lcd_send_string(&"B min / D Maj");break;
 8002050:	4894      	ldr	r0, [pc, #592]	; (80022a4 <main+0x96c>)
 8002052:	f7ff fbe6 	bl	8001822 <lcd_send_string>
 8002056:	e023      	b.n	80020a0 <main+0x768>
				  case 3:lcd_send_string(&"C min / D# Maj");break;
 8002058:	4893      	ldr	r0, [pc, #588]	; (80022a8 <main+0x970>)
 800205a:	f7ff fbe2 	bl	8001822 <lcd_send_string>
 800205e:	e01f      	b.n	80020a0 <main+0x768>
				  case 4:lcd_send_string(&"C# min / E Maj");break;
 8002060:	4892      	ldr	r0, [pc, #584]	; (80022ac <main+0x974>)
 8002062:	f7ff fbde 	bl	8001822 <lcd_send_string>
 8002066:	e01b      	b.n	80020a0 <main+0x768>
				  case 5:lcd_send_string(&"D min / F Maj");break;
 8002068:	4891      	ldr	r0, [pc, #580]	; (80022b0 <main+0x978>)
 800206a:	f7ff fbda 	bl	8001822 <lcd_send_string>
 800206e:	e017      	b.n	80020a0 <main+0x768>
				  case 6:lcd_send_string(&"D# min / F# Maj");break;
 8002070:	4890      	ldr	r0, [pc, #576]	; (80022b4 <main+0x97c>)
 8002072:	f7ff fbd6 	bl	8001822 <lcd_send_string>
 8002076:	e013      	b.n	80020a0 <main+0x768>
				  case 7:lcd_send_string(&"E min / G Maj");break;
 8002078:	488f      	ldr	r0, [pc, #572]	; (80022b8 <main+0x980>)
 800207a:	f7ff fbd2 	bl	8001822 <lcd_send_string>
 800207e:	e00f      	b.n	80020a0 <main+0x768>
				  case 8:lcd_send_string(&"F min / G# Maj");break;
 8002080:	488e      	ldr	r0, [pc, #568]	; (80022bc <main+0x984>)
 8002082:	f7ff fbce 	bl	8001822 <lcd_send_string>
 8002086:	e00b      	b.n	80020a0 <main+0x768>
				  case 9:lcd_send_string(&"F# min / A Maj");break;
 8002088:	488d      	ldr	r0, [pc, #564]	; (80022c0 <main+0x988>)
 800208a:	f7ff fbca 	bl	8001822 <lcd_send_string>
 800208e:	e007      	b.n	80020a0 <main+0x768>
				  case 10:lcd_send_string(&"G min / A# Maj");break;
 8002090:	488c      	ldr	r0, [pc, #560]	; (80022c4 <main+0x98c>)
 8002092:	f7ff fbc6 	bl	8001822 <lcd_send_string>
 8002096:	e003      	b.n	80020a0 <main+0x768>
				  case 11:lcd_send_string(&"G# min / B Maj");break;
 8002098:	488b      	ldr	r0, [pc, #556]	; (80022c8 <main+0x990>)
 800209a:	f7ff fbc2 	bl	8001822 <lcd_send_string>
 800209e:	bf00      	nop
				  }
			  }
			  if(HAL_GPIO_ReadPin(BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_SET)
 80020a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a4:	4889      	ldr	r0, [pc, #548]	; (80022cc <main+0x994>)
 80020a6:	f004 ff8d 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d123      	bne.n	80020f8 <main+0x7c0>
			  {
				  while((BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_SET){}
 80020b0:	bf00      	nop
				  ToniquePred=Tonique;
 80020b2:	4b78      	ldr	r3, [pc, #480]	; (8002294 <main+0x95c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a86      	ldr	r2, [pc, #536]	; (80022d0 <main+0x998>)
 80020b8:	6013      	str	r3, [r2, #0]
				  Tonique++;
 80020ba:	4b76      	ldr	r3, [pc, #472]	; (8002294 <main+0x95c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	4a74      	ldr	r2, [pc, #464]	; (8002294 <main+0x95c>)
 80020c2:	6013      	str	r3, [r2, #0]
				  if (Tonique>ToniquePred)
 80020c4:	4b73      	ldr	r3, [pc, #460]	; (8002294 <main+0x95c>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <main+0x998>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dd13      	ble.n	80020f8 <main+0x7c0>
				  {
					  for(int i=0;i<17;i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	e00d      	b.n	80020f2 <main+0x7ba>
					  {
					 	NoteOrg[i]=NoteOrg[i]+1;
 80020d6:	4a7f      	ldr	r2, [pc, #508]	; (80022d4 <main+0x99c>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4413      	add	r3, r2
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	b2d9      	uxtb	r1, r3
 80020e2:	4a7c      	ldr	r2, [pc, #496]	; (80022d4 <main+0x99c>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4413      	add	r3, r2
 80020e8:	460a      	mov	r2, r1
 80020ea:	701a      	strb	r2, [r3, #0]
					  for(int i=0;i<17;i++)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3301      	adds	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	ddee      	ble.n	80020d6 <main+0x79e>
					  }
				  }
			  }

			  if(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET)
 80020f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020fc:	4873      	ldr	r0, [pc, #460]	; (80022cc <main+0x994>)
 80020fe:	f004 ff61 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002102:	4603      	mov	r3, r0
 8002104:	2b01      	cmp	r3, #1
 8002106:	d12b      	bne.n	8002160 <main+0x828>
			  {
				  while(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET){}
 8002108:	bf00      	nop
 800210a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800210e:	486f      	ldr	r0, [pc, #444]	; (80022cc <main+0x994>)
 8002110:	f004 ff58 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002114:	4603      	mov	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d0f7      	beq.n	800210a <main+0x7d2>
				  ToniquePred=Tonique;
 800211a:	4b5e      	ldr	r3, [pc, #376]	; (8002294 <main+0x95c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6c      	ldr	r2, [pc, #432]	; (80022d0 <main+0x998>)
 8002120:	6013      	str	r3, [r2, #0]
				  Tonique--;
 8002122:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <main+0x95c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3b01      	subs	r3, #1
 8002128:	4a5a      	ldr	r2, [pc, #360]	; (8002294 <main+0x95c>)
 800212a:	6013      	str	r3, [r2, #0]
				  if (Tonique<ToniquePred)
 800212c:	4b59      	ldr	r3, [pc, #356]	; (8002294 <main+0x95c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <main+0x998>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	da13      	bge.n	8002160 <main+0x828>
				  {
					  for(int i=0;i<17;i++)
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	e00d      	b.n	800215a <main+0x822>
					  {
					 	NoteOrg[i]=NoteOrg[i]-1;
 800213e:	4a65      	ldr	r2, [pc, #404]	; (80022d4 <main+0x99c>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	3b01      	subs	r3, #1
 8002148:	b2d9      	uxtb	r1, r3
 800214a:	4a62      	ldr	r2, [pc, #392]	; (80022d4 <main+0x99c>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	460a      	mov	r2, r1
 8002152:	701a      	strb	r2, [r3, #0]
					  for(int i=0;i<17;i++)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3301      	adds	r3, #1
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b10      	cmp	r3, #16
 800215e:	ddee      	ble.n	800213e <main+0x806>
					  }
				  }
			  }

			  for(int i=0;i<17;i++)
 8002160:	2300      	movs	r3, #0
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	e00b      	b.n	800217e <main+0x846>
			  {
				  Note[i]=NoteOrg[i];
 8002166:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <main+0x99c>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4413      	add	r3, r2
 800216c:	7819      	ldrb	r1, [r3, #0]
 800216e:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <main+0x9a0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4413      	add	r3, r2
 8002174:	460a      	mov	r2, r1
 8002176:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<17;i++)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b10      	cmp	r3, #16
 8002182:	ddf0      	ble.n	8002166 <main+0x82e>
			  }
		  }
		  while((HAL_GPIO_ReadPin(BNon_GPIO_Port, BNon_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BOsc1_GPIO_Port,BOsc1_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BOsc2_GPIO_Port,BOsc2_Pin)==GPIO_PIN_RESET)&&((HAL_GPIO_ReadPin(BOsc3_GPIO_Port,BOsc3_Pin)==GPIO_PIN_RESET))&&(HAL_GPIO_ReadPin(BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_RESET))
 8002184:	e001      	b.n	800218a <main+0x852>
		  {
			  midi();
 8002186:	f000 fa99 	bl	80026bc <midi>
		  while((HAL_GPIO_ReadPin(BNon_GPIO_Port, BNon_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BOsc1_GPIO_Port,BOsc1_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BOsc2_GPIO_Port,BOsc2_Pin)==GPIO_PIN_RESET)&&((HAL_GPIO_ReadPin(BOsc3_GPIO_Port,BOsc3_Pin)==GPIO_PIN_RESET))&&(HAL_GPIO_ReadPin(BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_RESET))
 800218a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800218e:	484f      	ldr	r0, [pc, #316]	; (80022cc <main+0x994>)
 8002190:	f004 ff18 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d126      	bne.n	80021e8 <main+0x8b0>
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	484b      	ldr	r0, [pc, #300]	; (80022cc <main+0x994>)
 800219e:	f004 ff11 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11f      	bne.n	80021e8 <main+0x8b0>
 80021a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ac:	4847      	ldr	r0, [pc, #284]	; (80022cc <main+0x994>)
 80021ae:	f004 ff09 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d117      	bne.n	80021e8 <main+0x8b0>
 80021b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021bc:	4843      	ldr	r0, [pc, #268]	; (80022cc <main+0x994>)
 80021be:	f004 ff01 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <main+0x8b0>
 80021c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021cc:	483f      	ldr	r0, [pc, #252]	; (80022cc <main+0x994>)
 80021ce:	f004 fef9 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <main+0x8b0>
 80021d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021dc:	483b      	ldr	r0, [pc, #236]	; (80022cc <main+0x994>)
 80021de:	f004 fef1 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ce      	beq.n	8002186 <main+0x84e>
		  }
		  if(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET)
 80021e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ec:	4837      	ldr	r0, [pc, #220]	; (80022cc <main+0x994>)
 80021ee:	f004 fee9 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10b      	bne.n	8002210 <main+0x8d8>
		  {
			  while(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET){}
 80021f8:	bf00      	nop
 80021fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021fe:	4833      	ldr	r0, [pc, #204]	; (80022cc <main+0x994>)
 8002200:	f004 fee0 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b01      	cmp	r3, #1
 8002208:	d0f7      	beq.n	80021fa <main+0x8c2>
			  mode=0;
 800220a:	4b34      	ldr	r3, [pc, #208]	; (80022dc <main+0x9a4>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
		  }
		  if(HAL_GPIO_ReadPin(BOsc1_GPIO_Port,BOsc1_Pin)==GPIO_PIN_SET)
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	482e      	ldr	r0, [pc, #184]	; (80022cc <main+0x994>)
 8002214:	f004 fed6 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002218:	4603      	mov	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10c      	bne.n	8002238 <main+0x900>
		  {
			  while(HAL_GPIO_ReadPin(BOsc1_GPIO_Port,BOsc1_Pin)==GPIO_PIN_SET){}
 800221e:	bf00      	nop
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	482a      	ldr	r0, [pc, #168]	; (80022cc <main+0x994>)
 8002224:	f004 fece 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	d0f8      	beq.n	8002220 <main+0x8e8>
			  MidiMode=0;
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <main+0x9a8>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	f7ff bbc5 	b.w	80019c2 <main+0x8a>
		  }
		  else if(HAL_GPIO_ReadPin(BOsc2_GPIO_Port,BOsc2_Pin)==GPIO_PIN_SET)
 8002238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800223c:	4823      	ldr	r0, [pc, #140]	; (80022cc <main+0x994>)
 800223e:	f004 fec1 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10d      	bne.n	8002264 <main+0x92c>
		  {
			  while(HAL_GPIO_ReadPin(BOsc2_GPIO_Port,BOsc2_Pin)==GPIO_PIN_SET){}
 8002248:	bf00      	nop
 800224a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224e:	481f      	ldr	r0, [pc, #124]	; (80022cc <main+0x994>)
 8002250:	f004 feb8 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002254:	4603      	mov	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	d0f7      	beq.n	800224a <main+0x912>
			  MidiMode=1;
 800225a:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <main+0x9a8>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	f7ff bbaf 	b.w	80019c2 <main+0x8a>
		  }
		  else if(HAL_GPIO_ReadPin(BOsc3_GPIO_Port,BOsc3_Pin)==GPIO_PIN_SET)
 8002264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002268:	4818      	ldr	r0, [pc, #96]	; (80022cc <main+0x994>)
 800226a:	f004 feab 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800226e:	4603      	mov	r3, r0
 8002270:	2b01      	cmp	r3, #1
 8002272:	f47f aba6 	bne.w	80019c2 <main+0x8a>
		  {
			  while(HAL_GPIO_ReadPin(BOsc3_GPIO_Port,BOsc3_Pin)==GPIO_PIN_SET){}
 8002276:	bf00      	nop
 8002278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800227c:	4813      	ldr	r0, [pc, #76]	; (80022cc <main+0x994>)
 800227e:	f004 fea1 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002282:	4603      	mov	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d0f7      	beq.n	8002278 <main+0x940>
			  MidiMode=2;
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <main+0x9a8>)
 800228a:	2202      	movs	r2, #2
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	f7ff bb98 	b.w	80019c2 <main+0x8a>
 8002292:	bf00      	nop
 8002294:	200184ec 	.word	0x200184ec
 8002298:	2aaaaaab 	.word	0x2aaaaaab
 800229c:	080096ac 	.word	0x080096ac
 80022a0:	080096bc 	.word	0x080096bc
 80022a4:	080096cc 	.word	0x080096cc
 80022a8:	080096dc 	.word	0x080096dc
 80022ac:	080096ec 	.word	0x080096ec
 80022b0:	080096fc 	.word	0x080096fc
 80022b4:	0800970c 	.word	0x0800970c
 80022b8:	0800971c 	.word	0x0800971c
 80022bc:	0800972c 	.word	0x0800972c
 80022c0:	0800973c 	.word	0x0800973c
 80022c4:	0800974c 	.word	0x0800974c
 80022c8:	0800975c 	.word	0x0800975c
 80022cc:	40021000 	.word	0x40021000
 80022d0:	200184f0 	.word	0x200184f0
 80022d4:	2000006c 	.word	0x2000006c
 80022d8:	20000044 	.word	0x20000044
 80022dc:	200184f4 	.word	0x200184f4
 80022e0:	20018504 	.word	0x20018504
		  }
	  }
	  else if(mode==2)
 80022e4:	4b7e      	ldr	r3, [pc, #504]	; (80024e0 <main+0xba8>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	f47f ab6a 	bne.w	80019c2 <main+0x8a>
	  {
		  if(synth==0)
 80022ee:	4b7d      	ldr	r3, [pc, #500]	; (80024e4 <main+0xbac>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 80b1 	bne.w	800245a <main+0xb22>
		  {
			  lcd_clear();
 80022f8:	f7ff fa20 	bl	800173c <lcd_clear>
			  lcd_put_cur(0, 0);
 80022fc:	2100      	movs	r1, #0
 80022fe:	2000      	movs	r0, #0
 8002300:	f7ff fa33 	bl	800176a <lcd_put_cur>
			  lcd_send_string(&"BG: OSCs BD:Octv");
 8002304:	4878      	ldr	r0, [pc, #480]	; (80024e8 <main+0xbb0>)
 8002306:	f7ff fa8c 	bl	8001822 <lcd_send_string>
			  lcd_put_cur(1,0);
 800230a:	2100      	movs	r1, #0
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff fa2c 	bl	800176a <lcd_put_cur>
			  lcd_send_string(&"BO:Play BOs1:Env");
 8002312:	4876      	ldr	r0, [pc, #472]	; (80024ec <main+0xbb4>)
 8002314:	f7ff fa85 	bl	8001822 <lcd_send_string>
			  while((HAL_GPIO_ReadPin(BNon_GPIO_Port, BNon_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BOsc1_GPIO_Port,BOsc1_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BOui_GPIO_Port,BOui_Pin)==GPIO_PIN_RESET)){}
 8002318:	bf00      	nop
 800231a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800231e:	4874      	ldr	r0, [pc, #464]	; (80024f0 <main+0xbb8>)
 8002320:	f004 fe50 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d11e      	bne.n	8002368 <main+0xa30>
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	4870      	ldr	r0, [pc, #448]	; (80024f0 <main+0xbb8>)
 800232e:	f004 fe49 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d117      	bne.n	8002368 <main+0xa30>
 8002338:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800233c:	486c      	ldr	r0, [pc, #432]	; (80024f0 <main+0xbb8>)
 800233e:	f004 fe41 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10f      	bne.n	8002368 <main+0xa30>
 8002348:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800234c:	4868      	ldr	r0, [pc, #416]	; (80024f0 <main+0xbb8>)
 800234e:	f004 fe39 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <main+0xa30>
 8002358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800235c:	4864      	ldr	r0, [pc, #400]	; (80024f0 <main+0xbb8>)
 800235e:	f004 fe31 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0d8      	beq.n	800231a <main+0x9e2>
			  if(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET)
 8002368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800236c:	4860      	ldr	r0, [pc, #384]	; (80024f0 <main+0xbb8>)
 800236e:	f004 fe29 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	2b01      	cmp	r3, #1
 8002376:	d10b      	bne.n	8002390 <main+0xa58>
			  {
				  while(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET){}
 8002378:	bf00      	nop
 800237a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800237e:	485c      	ldr	r0, [pc, #368]	; (80024f0 <main+0xbb8>)
 8002380:	f004 fe20 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002384:	4603      	mov	r3, r0
 8002386:	2b01      	cmp	r3, #1
 8002388:	d0f7      	beq.n	800237a <main+0xa42>
				  mode=0;
 800238a:	4b55      	ldr	r3, [pc, #340]	; (80024e0 <main+0xba8>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
			  }
			  if(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET)
 8002390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002394:	4856      	ldr	r0, [pc, #344]	; (80024f0 <main+0xbb8>)
 8002396:	f004 fe15 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10b      	bne.n	80023b8 <main+0xa80>
			  {
				  while(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET){}
 80023a0:	bf00      	nop
 80023a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023a6:	4852      	ldr	r0, [pc, #328]	; (80024f0 <main+0xbb8>)
 80023a8:	f004 fe0c 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d0f7      	beq.n	80023a2 <main+0xa6a>
				  synth=1;
 80023b2:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <main+0xbac>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
			  }
			  if(HAL_GPIO_ReadPin(BDroite_GPIO_Port,BDroite_Pin)==GPIO_PIN_SET)
 80023b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023bc:	484c      	ldr	r0, [pc, #304]	; (80024f0 <main+0xbb8>)
 80023be:	f004 fe01 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10b      	bne.n	80023e0 <main+0xaa8>
			  {
				  while(HAL_GPIO_ReadPin(BDroite_GPIO_Port,BDroite_Pin)==GPIO_PIN_SET){}
 80023c8:	bf00      	nop
 80023ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ce:	4848      	ldr	r0, [pc, #288]	; (80024f0 <main+0xbb8>)
 80023d0:	f004 fdf8 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d0f7      	beq.n	80023ca <main+0xa92>
				  synth=2;
 80023da:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <main+0xbac>)
 80023dc:	2202      	movs	r2, #2
 80023de:	701a      	strb	r2, [r3, #0]
			  }
			  if(HAL_GPIO_ReadPin(BOui_GPIO_Port,BOui_Pin)==GPIO_PIN_SET)
 80023e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e4:	4842      	ldr	r0, [pc, #264]	; (80024f0 <main+0xbb8>)
 80023e6:	f004 fded 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d10b      	bne.n	8002408 <main+0xad0>
			  {
				  while(HAL_GPIO_ReadPin(BOui_GPIO_Port,BOui_Pin)==GPIO_PIN_SET){}
 80023f0:	bf00      	nop
 80023f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f6:	483e      	ldr	r0, [pc, #248]	; (80024f0 <main+0xbb8>)
 80023f8:	f004 fde4 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d0f7      	beq.n	80023f2 <main+0xaba>
				  synth=3;
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <main+0xbac>)
 8002404:	2203      	movs	r2, #3
 8002406:	701a      	strb	r2, [r3, #0]
			  }
			if(HAL_GPIO_ReadPin(BOsc1_GPIO_Port,BOsc1_Pin)==GPIO_PIN_SET)
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	4839      	ldr	r0, [pc, #228]	; (80024f0 <main+0xbb8>)
 800240c:	f004 fdda 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d121      	bne.n	800245a <main+0xb22>
			  {
				while(HAL_GPIO_ReadPin(BOsc1_GPIO_Port,BOsc1_Pin)==GPIO_PIN_SET){}
 8002416:	bf00      	nop
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	4835      	ldr	r0, [pc, #212]	; (80024f0 <main+0xbb8>)
 800241c:	f004 fdd2 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d0f8      	beq.n	8002418 <main+0xae0>
				synth=4;
 8002426:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <main+0xbac>)
 8002428:	2204      	movs	r2, #4
 800242a:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  while(synth==1)
 800242c:	e015      	b.n	800245a <main+0xb22>
		  {
			  osc();
 800242e:	f001 fddf 	bl	8003ff0 <osc>
			  if(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET)
 8002432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002436:	482e      	ldr	r0, [pc, #184]	; (80024f0 <main+0xbb8>)
 8002438:	f004 fdc4 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800243c:	4603      	mov	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10b      	bne.n	800245a <main+0xb22>
			  {
				  while(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET){}
 8002442:	bf00      	nop
 8002444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002448:	4829      	ldr	r0, [pc, #164]	; (80024f0 <main+0xbb8>)
 800244a:	f004 fdbb 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800244e:	4603      	mov	r3, r0
 8002450:	2b01      	cmp	r3, #1
 8002452:	d0f7      	beq.n	8002444 <main+0xb0c>
				  synth=0;
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <main+0xbac>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
		  while(synth==1)
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <main+0xbac>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d0e5      	beq.n	800242e <main+0xaf6>
			  }
		  }
		  while(synth==2)
 8002462:	e001      	b.n	8002468 <main+0xb30>
		  {
			  Octv();
 8002464:	f001 fd14 	bl	8003e90 <Octv>
		  while(synth==2)
 8002468:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <main+0xbac>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d0f9      	beq.n	8002464 <main+0xb2c>
		  }
		  while(synth==3)
 8002470:	e015      	b.n	800249e <main+0xb66>
		  {
			  play();
 8002472:	f000 fc2b 	bl	8002ccc <play>
			  if(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET)
 8002476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800247a:	481d      	ldr	r0, [pc, #116]	; (80024f0 <main+0xbb8>)
 800247c:	f004 fda2 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002480:	4603      	mov	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10b      	bne.n	800249e <main+0xb66>
			  {
				  while(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET){}
 8002486:	bf00      	nop
 8002488:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800248c:	4818      	ldr	r0, [pc, #96]	; (80024f0 <main+0xbb8>)
 800248e:	f004 fd99 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002492:	4603      	mov	r3, r0
 8002494:	2b01      	cmp	r3, #1
 8002496:	d0f7      	beq.n	8002488 <main+0xb50>
				  synth=0;
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <main+0xbac>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
		  while(synth==3)
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <main+0xbac>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d0e5      	beq.n	8002472 <main+0xb3a>
			  }
		  }
		  while(synth==4)
 80024a6:	e015      	b.n	80024d4 <main+0xb9c>
		  {
			  env();
 80024a8:	f001 ffb2 	bl	8004410 <env>
			  if(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET)
 80024ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024b0:	480f      	ldr	r0, [pc, #60]	; (80024f0 <main+0xbb8>)
 80024b2:	f004 fd87 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d10b      	bne.n	80024d4 <main+0xb9c>
			  {
				  while(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET){}
 80024bc:	bf00      	nop
 80024be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024c2:	480b      	ldr	r0, [pc, #44]	; (80024f0 <main+0xbb8>)
 80024c4:	f004 fd7e 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d0f7      	beq.n	80024be <main+0xb86>
				  synth=0;
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <main+0xbac>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
		  while(synth==4)
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <main+0xbac>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d0e5      	beq.n	80024a8 <main+0xb70>
	  if(mode==0)
 80024dc:	f7ff ba71 	b.w	80019c2 <main+0x8a>
 80024e0:	200184f4 	.word	0x200184f4
 80024e4:	200184f5 	.word	0x200184f5
 80024e8:	0800976c 	.word	0x0800976c
 80024ec:	08009780 	.word	0x08009780
 80024f0:	40021000 	.word	0x40021000

080024f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b094      	sub	sp, #80	; 0x50
 80024f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fa:	f107 0320 	add.w	r3, r7, #32
 80024fe:	2230      	movs	r2, #48	; 0x30
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f007 f836 	bl	8009574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002508:	f107 030c 	add.w	r3, r7, #12
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <SystemClock_Config+0xc8>)
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <SystemClock_Config+0xc8>)
 8002522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002526:	6413      	str	r3, [r2, #64]	; 0x40
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <SystemClock_Config+0xc8>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002534:	2300      	movs	r3, #0
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <SystemClock_Config+0xcc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <SystemClock_Config+0xcc>)
 800253e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <SystemClock_Config+0xcc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002550:	2301      	movs	r3, #1
 8002552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800255a:	2302      	movs	r3, #2
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800255e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002564:	2304      	movs	r3, #4
 8002566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002568:	2348      	movs	r3, #72	; 0x48
 800256a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800256c:	2302      	movs	r3, #2
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002570:	2303      	movs	r3, #3
 8002572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002574:	f107 0320 	add.w	r3, r7, #32
 8002578:	4618      	mov	r0, r3
 800257a:	f005 f9a1 	bl	80078c0 <HAL_RCC_OscConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002584:	f002 fad8 	bl	8004b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002588:	230f      	movs	r3, #15
 800258a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800258c:	2302      	movs	r3, #2
 800258e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	2102      	movs	r1, #2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f005 fbfb 	bl	8007da0 <HAL_RCC_ClockConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80025b0:	f002 fac2 	bl	8004b38 <Error_Handler>
  }
}
 80025b4:	bf00      	nop
 80025b6:	3750      	adds	r7, #80	; 0x50
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40007000 	.word	0x40007000

080025c4 <MidiOn>:

/* USER CODE BEGIN 4 */
void MidiOn(int i)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit_IT(&huart4, &NoteOn, sizeof(NoteOn));
 80025cc:	2201      	movs	r2, #1
 80025ce:	4917      	ldr	r1, [pc, #92]	; (800262c <MidiOn+0x68>)
 80025d0:	4817      	ldr	r0, [pc, #92]	; (8002630 <MidiOn+0x6c>)
 80025d2:	f006 f952 	bl	800887a <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80025d6:	bf00      	nop
 80025d8:	4815      	ldr	r0, [pc, #84]	; (8002630 <MidiOn+0x6c>)
 80025da:	f006 fab1 	bl	8008b40 <HAL_UART_GetState>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d1f9      	bne.n	80025d8 <MidiOn+0x14>
	  HAL_UART_Transmit_IT(&huart4, &Note[i], sizeof(Note[i]));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <MidiOn+0x70>)
 80025e8:	4413      	add	r3, r2
 80025ea:	2201      	movs	r2, #1
 80025ec:	4619      	mov	r1, r3
 80025ee:	4810      	ldr	r0, [pc, #64]	; (8002630 <MidiOn+0x6c>)
 80025f0:	f006 f943 	bl	800887a <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80025f4:	bf00      	nop
 80025f6:	480e      	ldr	r0, [pc, #56]	; (8002630 <MidiOn+0x6c>)
 80025f8:	f006 faa2 	bl	8008b40 <HAL_UART_GetState>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d1f9      	bne.n	80025f6 <MidiOn+0x32>
	  HAL_UART_Transmit_IT(&huart4, &NoteVelocity, sizeof(NoteVelocity));
 8002602:	2201      	movs	r2, #1
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <MidiOn+0x74>)
 8002606:	480a      	ldr	r0, [pc, #40]	; (8002630 <MidiOn+0x6c>)
 8002608:	f006 f937 	bl	800887a <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 800260c:	bf00      	nop
 800260e:	4808      	ldr	r0, [pc, #32]	; (8002630 <MidiOn+0x6c>)
 8002610:	f006 fa96 	bl	8008b40 <HAL_UART_GetState>
 8002614:	4603      	mov	r3, r0
 8002616:	2b20      	cmp	r3, #32
 8002618:	d1f9      	bne.n	800260e <MidiOn+0x4a>
	  NoteStat[i]=1;
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <MidiOn+0x78>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000040 	.word	0x20000040
 8002630:	20018cd4 	.word	0x20018cd4
 8002634:	20000044 	.word	0x20000044
 8002638:	2000007d 	.word	0x2000007d
 800263c:	200000cc 	.word	0x200000cc

08002640 <MidiOff>:
void MidiOff(int i)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit_IT(&huart4, &NoteOff, sizeof(NoteOff));
 8002648:	2201      	movs	r2, #1
 800264a:	4917      	ldr	r1, [pc, #92]	; (80026a8 <MidiOff+0x68>)
 800264c:	4817      	ldr	r0, [pc, #92]	; (80026ac <MidiOff+0x6c>)
 800264e:	f006 f914 	bl	800887a <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002652:	bf00      	nop
 8002654:	4815      	ldr	r0, [pc, #84]	; (80026ac <MidiOff+0x6c>)
 8002656:	f006 fa73 	bl	8008b40 <HAL_UART_GetState>
 800265a:	4603      	mov	r3, r0
 800265c:	2b20      	cmp	r3, #32
 800265e:	d1f9      	bne.n	8002654 <MidiOff+0x14>
	  HAL_UART_Transmit_IT(&huart4, &Note[i], sizeof(Note[i]));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <MidiOff+0x70>)
 8002664:	4413      	add	r3, r2
 8002666:	2201      	movs	r2, #1
 8002668:	4619      	mov	r1, r3
 800266a:	4810      	ldr	r0, [pc, #64]	; (80026ac <MidiOff+0x6c>)
 800266c:	f006 f905 	bl	800887a <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002670:	bf00      	nop
 8002672:	480e      	ldr	r0, [pc, #56]	; (80026ac <MidiOff+0x6c>)
 8002674:	f006 fa64 	bl	8008b40 <HAL_UART_GetState>
 8002678:	4603      	mov	r3, r0
 800267a:	2b20      	cmp	r3, #32
 800267c:	d1f9      	bne.n	8002672 <MidiOff+0x32>
	  HAL_UART_Transmit_IT(&huart4, &NoteVelocity, sizeof(NoteVelocity));
 800267e:	2201      	movs	r2, #1
 8002680:	490c      	ldr	r1, [pc, #48]	; (80026b4 <MidiOff+0x74>)
 8002682:	480a      	ldr	r0, [pc, #40]	; (80026ac <MidiOff+0x6c>)
 8002684:	f006 f8f9 	bl	800887a <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002688:	bf00      	nop
 800268a:	4808      	ldr	r0, [pc, #32]	; (80026ac <MidiOff+0x6c>)
 800268c:	f006 fa58 	bl	8008b40 <HAL_UART_GetState>
 8002690:	4603      	mov	r3, r0
 8002692:	2b20      	cmp	r3, #32
 8002694:	d1f9      	bne.n	800268a <MidiOff+0x4a>
	  NoteStat[i]=0;
 8002696:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <MidiOff+0x78>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000041 	.word	0x20000041
 80026ac:	20018cd4 	.word	0x20018cd4
 80026b0:	20000044 	.word	0x20000044
 80026b4:	2000007d 	.word	0x2000007d
 80026b8:	200000cc 	.word	0x200000cc

080026bc <midi>:
			  }
		  }
	  }
}
void midi(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	  if((HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_SET)&&(NoteStat[0]==0))
 80026c0:	2120      	movs	r1, #32
 80026c2:	48ba      	ldr	r0, [pc, #744]	; (80029ac <midi+0x2f0>)
 80026c4:	f004 fc7e 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d12a      	bne.n	8002724 <midi+0x68>
 80026ce:	4bb8      	ldr	r3, [pc, #736]	; (80029b0 <midi+0x2f4>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d126      	bne.n	8002724 <midi+0x68>
	  {
		  HAL_UART_Transmit_IT(&huart4, &NoteOn, sizeof(NoteOn));
 80026d6:	2201      	movs	r2, #1
 80026d8:	49b6      	ldr	r1, [pc, #728]	; (80029b4 <midi+0x2f8>)
 80026da:	48b7      	ldr	r0, [pc, #732]	; (80029b8 <midi+0x2fc>)
 80026dc:	f006 f8cd 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80026e0:	bf00      	nop
 80026e2:	48b5      	ldr	r0, [pc, #724]	; (80029b8 <midi+0x2fc>)
 80026e4:	f006 fa2c 	bl	8008b40 <HAL_UART_GetState>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d1f9      	bne.n	80026e2 <midi+0x26>
		  HAL_UART_Transmit_IT(&huart4, &Note[0], sizeof(Note[0]));
 80026ee:	2201      	movs	r2, #1
 80026f0:	49b2      	ldr	r1, [pc, #712]	; (80029bc <midi+0x300>)
 80026f2:	48b1      	ldr	r0, [pc, #708]	; (80029b8 <midi+0x2fc>)
 80026f4:	f006 f8c1 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80026f8:	bf00      	nop
 80026fa:	48af      	ldr	r0, [pc, #700]	; (80029b8 <midi+0x2fc>)
 80026fc:	f006 fa20 	bl	8008b40 <HAL_UART_GetState>
 8002700:	4603      	mov	r3, r0
 8002702:	2b20      	cmp	r3, #32
 8002704:	d1f9      	bne.n	80026fa <midi+0x3e>
		  HAL_UART_Transmit_IT(&huart4, &NoteVelocity, sizeof(NoteVelocity));
 8002706:	2201      	movs	r2, #1
 8002708:	49ad      	ldr	r1, [pc, #692]	; (80029c0 <midi+0x304>)
 800270a:	48ab      	ldr	r0, [pc, #684]	; (80029b8 <midi+0x2fc>)
 800270c:	f006 f8b5 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002710:	bf00      	nop
 8002712:	48a9      	ldr	r0, [pc, #676]	; (80029b8 <midi+0x2fc>)
 8002714:	f006 fa14 	bl	8008b40 <HAL_UART_GetState>
 8002718:	4603      	mov	r3, r0
 800271a:	2b20      	cmp	r3, #32
 800271c:	d1f9      	bne.n	8002712 <midi+0x56>
		  NoteStat[0]=1;
 800271e:	4ba4      	ldr	r3, [pc, #656]	; (80029b0 <midi+0x2f4>)
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
	  }
	  if((HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_RESET)&&(NoteStat[0]==1))
 8002724:	2120      	movs	r1, #32
 8002726:	48a1      	ldr	r0, [pc, #644]	; (80029ac <midi+0x2f0>)
 8002728:	f004 fc4c 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d12a      	bne.n	8002788 <midi+0xcc>
 8002732:	4b9f      	ldr	r3, [pc, #636]	; (80029b0 <midi+0x2f4>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d126      	bne.n	8002788 <midi+0xcc>
	  {
			  HAL_UART_Transmit_IT(&huart4, &NoteOff, sizeof(NoteOff));
 800273a:	2201      	movs	r2, #1
 800273c:	49a1      	ldr	r1, [pc, #644]	; (80029c4 <midi+0x308>)
 800273e:	489e      	ldr	r0, [pc, #632]	; (80029b8 <midi+0x2fc>)
 8002740:	f006 f89b 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002744:	bf00      	nop
 8002746:	489c      	ldr	r0, [pc, #624]	; (80029b8 <midi+0x2fc>)
 8002748:	f006 f9fa 	bl	8008b40 <HAL_UART_GetState>
 800274c:	4603      	mov	r3, r0
 800274e:	2b20      	cmp	r3, #32
 8002750:	d1f9      	bne.n	8002746 <midi+0x8a>
			  HAL_UART_Transmit_IT(&huart4, &Note[0], sizeof(Note[0]));
 8002752:	2201      	movs	r2, #1
 8002754:	4999      	ldr	r1, [pc, #612]	; (80029bc <midi+0x300>)
 8002756:	4898      	ldr	r0, [pc, #608]	; (80029b8 <midi+0x2fc>)
 8002758:	f006 f88f 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 800275c:	bf00      	nop
 800275e:	4896      	ldr	r0, [pc, #600]	; (80029b8 <midi+0x2fc>)
 8002760:	f006 f9ee 	bl	8008b40 <HAL_UART_GetState>
 8002764:	4603      	mov	r3, r0
 8002766:	2b20      	cmp	r3, #32
 8002768:	d1f9      	bne.n	800275e <midi+0xa2>
			  HAL_UART_Transmit_IT(&huart4, &NoteVelocity, sizeof(NoteVelocity));
 800276a:	2201      	movs	r2, #1
 800276c:	4994      	ldr	r1, [pc, #592]	; (80029c0 <midi+0x304>)
 800276e:	4892      	ldr	r0, [pc, #584]	; (80029b8 <midi+0x2fc>)
 8002770:	f006 f883 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002774:	bf00      	nop
 8002776:	4890      	ldr	r0, [pc, #576]	; (80029b8 <midi+0x2fc>)
 8002778:	f006 f9e2 	bl	8008b40 <HAL_UART_GetState>
 800277c:	4603      	mov	r3, r0
 800277e:	2b20      	cmp	r3, #32
 8002780:	d1f9      	bne.n	8002776 <midi+0xba>
			  NoteStat[0]=0;
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <midi+0x2f4>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
	  }
	  if((HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)==GPIO_PIN_SET)&&(NoteStat[1]==0))
 8002788:	2110      	movs	r1, #16
 800278a:	4888      	ldr	r0, [pc, #544]	; (80029ac <midi+0x2f0>)
 800278c:	f004 fc1a 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002790:	4603      	mov	r3, r0
 8002792:	2b01      	cmp	r3, #1
 8002794:	d12a      	bne.n	80027ec <midi+0x130>
 8002796:	4b86      	ldr	r3, [pc, #536]	; (80029b0 <midi+0x2f4>)
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d126      	bne.n	80027ec <midi+0x130>
	  {
		  HAL_UART_Transmit_IT(&huart4, &NoteOn, sizeof(NoteOn));
 800279e:	2201      	movs	r2, #1
 80027a0:	4984      	ldr	r1, [pc, #528]	; (80029b4 <midi+0x2f8>)
 80027a2:	4885      	ldr	r0, [pc, #532]	; (80029b8 <midi+0x2fc>)
 80027a4:	f006 f869 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80027a8:	bf00      	nop
 80027aa:	4883      	ldr	r0, [pc, #524]	; (80029b8 <midi+0x2fc>)
 80027ac:	f006 f9c8 	bl	8008b40 <HAL_UART_GetState>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d1f9      	bne.n	80027aa <midi+0xee>
		  HAL_UART_Transmit_IT(&huart4, &Note[1], sizeof(Note[1]));
 80027b6:	2201      	movs	r2, #1
 80027b8:	4983      	ldr	r1, [pc, #524]	; (80029c8 <midi+0x30c>)
 80027ba:	487f      	ldr	r0, [pc, #508]	; (80029b8 <midi+0x2fc>)
 80027bc:	f006 f85d 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80027c0:	bf00      	nop
 80027c2:	487d      	ldr	r0, [pc, #500]	; (80029b8 <midi+0x2fc>)
 80027c4:	f006 f9bc 	bl	8008b40 <HAL_UART_GetState>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d1f9      	bne.n	80027c2 <midi+0x106>
		  HAL_UART_Transmit_IT(&huart4, &NoteVelocity, sizeof(NoteVelocity));
 80027ce:	2201      	movs	r2, #1
 80027d0:	497b      	ldr	r1, [pc, #492]	; (80029c0 <midi+0x304>)
 80027d2:	4879      	ldr	r0, [pc, #484]	; (80029b8 <midi+0x2fc>)
 80027d4:	f006 f851 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80027d8:	bf00      	nop
 80027da:	4877      	ldr	r0, [pc, #476]	; (80029b8 <midi+0x2fc>)
 80027dc:	f006 f9b0 	bl	8008b40 <HAL_UART_GetState>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d1f9      	bne.n	80027da <midi+0x11e>
		  NoteStat[1]=1;
 80027e6:	4b72      	ldr	r3, [pc, #456]	; (80029b0 <midi+0x2f4>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	705a      	strb	r2, [r3, #1]
	  }
	  if((HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)==GPIO_PIN_RESET)&&(NoteStat[1]==1))
 80027ec:	2110      	movs	r1, #16
 80027ee:	486f      	ldr	r0, [pc, #444]	; (80029ac <midi+0x2f0>)
 80027f0:	f004 fbe8 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d12a      	bne.n	8002850 <midi+0x194>
 80027fa:	4b6d      	ldr	r3, [pc, #436]	; (80029b0 <midi+0x2f4>)
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d126      	bne.n	8002850 <midi+0x194>
	  {
			  HAL_UART_Transmit_IT(&huart4, &NoteOff, sizeof(NoteOff));
 8002802:	2201      	movs	r2, #1
 8002804:	496f      	ldr	r1, [pc, #444]	; (80029c4 <midi+0x308>)
 8002806:	486c      	ldr	r0, [pc, #432]	; (80029b8 <midi+0x2fc>)
 8002808:	f006 f837 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 800280c:	bf00      	nop
 800280e:	486a      	ldr	r0, [pc, #424]	; (80029b8 <midi+0x2fc>)
 8002810:	f006 f996 	bl	8008b40 <HAL_UART_GetState>
 8002814:	4603      	mov	r3, r0
 8002816:	2b20      	cmp	r3, #32
 8002818:	d1f9      	bne.n	800280e <midi+0x152>
			  HAL_UART_Transmit_IT(&huart4, &Note[1], sizeof(Note[1]));
 800281a:	2201      	movs	r2, #1
 800281c:	496a      	ldr	r1, [pc, #424]	; (80029c8 <midi+0x30c>)
 800281e:	4866      	ldr	r0, [pc, #408]	; (80029b8 <midi+0x2fc>)
 8002820:	f006 f82b 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002824:	bf00      	nop
 8002826:	4864      	ldr	r0, [pc, #400]	; (80029b8 <midi+0x2fc>)
 8002828:	f006 f98a 	bl	8008b40 <HAL_UART_GetState>
 800282c:	4603      	mov	r3, r0
 800282e:	2b20      	cmp	r3, #32
 8002830:	d1f9      	bne.n	8002826 <midi+0x16a>
			  HAL_UART_Transmit_IT(&huart4, &NoteVelocity, sizeof(NoteVelocity));
 8002832:	2201      	movs	r2, #1
 8002834:	4962      	ldr	r1, [pc, #392]	; (80029c0 <midi+0x304>)
 8002836:	4860      	ldr	r0, [pc, #384]	; (80029b8 <midi+0x2fc>)
 8002838:	f006 f81f 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 800283c:	bf00      	nop
 800283e:	485e      	ldr	r0, [pc, #376]	; (80029b8 <midi+0x2fc>)
 8002840:	f006 f97e 	bl	8008b40 <HAL_UART_GetState>
 8002844:	4603      	mov	r3, r0
 8002846:	2b20      	cmp	r3, #32
 8002848:	d1f9      	bne.n	800283e <midi+0x182>
			  NoteStat[1]=0;
 800284a:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <midi+0x2f4>)
 800284c:	2200      	movs	r2, #0
 800284e:	705a      	strb	r2, [r3, #1]
	  }
	  if((HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)==GPIO_PIN_SET)&&(NoteStat[2]==0))
 8002850:	2108      	movs	r1, #8
 8002852:	4856      	ldr	r0, [pc, #344]	; (80029ac <midi+0x2f0>)
 8002854:	f004 fbb6 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d12a      	bne.n	80028b4 <midi+0x1f8>
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <midi+0x2f4>)
 8002860:	789b      	ldrb	r3, [r3, #2]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d126      	bne.n	80028b4 <midi+0x1f8>
	  {
		  HAL_UART_Transmit_IT(&huart4, &NoteOn, sizeof(NoteOn));
 8002866:	2201      	movs	r2, #1
 8002868:	4952      	ldr	r1, [pc, #328]	; (80029b4 <midi+0x2f8>)
 800286a:	4853      	ldr	r0, [pc, #332]	; (80029b8 <midi+0x2fc>)
 800286c:	f006 f805 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002870:	bf00      	nop
 8002872:	4851      	ldr	r0, [pc, #324]	; (80029b8 <midi+0x2fc>)
 8002874:	f006 f964 	bl	8008b40 <HAL_UART_GetState>
 8002878:	4603      	mov	r3, r0
 800287a:	2b20      	cmp	r3, #32
 800287c:	d1f9      	bne.n	8002872 <midi+0x1b6>
		  HAL_UART_Transmit_IT(&huart4, &Note[2], sizeof(Note[2]));
 800287e:	2201      	movs	r2, #1
 8002880:	4952      	ldr	r1, [pc, #328]	; (80029cc <midi+0x310>)
 8002882:	484d      	ldr	r0, [pc, #308]	; (80029b8 <midi+0x2fc>)
 8002884:	f005 fff9 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002888:	bf00      	nop
 800288a:	484b      	ldr	r0, [pc, #300]	; (80029b8 <midi+0x2fc>)
 800288c:	f006 f958 	bl	8008b40 <HAL_UART_GetState>
 8002890:	4603      	mov	r3, r0
 8002892:	2b20      	cmp	r3, #32
 8002894:	d1f9      	bne.n	800288a <midi+0x1ce>
		  HAL_UART_Transmit_IT(&huart4, &NoteVelocity, sizeof(NoteVelocity));
 8002896:	2201      	movs	r2, #1
 8002898:	4949      	ldr	r1, [pc, #292]	; (80029c0 <midi+0x304>)
 800289a:	4847      	ldr	r0, [pc, #284]	; (80029b8 <midi+0x2fc>)
 800289c:	f005 ffed 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80028a0:	bf00      	nop
 80028a2:	4845      	ldr	r0, [pc, #276]	; (80029b8 <midi+0x2fc>)
 80028a4:	f006 f94c 	bl	8008b40 <HAL_UART_GetState>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d1f9      	bne.n	80028a2 <midi+0x1e6>
		  NoteStat[2]=1;
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <midi+0x2f4>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	709a      	strb	r2, [r3, #2]
	  }
	  if((HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)==GPIO_PIN_RESET)&&(NoteStat[2]==1))
 80028b4:	2108      	movs	r1, #8
 80028b6:	483d      	ldr	r0, [pc, #244]	; (80029ac <midi+0x2f0>)
 80028b8:	f004 fb84 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d12a      	bne.n	8002918 <midi+0x25c>
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <midi+0x2f4>)
 80028c4:	789b      	ldrb	r3, [r3, #2]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d126      	bne.n	8002918 <midi+0x25c>
	  {
			  HAL_UART_Transmit_IT(&huart4, &NoteOff, sizeof(NoteOff));
 80028ca:	2201      	movs	r2, #1
 80028cc:	493d      	ldr	r1, [pc, #244]	; (80029c4 <midi+0x308>)
 80028ce:	483a      	ldr	r0, [pc, #232]	; (80029b8 <midi+0x2fc>)
 80028d0:	f005 ffd3 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80028d4:	bf00      	nop
 80028d6:	4838      	ldr	r0, [pc, #224]	; (80029b8 <midi+0x2fc>)
 80028d8:	f006 f932 	bl	8008b40 <HAL_UART_GetState>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d1f9      	bne.n	80028d6 <midi+0x21a>
			  HAL_UART_Transmit_IT(&huart4, &Note[2], sizeof(Note[2]));
 80028e2:	2201      	movs	r2, #1
 80028e4:	4939      	ldr	r1, [pc, #228]	; (80029cc <midi+0x310>)
 80028e6:	4834      	ldr	r0, [pc, #208]	; (80029b8 <midi+0x2fc>)
 80028e8:	f005 ffc7 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80028ec:	bf00      	nop
 80028ee:	4832      	ldr	r0, [pc, #200]	; (80029b8 <midi+0x2fc>)
 80028f0:	f006 f926 	bl	8008b40 <HAL_UART_GetState>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d1f9      	bne.n	80028ee <midi+0x232>
			  HAL_UART_Transmit_IT(&huart4, &NoteVelocity, sizeof(NoteVelocity));
 80028fa:	2201      	movs	r2, #1
 80028fc:	4930      	ldr	r1, [pc, #192]	; (80029c0 <midi+0x304>)
 80028fe:	482e      	ldr	r0, [pc, #184]	; (80029b8 <midi+0x2fc>)
 8002900:	f005 ffbb 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002904:	bf00      	nop
 8002906:	482c      	ldr	r0, [pc, #176]	; (80029b8 <midi+0x2fc>)
 8002908:	f006 f91a 	bl	8008b40 <HAL_UART_GetState>
 800290c:	4603      	mov	r3, r0
 800290e:	2b20      	cmp	r3, #32
 8002910:	d1f9      	bne.n	8002906 <midi+0x24a>
			  NoteStat[2]=0;
 8002912:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <midi+0x2f4>)
 8002914:	2200      	movs	r2, #0
 8002916:	709a      	strb	r2, [r3, #2]
	  }
	  if((HAL_GPIO_ReadPin(B4_GPIO_Port, B4_Pin)==GPIO_PIN_SET)&&(NoteStat[3]==0))
 8002918:	2104      	movs	r1, #4
 800291a:	4824      	ldr	r0, [pc, #144]	; (80029ac <midi+0x2f0>)
 800291c:	f004 fb52 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002920:	4603      	mov	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d12a      	bne.n	800297c <midi+0x2c0>
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <midi+0x2f4>)
 8002928:	78db      	ldrb	r3, [r3, #3]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d126      	bne.n	800297c <midi+0x2c0>
	  {
		  HAL_UART_Transmit_IT(&huart4, &NoteOn, sizeof(NoteOn));
 800292e:	2201      	movs	r2, #1
 8002930:	4920      	ldr	r1, [pc, #128]	; (80029b4 <midi+0x2f8>)
 8002932:	4821      	ldr	r0, [pc, #132]	; (80029b8 <midi+0x2fc>)
 8002934:	f005 ffa1 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002938:	bf00      	nop
 800293a:	481f      	ldr	r0, [pc, #124]	; (80029b8 <midi+0x2fc>)
 800293c:	f006 f900 	bl	8008b40 <HAL_UART_GetState>
 8002940:	4603      	mov	r3, r0
 8002942:	2b20      	cmp	r3, #32
 8002944:	d1f9      	bne.n	800293a <midi+0x27e>
		  HAL_UART_Transmit_IT(&huart4, &Note[3], sizeof(Note[3]));
 8002946:	2201      	movs	r2, #1
 8002948:	4921      	ldr	r1, [pc, #132]	; (80029d0 <midi+0x314>)
 800294a:	481b      	ldr	r0, [pc, #108]	; (80029b8 <midi+0x2fc>)
 800294c:	f005 ff95 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002950:	bf00      	nop
 8002952:	4819      	ldr	r0, [pc, #100]	; (80029b8 <midi+0x2fc>)
 8002954:	f006 f8f4 	bl	8008b40 <HAL_UART_GetState>
 8002958:	4603      	mov	r3, r0
 800295a:	2b20      	cmp	r3, #32
 800295c:	d1f9      	bne.n	8002952 <midi+0x296>
		  HAL_UART_Transmit_IT(&huart4, &NoteVelocity, sizeof(NoteVelocity));
 800295e:	2201      	movs	r2, #1
 8002960:	4917      	ldr	r1, [pc, #92]	; (80029c0 <midi+0x304>)
 8002962:	4815      	ldr	r0, [pc, #84]	; (80029b8 <midi+0x2fc>)
 8002964:	f005 ff89 	bl	800887a <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 8002968:	bf00      	nop
 800296a:	4813      	ldr	r0, [pc, #76]	; (80029b8 <midi+0x2fc>)
 800296c:	f006 f8e8 	bl	8008b40 <HAL_UART_GetState>
 8002970:	4603      	mov	r3, r0
 8002972:	2b20      	cmp	r3, #32
 8002974:	d1f9      	bne.n	800296a <midi+0x2ae>
		  NoteStat[3]=1;
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <midi+0x2f4>)
 8002978:	2201      	movs	r2, #1
 800297a:	70da      	strb	r2, [r3, #3]
	  }
	  if((HAL_GPIO_ReadPin(B4_GPIO_Port, B4_Pin)==GPIO_PIN_RESET)&&(NoteStat[3]==1))
 800297c:	2104      	movs	r1, #4
 800297e:	480b      	ldr	r0, [pc, #44]	; (80029ac <midi+0x2f0>)
 8002980:	f004 fb20 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d13f      	bne.n	8002a0a <midi+0x34e>
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <midi+0x2f4>)
 800298c:	78db      	ldrb	r3, [r3, #3]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d13b      	bne.n	8002a0a <midi+0x34e>
	  {
			  HAL_UART_Transmit_IT(&huart4, &NoteOff, sizeof(NoteOff));
 8002992:	2201      	movs	r2, #1
 8002994:	490b      	ldr	r1, [pc, #44]	; (80029c4 <midi+0x308>)
 8002996:	4808      	ldr	r0, [pc, #32]	; (80029b8 <midi+0x2fc>)
 8002998:	f005 ff6f 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 800299c:	bf00      	nop
 800299e:	4806      	ldr	r0, [pc, #24]	; (80029b8 <midi+0x2fc>)
 80029a0:	f006 f8ce 	bl	8008b40 <HAL_UART_GetState>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d1f9      	bne.n	800299e <midi+0x2e2>
 80029aa:	e013      	b.n	80029d4 <midi+0x318>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	200000cc 	.word	0x200000cc
 80029b4:	20000040 	.word	0x20000040
 80029b8:	20018cd4 	.word	0x20018cd4
 80029bc:	20000044 	.word	0x20000044
 80029c0:	2000007d 	.word	0x2000007d
 80029c4:	20000041 	.word	0x20000041
 80029c8:	20000045 	.word	0x20000045
 80029cc:	20000046 	.word	0x20000046
 80029d0:	20000047 	.word	0x20000047
			  HAL_UART_Transmit_IT(&huart4, &Note[3], sizeof(Note[3]));
 80029d4:	2201      	movs	r2, #1
 80029d6:	49b6      	ldr	r1, [pc, #728]	; (8002cb0 <midi+0x5f4>)
 80029d8:	48b6      	ldr	r0, [pc, #728]	; (8002cb4 <midi+0x5f8>)
 80029da:	f005 ff4e 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80029de:	bf00      	nop
 80029e0:	48b4      	ldr	r0, [pc, #720]	; (8002cb4 <midi+0x5f8>)
 80029e2:	f006 f8ad 	bl	8008b40 <HAL_UART_GetState>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d1f9      	bne.n	80029e0 <midi+0x324>
			  HAL_UART_Transmit_IT(&huart4, &NoteVelocity, sizeof(NoteVelocity));
 80029ec:	2201      	movs	r2, #1
 80029ee:	49b2      	ldr	r1, [pc, #712]	; (8002cb8 <midi+0x5fc>)
 80029f0:	48b0      	ldr	r0, [pc, #704]	; (8002cb4 <midi+0x5f8>)
 80029f2:	f005 ff42 	bl	800887a <HAL_UART_Transmit_IT>
			  while(HAL_UART_GetState(&huart4)!=HAL_UART_STATE_READY){}
 80029f6:	bf00      	nop
 80029f8:	48ae      	ldr	r0, [pc, #696]	; (8002cb4 <midi+0x5f8>)
 80029fa:	f006 f8a1 	bl	8008b40 <HAL_UART_GetState>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d1f9      	bne.n	80029f8 <midi+0x33c>
			  NoteStat[3]=0;
 8002a04:	4bad      	ldr	r3, [pc, #692]	; (8002cbc <midi+0x600>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	70da      	strb	r2, [r3, #3]
	  }
	  if((HAL_GPIO_ReadPin(B5_GPIO_Port, B5_Pin)==GPIO_PIN_SET)&&(NoteStat[4]==0))
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	48ac      	ldr	r0, [pc, #688]	; (8002cc0 <midi+0x604>)
 8002a0e:	f004 fad9 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d106      	bne.n	8002a26 <midi+0x36a>
 8002a18:	4ba8      	ldr	r3, [pc, #672]	; (8002cbc <midi+0x600>)
 8002a1a:	791b      	ldrb	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <midi+0x36a>
	  {
		  MidiOn(4);
 8002a20:	2004      	movs	r0, #4
 8002a22:	f7ff fdcf 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B5_GPIO_Port, B5_Pin)==GPIO_PIN_RESET)&&(NoteStat[4]==1))
 8002a26:	2102      	movs	r1, #2
 8002a28:	48a5      	ldr	r0, [pc, #660]	; (8002cc0 <midi+0x604>)
 8002a2a:	f004 facb 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d106      	bne.n	8002a42 <midi+0x386>
 8002a34:	4ba1      	ldr	r3, [pc, #644]	; (8002cbc <midi+0x600>)
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d102      	bne.n	8002a42 <midi+0x386>
	  {
		  MidiOff(4);
 8002a3c:	2004      	movs	r0, #4
 8002a3e:	f7ff fdff 	bl	8002640 <MidiOff>
	  }

	  if((HAL_GPIO_ReadPin(B6_GPIO_Port, B6_Pin)==GPIO_PIN_SET)&&(NoteStat[5]==0))
 8002a42:	2101      	movs	r1, #1
 8002a44:	489e      	ldr	r0, [pc, #632]	; (8002cc0 <midi+0x604>)
 8002a46:	f004 fabd 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d106      	bne.n	8002a5e <midi+0x3a2>
 8002a50:	4b9a      	ldr	r3, [pc, #616]	; (8002cbc <midi+0x600>)
 8002a52:	795b      	ldrb	r3, [r3, #5]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <midi+0x3a2>
	  {
		  MidiOn(5);
 8002a58:	2005      	movs	r0, #5
 8002a5a:	f7ff fdb3 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B6_GPIO_Port, B6_Pin)==GPIO_PIN_RESET)&&(NoteStat[5]==1))
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4897      	ldr	r0, [pc, #604]	; (8002cc0 <midi+0x604>)
 8002a62:	f004 faaf 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <midi+0x3be>
 8002a6c:	4b93      	ldr	r3, [pc, #588]	; (8002cbc <midi+0x600>)
 8002a6e:	795b      	ldrb	r3, [r3, #5]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d102      	bne.n	8002a7a <midi+0x3be>
	  {
		  MidiOff(5);
 8002a74:	2005      	movs	r0, #5
 8002a76:	f7ff fde3 	bl	8002640 <MidiOff>
	  }

	  if((HAL_GPIO_ReadPin(B7_GPIO_Port, B7_Pin)==GPIO_PIN_SET)&&(NoteStat[6]==0))
 8002a7a:	2180      	movs	r1, #128	; 0x80
 8002a7c:	4891      	ldr	r0, [pc, #580]	; (8002cc4 <midi+0x608>)
 8002a7e:	f004 faa1 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <midi+0x3da>
 8002a88:	4b8c      	ldr	r3, [pc, #560]	; (8002cbc <midi+0x600>)
 8002a8a:	799b      	ldrb	r3, [r3, #6]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <midi+0x3da>
	  {
		  MidiOn(6);
 8002a90:	2006      	movs	r0, #6
 8002a92:	f7ff fd97 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B7_GPIO_Port, B7_Pin)==GPIO_PIN_RESET)&&(NoteStat[6]==1))
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	488a      	ldr	r0, [pc, #552]	; (8002cc4 <midi+0x608>)
 8002a9a:	f004 fa93 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d106      	bne.n	8002ab2 <midi+0x3f6>
 8002aa4:	4b85      	ldr	r3, [pc, #532]	; (8002cbc <midi+0x600>)
 8002aa6:	799b      	ldrb	r3, [r3, #6]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d102      	bne.n	8002ab2 <midi+0x3f6>
	  {
		  MidiOff(6);
 8002aac:	2006      	movs	r0, #6
 8002aae:	f7ff fdc7 	bl	8002640 <MidiOff>
	  }

	  if((HAL_GPIO_ReadPin(B8_GPIO_Port, B8_Pin)==GPIO_PIN_SET)&&(NoteStat[7]==0))
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4884      	ldr	r0, [pc, #528]	; (8002cc8 <midi+0x60c>)
 8002ab6:	f004 fa85 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <midi+0x412>
 8002ac0:	4b7e      	ldr	r3, [pc, #504]	; (8002cbc <midi+0x600>)
 8002ac2:	79db      	ldrb	r3, [r3, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <midi+0x412>
	  {
		  MidiOn(7);
 8002ac8:	2007      	movs	r0, #7
 8002aca:	f7ff fd7b 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B8_GPIO_Port, B8_Pin)==GPIO_PIN_RESET)&&(NoteStat[7]==1))
 8002ace:	2102      	movs	r1, #2
 8002ad0:	487d      	ldr	r0, [pc, #500]	; (8002cc8 <midi+0x60c>)
 8002ad2:	f004 fa77 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d106      	bne.n	8002aea <midi+0x42e>
 8002adc:	4b77      	ldr	r3, [pc, #476]	; (8002cbc <midi+0x600>)
 8002ade:	79db      	ldrb	r3, [r3, #7]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d102      	bne.n	8002aea <midi+0x42e>
	  {
		  MidiOff(7);
 8002ae4:	2007      	movs	r0, #7
 8002ae6:	f7ff fdab 	bl	8002640 <MidiOff>
	  }

	  if((HAL_GPIO_ReadPin(B9_GPIO_Port, B9_Pin)==GPIO_PIN_SET)&&(NoteStat[8]==0))
 8002aea:	2120      	movs	r1, #32
 8002aec:	4875      	ldr	r0, [pc, #468]	; (8002cc4 <midi+0x608>)
 8002aee:	f004 fa69 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d106      	bne.n	8002b06 <midi+0x44a>
 8002af8:	4b70      	ldr	r3, [pc, #448]	; (8002cbc <midi+0x600>)
 8002afa:	7a1b      	ldrb	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <midi+0x44a>
	  {
		  MidiOn(8);
 8002b00:	2008      	movs	r0, #8
 8002b02:	f7ff fd5f 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B9_GPIO_Port, B9_Pin)==GPIO_PIN_RESET)&&(NoteStat[8]==1))
 8002b06:	2120      	movs	r1, #32
 8002b08:	486e      	ldr	r0, [pc, #440]	; (8002cc4 <midi+0x608>)
 8002b0a:	f004 fa5b 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d106      	bne.n	8002b22 <midi+0x466>
 8002b14:	4b69      	ldr	r3, [pc, #420]	; (8002cbc <midi+0x600>)
 8002b16:	7a1b      	ldrb	r3, [r3, #8]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d102      	bne.n	8002b22 <midi+0x466>
	  {
		  MidiOff(8);
 8002b1c:	2008      	movs	r0, #8
 8002b1e:	f7ff fd8f 	bl	8002640 <MidiOff>
	  }

	  if((HAL_GPIO_ReadPin(B10_GPIO_Port, B10_Pin)==GPIO_PIN_SET)&&(NoteStat[9]==0))
 8002b22:	2110      	movs	r1, #16
 8002b24:	4867      	ldr	r0, [pc, #412]	; (8002cc4 <midi+0x608>)
 8002b26:	f004 fa4d 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d106      	bne.n	8002b3e <midi+0x482>
 8002b30:	4b62      	ldr	r3, [pc, #392]	; (8002cbc <midi+0x600>)
 8002b32:	7a5b      	ldrb	r3, [r3, #9]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <midi+0x482>
	  {
		  MidiOn(9);
 8002b38:	2009      	movs	r0, #9
 8002b3a:	f7ff fd43 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B10_GPIO_Port, B10_Pin)==GPIO_PIN_RESET)&&(NoteStat[9]==1))
 8002b3e:	2110      	movs	r1, #16
 8002b40:	4860      	ldr	r0, [pc, #384]	; (8002cc4 <midi+0x608>)
 8002b42:	f004 fa3f 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d106      	bne.n	8002b5a <midi+0x49e>
 8002b4c:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <midi+0x600>)
 8002b4e:	7a5b      	ldrb	r3, [r3, #9]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d102      	bne.n	8002b5a <midi+0x49e>
	  {
		  MidiOff(9);
 8002b54:	2009      	movs	r0, #9
 8002b56:	f7ff fd73 	bl	8002640 <MidiOff>
	  }
	  if((HAL_GPIO_ReadPin(B11_GPIO_Port, B11_Pin)==GPIO_PIN_SET)&&(NoteStat[10]==0))
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	4859      	ldr	r0, [pc, #356]	; (8002cc4 <midi+0x608>)
 8002b5e:	f004 fa31 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d106      	bne.n	8002b76 <midi+0x4ba>
 8002b68:	4b54      	ldr	r3, [pc, #336]	; (8002cbc <midi+0x600>)
 8002b6a:	7a9b      	ldrb	r3, [r3, #10]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <midi+0x4ba>
	  {
		  MidiOn(10);
 8002b70:	200a      	movs	r0, #10
 8002b72:	f7ff fd27 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B11_GPIO_Port, B11_Pin)==GPIO_PIN_RESET)&&(NoteStat[10]==1))
 8002b76:	2108      	movs	r1, #8
 8002b78:	4852      	ldr	r0, [pc, #328]	; (8002cc4 <midi+0x608>)
 8002b7a:	f004 fa23 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <midi+0x4d6>
 8002b84:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <midi+0x600>)
 8002b86:	7a9b      	ldrb	r3, [r3, #10]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d102      	bne.n	8002b92 <midi+0x4d6>
	  {
		  MidiOff(10);
 8002b8c:	200a      	movs	r0, #10
 8002b8e:	f7ff fd57 	bl	8002640 <MidiOff>
	  }

	  if((HAL_GPIO_ReadPin(B12_GPIO_Port, B12_Pin)==GPIO_PIN_SET)&&(NoteStat[11]==0))
 8002b92:	2180      	movs	r1, #128	; 0x80
 8002b94:	484c      	ldr	r0, [pc, #304]	; (8002cc8 <midi+0x60c>)
 8002b96:	f004 fa15 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d106      	bne.n	8002bae <midi+0x4f2>
 8002ba0:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <midi+0x600>)
 8002ba2:	7adb      	ldrb	r3, [r3, #11]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <midi+0x4f2>
	  {
		  MidiOn(11);
 8002ba8:	200b      	movs	r0, #11
 8002baa:	f7ff fd0b 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B12_GPIO_Port, B12_Pin)==GPIO_PIN_RESET)&&(NoteStat[11]==1))
 8002bae:	2180      	movs	r1, #128	; 0x80
 8002bb0:	4845      	ldr	r0, [pc, #276]	; (8002cc8 <midi+0x60c>)
 8002bb2:	f004 fa07 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d106      	bne.n	8002bca <midi+0x50e>
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <midi+0x600>)
 8002bbe:	7adb      	ldrb	r3, [r3, #11]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d102      	bne.n	8002bca <midi+0x50e>
	  {
		  MidiOff(11);
 8002bc4:	200b      	movs	r0, #11
 8002bc6:	f7ff fd3b 	bl	8002640 <MidiOff>
	  }

	  if((HAL_GPIO_ReadPin(B13_GPIO_Port, B13_Pin)==GPIO_PIN_SET)&&(NoteStat[12]==0))
 8002bca:	2140      	movs	r1, #64	; 0x40
 8002bcc:	483e      	ldr	r0, [pc, #248]	; (8002cc8 <midi+0x60c>)
 8002bce:	f004 f9f9 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d106      	bne.n	8002be6 <midi+0x52a>
 8002bd8:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <midi+0x600>)
 8002bda:	7b1b      	ldrb	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <midi+0x52a>
	  {
		  MidiOn(12);
 8002be0:	200c      	movs	r0, #12
 8002be2:	f7ff fcef 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B13_GPIO_Port, B13_Pin)==GPIO_PIN_RESET)&&(NoteStat[12]==1))
 8002be6:	2140      	movs	r1, #64	; 0x40
 8002be8:	4837      	ldr	r0, [pc, #220]	; (8002cc8 <midi+0x60c>)
 8002bea:	f004 f9eb 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <midi+0x546>
 8002bf4:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <midi+0x600>)
 8002bf6:	7b1b      	ldrb	r3, [r3, #12]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d102      	bne.n	8002c02 <midi+0x546>
	  {
		  MidiOff(12);
 8002bfc:	200c      	movs	r0, #12
 8002bfe:	f7ff fd1f 	bl	8002640 <MidiOff>
	  }

	  if((HAL_GPIO_ReadPin(B14_GPIO_Port, B14_Pin)==GPIO_PIN_SET)&&(NoteStat[13]==0))
 8002c02:	2104      	movs	r1, #4
 8002c04:	4830      	ldr	r0, [pc, #192]	; (8002cc8 <midi+0x60c>)
 8002c06:	f004 f9dd 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <midi+0x562>
 8002c10:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <midi+0x600>)
 8002c12:	7b5b      	ldrb	r3, [r3, #13]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <midi+0x562>
	  {
		  MidiOn(13);
 8002c18:	200d      	movs	r0, #13
 8002c1a:	f7ff fcd3 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B14_GPIO_Port, B14_Pin)==GPIO_PIN_RESET)&&(NoteStat[13]==1))
 8002c1e:	2104      	movs	r1, #4
 8002c20:	4829      	ldr	r0, [pc, #164]	; (8002cc8 <midi+0x60c>)
 8002c22:	f004 f9cf 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <midi+0x57e>
 8002c2c:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <midi+0x600>)
 8002c2e:	7b5b      	ldrb	r3, [r3, #13]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d102      	bne.n	8002c3a <midi+0x57e>
	  {
		  MidiOff(13);
 8002c34:	200d      	movs	r0, #13
 8002c36:	f7ff fd03 	bl	8002640 <MidiOff>
	  }

	  if((HAL_GPIO_ReadPin(B15_GPIO_Port, B15_Pin)==GPIO_PIN_SET)&&(NoteStat[14]==0))
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	4822      	ldr	r0, [pc, #136]	; (8002cc8 <midi+0x60c>)
 8002c3e:	f004 f9c1 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <midi+0x59a>
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <midi+0x600>)
 8002c4a:	7b9b      	ldrb	r3, [r3, #14]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <midi+0x59a>
	  {
		  MidiOn(14);
 8002c50:	200e      	movs	r0, #14
 8002c52:	f7ff fcb7 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B15_GPIO_Port, B15_Pin)==GPIO_PIN_RESET)&&(NoteStat[14]==1))
 8002c56:	2110      	movs	r1, #16
 8002c58:	481b      	ldr	r0, [pc, #108]	; (8002cc8 <midi+0x60c>)
 8002c5a:	f004 f9b3 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <midi+0x5b6>
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <midi+0x600>)
 8002c66:	7b9b      	ldrb	r3, [r3, #14]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d102      	bne.n	8002c72 <midi+0x5b6>
	  {
		  MidiOff(14);
 8002c6c:	200e      	movs	r0, #14
 8002c6e:	f7ff fce7 	bl	8002640 <MidiOff>
	  }

	  if((HAL_GPIO_ReadPin(B16_GPIO_Port, B16_Pin)==GPIO_PIN_SET)&&(NoteStat[15]==0))
 8002c72:	2108      	movs	r1, #8
 8002c74:	4814      	ldr	r0, [pc, #80]	; (8002cc8 <midi+0x60c>)
 8002c76:	f004 f9a5 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <midi+0x5d2>
 8002c80:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <midi+0x600>)
 8002c82:	7bdb      	ldrb	r3, [r3, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <midi+0x5d2>
	  {
		  MidiOn(15);
 8002c88:	200f      	movs	r0, #15
 8002c8a:	f7ff fc9b 	bl	80025c4 <MidiOn>
	  }
	  if((HAL_GPIO_ReadPin(B16_GPIO_Port, B16_Pin)==GPIO_PIN_RESET)&&(NoteStat[15]==1))
 8002c8e:	2108      	movs	r1, #8
 8002c90:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <midi+0x60c>)
 8002c92:	f004 f997 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d106      	bne.n	8002caa <midi+0x5ee>
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <midi+0x600>)
 8002c9e:	7bdb      	ldrb	r3, [r3, #15]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d102      	bne.n	8002caa <midi+0x5ee>
	  {
		  MidiOff(15);
 8002ca4:	200f      	movs	r0, #15
 8002ca6:	f7ff fccb 	bl	8002640 <MidiOff>
	  }
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000047 	.word	0x20000047
 8002cb4:	20018cd4 	.word	0x20018cd4
 8002cb8:	2000007d 	.word	0x2000007d
 8002cbc:	200000cc 	.word	0x200000cc
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40020c00 	.word	0x40020c00

08002ccc <play>:
void play(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af02      	add	r7, sp, #8
	  lcd_init();
 8002cd2:	f7fe fd69 	bl	80017a8 <lcd_init>
	  lcd_clear();
 8002cd6:	f7fe fd31 	bl	800173c <lcd_clear>
	  lcd_put_cur(0,0);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7fe fd44 	bl	800176a <lcd_put_cur>
	  lcd_send_string(&"   Enjoy   ");
 8002ce2:	48a6      	ldr	r0, [pc, #664]	; (8002f7c <play+0x2b0>)
 8002ce4:	f7fe fd9d 	bl	8001822 <lcd_send_string>
	  while(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_RESET)
 8002ce8:	f001 b8ab 	b.w	8003e42 <play+0x1176>
	  {
		    HAL_TIM_Base_Stop(&htim2);
 8002cec:	48a4      	ldr	r0, [pc, #656]	; (8002f80 <play+0x2b4>)
 8002cee:	f005 fad2 	bl	8008296 <HAL_TIM_Base_Stop>
		    HAL_TIM_Base_DeInit(&htim2);
 8002cf2:	48a3      	ldr	r0, [pc, #652]	; (8002f80 <play+0x2b4>)
 8002cf4:	f005 fa7b 	bl	80081ee <HAL_TIM_Base_DeInit>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	48a2      	ldr	r0, [pc, #648]	; (8002f84 <play+0x2b8>)
 8002cfc:	f003 f892 	bl	8005e24 <HAL_DAC_Stop_DMA>
		  //Note 1
		  if((HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_SET)&&(NoteStat[0]==0))
 8002d00:	2120      	movs	r1, #32
 8002d02:	48a1      	ldr	r0, [pc, #644]	; (8002f88 <play+0x2bc>)
 8002d04:	f004 f95e 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d155      	bne.n	8002dba <play+0xee>
 8002d0e:	4b9f      	ldr	r3, [pc, #636]	; (8002f8c <play+0x2c0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d151      	bne.n	8002dba <play+0xee>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 8002d16:	489a      	ldr	r0, [pc, #616]	; (8002f80 <play+0x2b4>)
 8002d18:	f005 fa69 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[0]);
 8002d1c:	4b9c      	ldr	r3, [pc, #624]	; (8002f90 <play+0x2c4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f002 f895 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8002d26:	4b9b      	ldr	r3, [pc, #620]	; (8002f94 <play+0x2c8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	9200      	str	r2, [sp, #0]
 8002d2e:	4a9a      	ldr	r2, [pc, #616]	; (8002f98 <play+0x2cc>)
 8002d30:	2100      	movs	r1, #0
 8002d32:	4894      	ldr	r0, [pc, #592]	; (8002f84 <play+0x2b8>)
 8002d34:	f002 ffba 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8002d38:	4891      	ldr	r0, [pc, #580]	; (8002f80 <play+0x2b4>)
 8002d3a:	f005 fa88 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002d3e:	bf00      	nop
 8002d40:	4890      	ldr	r0, [pc, #576]	; (8002f84 <play+0x2b8>)
 8002d42:	f003 f91b 	bl	8005f7c <HAL_DAC_GetState>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d1f9      	bne.n	8002d40 <play+0x74>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	488d      	ldr	r0, [pc, #564]	; (8002f84 <play+0x2b8>)
 8002d50:	f003 f868 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 8002d54:	4b91      	ldr	r3, [pc, #580]	; (8002f9c <play+0x2d0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	9200      	str	r2, [sp, #0]
 8002d5c:	4a90      	ldr	r2, [pc, #576]	; (8002fa0 <play+0x2d4>)
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4888      	ldr	r0, [pc, #544]	; (8002f84 <play+0x2b8>)
 8002d62:	f002 ffa3 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002d66:	bf00      	nop
 8002d68:	4886      	ldr	r0, [pc, #536]	; (8002f84 <play+0x2b8>)
 8002d6a:	f003 f907 	bl	8005f7c <HAL_DAC_GetState>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d1f9      	bne.n	8002d68 <play+0x9c>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002d74:	2100      	movs	r1, #0
 8002d76:	4883      	ldr	r0, [pc, #524]	; (8002f84 <play+0x2b8>)
 8002d78:	f003 f854 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_SET)
 8002d7c:	e013      	b.n	8002da6 <play+0xda>
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d86:	4a87      	ldr	r2, [pc, #540]	; (8002fa4 <play+0x2d8>)
 8002d88:	2100      	movs	r1, #0
 8002d8a:	487e      	ldr	r0, [pc, #504]	; (8002f84 <play+0x2b8>)
 8002d8c:	f002 ff8e 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002d90:	bf00      	nop
 8002d92:	487c      	ldr	r0, [pc, #496]	; (8002f84 <play+0x2b8>)
 8002d94:	f003 f8f2 	bl	8005f7c <HAL_DAC_GetState>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d1f9      	bne.n	8002d92 <play+0xc6>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4878      	ldr	r0, [pc, #480]	; (8002f84 <play+0x2b8>)
 8002da2:	f003 f83f 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_SET)
 8002da6:	2120      	movs	r1, #32
 8002da8:	4877      	ldr	r0, [pc, #476]	; (8002f88 <play+0x2bc>)
 8002daa:	f004 f90b 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d0e4      	beq.n	8002d7e <play+0xb2>
				}
				NoteStat[0]=1;
 8002db4:	4b75      	ldr	r3, [pc, #468]	; (8002f8c <play+0x2c0>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	701a      	strb	r2, [r3, #0]
		  }
		  if ((HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_RESET)&&(NoteStat[0]==1))
 8002dba:	2120      	movs	r1, #32
 8002dbc:	4872      	ldr	r0, [pc, #456]	; (8002f88 <play+0x2bc>)
 8002dbe:	f004 f901 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11a      	bne.n	8002dfe <play+0x132>
 8002dc8:	4b70      	ldr	r3, [pc, #448]	; (8002f8c <play+0x2c0>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d116      	bne.n	8002dfe <play+0x132>
		  {

			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 8002dd0:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <play+0x2dc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	9200      	str	r2, [sp, #0]
 8002dd8:	4a74      	ldr	r2, [pc, #464]	; (8002fac <play+0x2e0>)
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4869      	ldr	r0, [pc, #420]	; (8002f84 <play+0x2b8>)
 8002dde:	f002 ff65 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002de2:	bf00      	nop
 8002de4:	4867      	ldr	r0, [pc, #412]	; (8002f84 <play+0x2b8>)
 8002de6:	f003 f8c9 	bl	8005f7c <HAL_DAC_GetState>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d1f9      	bne.n	8002de4 <play+0x118>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002df0:	2100      	movs	r1, #0
 8002df2:	4864      	ldr	r0, [pc, #400]	; (8002f84 <play+0x2b8>)
 8002df4:	f003 f816 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[0]=0;
 8002df8:	4b64      	ldr	r3, [pc, #400]	; (8002f8c <play+0x2c0>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
		  }
		 // Note 2
		  if((HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)==GPIO_PIN_SET)&&(NoteStat[1]==0))
 8002dfe:	2110      	movs	r1, #16
 8002e00:	4861      	ldr	r0, [pc, #388]	; (8002f88 <play+0x2bc>)
 8002e02:	f004 f8df 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d155      	bne.n	8002eb8 <play+0x1ec>
 8002e0c:	4b5f      	ldr	r3, [pc, #380]	; (8002f8c <play+0x2c0>)
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d151      	bne.n	8002eb8 <play+0x1ec>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 8002e14:	485a      	ldr	r0, [pc, #360]	; (8002f80 <play+0x2b4>)
 8002e16:	f005 f9ea 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[1]);
 8002e1a:	4b5d      	ldr	r3, [pc, #372]	; (8002f90 <play+0x2c4>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 f816 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8002e24:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <play+0x2c8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	9200      	str	r2, [sp, #0]
 8002e2c:	4a5a      	ldr	r2, [pc, #360]	; (8002f98 <play+0x2cc>)
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4854      	ldr	r0, [pc, #336]	; (8002f84 <play+0x2b8>)
 8002e32:	f002 ff3b 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8002e36:	4852      	ldr	r0, [pc, #328]	; (8002f80 <play+0x2b4>)
 8002e38:	f005 fa09 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002e3c:	bf00      	nop
 8002e3e:	4851      	ldr	r0, [pc, #324]	; (8002f84 <play+0x2b8>)
 8002e40:	f003 f89c 	bl	8005f7c <HAL_DAC_GetState>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d1f9      	bne.n	8002e3e <play+0x172>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	484d      	ldr	r0, [pc, #308]	; (8002f84 <play+0x2b8>)
 8002e4e:	f002 ffe9 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 8002e52:	4b52      	ldr	r3, [pc, #328]	; (8002f9c <play+0x2d0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2200      	movs	r2, #0
 8002e58:	9200      	str	r2, [sp, #0]
 8002e5a:	4a51      	ldr	r2, [pc, #324]	; (8002fa0 <play+0x2d4>)
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4849      	ldr	r0, [pc, #292]	; (8002f84 <play+0x2b8>)
 8002e60:	f002 ff24 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002e64:	bf00      	nop
 8002e66:	4847      	ldr	r0, [pc, #284]	; (8002f84 <play+0x2b8>)
 8002e68:	f003 f888 	bl	8005f7c <HAL_DAC_GetState>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d1f9      	bne.n	8002e66 <play+0x19a>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002e72:	2100      	movs	r1, #0
 8002e74:	4843      	ldr	r0, [pc, #268]	; (8002f84 <play+0x2b8>)
 8002e76:	f002 ffd5 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)==GPIO_PIN_SET)
 8002e7a:	e013      	b.n	8002ea4 <play+0x1d8>
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e84:	4a47      	ldr	r2, [pc, #284]	; (8002fa4 <play+0x2d8>)
 8002e86:	2100      	movs	r1, #0
 8002e88:	483e      	ldr	r0, [pc, #248]	; (8002f84 <play+0x2b8>)
 8002e8a:	f002 ff0f 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002e8e:	bf00      	nop
 8002e90:	483c      	ldr	r0, [pc, #240]	; (8002f84 <play+0x2b8>)
 8002e92:	f003 f873 	bl	8005f7c <HAL_DAC_GetState>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d1f9      	bne.n	8002e90 <play+0x1c4>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4839      	ldr	r0, [pc, #228]	; (8002f84 <play+0x2b8>)
 8002ea0:	f002 ffc0 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)==GPIO_PIN_SET)
 8002ea4:	2110      	movs	r1, #16
 8002ea6:	4838      	ldr	r0, [pc, #224]	; (8002f88 <play+0x2bc>)
 8002ea8:	f004 f88c 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d0e4      	beq.n	8002e7c <play+0x1b0>
				}
				NoteStat[1]=1;
 8002eb2:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <play+0x2c0>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	705a      	strb	r2, [r3, #1]
		  }
		  if ((HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)==GPIO_PIN_RESET)&&(NoteStat[1]==1))
 8002eb8:	2110      	movs	r1, #16
 8002eba:	4833      	ldr	r0, [pc, #204]	; (8002f88 <play+0x2bc>)
 8002ebc:	f004 f882 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11a      	bne.n	8002efc <play+0x230>
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <play+0x2c0>)
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d116      	bne.n	8002efc <play+0x230>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <play+0x2dc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	9200      	str	r2, [sp, #0]
 8002ed6:	4a35      	ldr	r2, [pc, #212]	; (8002fac <play+0x2e0>)
 8002ed8:	2100      	movs	r1, #0
 8002eda:	482a      	ldr	r0, [pc, #168]	; (8002f84 <play+0x2b8>)
 8002edc:	f002 fee6 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002ee0:	bf00      	nop
 8002ee2:	4828      	ldr	r0, [pc, #160]	; (8002f84 <play+0x2b8>)
 8002ee4:	f003 f84a 	bl	8005f7c <HAL_DAC_GetState>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d1f9      	bne.n	8002ee2 <play+0x216>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4824      	ldr	r0, [pc, #144]	; (8002f84 <play+0x2b8>)
 8002ef2:	f002 ff97 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[1]=0;
 8002ef6:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <play+0x2c0>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	705a      	strb	r2, [r3, #1]
		  }
		  // Note 3
		  if((HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)==GPIO_PIN_SET)&&(NoteStat[2]==0))
 8002efc:	2108      	movs	r1, #8
 8002efe:	4822      	ldr	r0, [pc, #136]	; (8002f88 <play+0x2bc>)
 8002f00:	f004 f860 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d170      	bne.n	8002fec <play+0x320>
 8002f0a:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <play+0x2c0>)
 8002f0c:	789b      	ldrb	r3, [r3, #2]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d16c      	bne.n	8002fec <play+0x320>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 8002f12:	481b      	ldr	r0, [pc, #108]	; (8002f80 <play+0x2b4>)
 8002f14:	f005 f96b 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[2]);
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <play+0x2c4>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 ff97 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <play+0x2c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	9200      	str	r2, [sp, #0]
 8002f2a:	4a1b      	ldr	r2, [pc, #108]	; (8002f98 <play+0x2cc>)
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4815      	ldr	r0, [pc, #84]	; (8002f84 <play+0x2b8>)
 8002f30:	f002 febc 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8002f34:	4812      	ldr	r0, [pc, #72]	; (8002f80 <play+0x2b4>)
 8002f36:	f005 f98a 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002f3a:	bf00      	nop
 8002f3c:	4811      	ldr	r0, [pc, #68]	; (8002f84 <play+0x2b8>)
 8002f3e:	f003 f81d 	bl	8005f7c <HAL_DAC_GetState>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d1f9      	bne.n	8002f3c <play+0x270>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002f48:	2100      	movs	r1, #0
 8002f4a:	480e      	ldr	r0, [pc, #56]	; (8002f84 <play+0x2b8>)
 8002f4c:	f002 ff6a 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <play+0x2d0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2200      	movs	r2, #0
 8002f56:	9200      	str	r2, [sp, #0]
 8002f58:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <play+0x2d4>)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4809      	ldr	r0, [pc, #36]	; (8002f84 <play+0x2b8>)
 8002f5e:	f002 fea5 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002f62:	bf00      	nop
 8002f64:	4807      	ldr	r0, [pc, #28]	; (8002f84 <play+0x2b8>)
 8002f66:	f003 f809 	bl	8005f7c <HAL_DAC_GetState>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d1f9      	bne.n	8002f64 <play+0x298>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002f70:	2100      	movs	r1, #0
 8002f72:	4804      	ldr	r0, [pc, #16]	; (8002f84 <play+0x2b8>)
 8002f74:	f002 ff56 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)==GPIO_PIN_SET)
 8002f78:	e02e      	b.n	8002fd8 <play+0x30c>
 8002f7a:	bf00      	nop
 8002f7c:	08009794 	.word	0x08009794
 8002f80:	20018c94 	.word	0x20018c94
 8002f84:	20018760 	.word	0x20018760
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	200000cc 	.word	0x200000cc
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20018c30 	.word	0x20018c30
 8002f98:	200000e0 	.word	0x200000e0
 8002f9c:	20018c4c 	.word	0x20018c4c
 8002fa0:	200080e0 	.word	0x200080e0
 8002fa4:	200100e0 	.word	0x200100e0
 8002fa8:	20018c40 	.word	0x20018c40
 8002fac:	200104e0 	.word	0x200104e0
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb8:	4a7c      	ldr	r2, [pc, #496]	; (80031ac <play+0x4e0>)
 8002fba:	2100      	movs	r1, #0
 8002fbc:	487c      	ldr	r0, [pc, #496]	; (80031b0 <play+0x4e4>)
 8002fbe:	f002 fe75 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8002fc2:	bf00      	nop
 8002fc4:	487a      	ldr	r0, [pc, #488]	; (80031b0 <play+0x4e4>)
 8002fc6:	f002 ffd9 	bl	8005f7c <HAL_DAC_GetState>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d1f9      	bne.n	8002fc4 <play+0x2f8>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4877      	ldr	r0, [pc, #476]	; (80031b0 <play+0x4e4>)
 8002fd4:	f002 ff26 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)==GPIO_PIN_SET)
 8002fd8:	2108      	movs	r1, #8
 8002fda:	4876      	ldr	r0, [pc, #472]	; (80031b4 <play+0x4e8>)
 8002fdc:	f003 fff2 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d0e4      	beq.n	8002fb0 <play+0x2e4>
				}
				NoteStat[2]=1;
 8002fe6:	4b74      	ldr	r3, [pc, #464]	; (80031b8 <play+0x4ec>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	709a      	strb	r2, [r3, #2]
		  }
		  if ((HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)==GPIO_PIN_RESET)&&(NoteStat[2]==1))
 8002fec:	2108      	movs	r1, #8
 8002fee:	4871      	ldr	r0, [pc, #452]	; (80031b4 <play+0x4e8>)
 8002ff0:	f003 ffe8 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11a      	bne.n	8003030 <play+0x364>
 8002ffa:	4b6f      	ldr	r3, [pc, #444]	; (80031b8 <play+0x4ec>)
 8002ffc:	789b      	ldrb	r3, [r3, #2]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d116      	bne.n	8003030 <play+0x364>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 8003002:	4b6e      	ldr	r3, [pc, #440]	; (80031bc <play+0x4f0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	9200      	str	r2, [sp, #0]
 800300a:	4a6d      	ldr	r2, [pc, #436]	; (80031c0 <play+0x4f4>)
 800300c:	2100      	movs	r1, #0
 800300e:	4868      	ldr	r0, [pc, #416]	; (80031b0 <play+0x4e4>)
 8003010:	f002 fe4c 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003014:	bf00      	nop
 8003016:	4866      	ldr	r0, [pc, #408]	; (80031b0 <play+0x4e4>)
 8003018:	f002 ffb0 	bl	8005f7c <HAL_DAC_GetState>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d1f9      	bne.n	8003016 <play+0x34a>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003022:	2100      	movs	r1, #0
 8003024:	4862      	ldr	r0, [pc, #392]	; (80031b0 <play+0x4e4>)
 8003026:	f002 fefd 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[2]=0;
 800302a:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <play+0x4ec>)
 800302c:	2200      	movs	r2, #0
 800302e:	709a      	strb	r2, [r3, #2]
		  }
		  // Note 4

		  if((HAL_GPIO_ReadPin(B4_GPIO_Port, B4_Pin)==GPIO_PIN_SET)&&(NoteStat[3]==0))
 8003030:	2104      	movs	r1, #4
 8003032:	4860      	ldr	r0, [pc, #384]	; (80031b4 <play+0x4e8>)
 8003034:	f003 ffc6 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003038:	4603      	mov	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d155      	bne.n	80030ea <play+0x41e>
 800303e:	4b5e      	ldr	r3, [pc, #376]	; (80031b8 <play+0x4ec>)
 8003040:	78db      	ldrb	r3, [r3, #3]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d151      	bne.n	80030ea <play+0x41e>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 8003046:	485f      	ldr	r0, [pc, #380]	; (80031c4 <play+0x4f8>)
 8003048:	f005 f8d1 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[3]);
 800304c:	4b5e      	ldr	r3, [pc, #376]	; (80031c8 <play+0x4fc>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4618      	mov	r0, r3
 8003052:	f001 fefd 	bl	8004e50 <TIM2_Init>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8003056:	4b5d      	ldr	r3, [pc, #372]	; (80031cc <play+0x500>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	9200      	str	r2, [sp, #0]
 800305e:	4a5c      	ldr	r2, [pc, #368]	; (80031d0 <play+0x504>)
 8003060:	2100      	movs	r1, #0
 8003062:	4853      	ldr	r0, [pc, #332]	; (80031b0 <play+0x4e4>)
 8003064:	f002 fe22 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8003068:	4856      	ldr	r0, [pc, #344]	; (80031c4 <play+0x4f8>)
 800306a:	f005 f8f0 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800306e:	bf00      	nop
 8003070:	484f      	ldr	r0, [pc, #316]	; (80031b0 <play+0x4e4>)
 8003072:	f002 ff83 	bl	8005f7c <HAL_DAC_GetState>
 8003076:	4603      	mov	r3, r0
 8003078:	2b01      	cmp	r3, #1
 800307a:	d1f9      	bne.n	8003070 <play+0x3a4>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800307c:	2100      	movs	r1, #0
 800307e:	484c      	ldr	r0, [pc, #304]	; (80031b0 <play+0x4e4>)
 8003080:	f002 fed0 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <play+0x508>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2200      	movs	r2, #0
 800308a:	9200      	str	r2, [sp, #0]
 800308c:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <play+0x50c>)
 800308e:	2100      	movs	r1, #0
 8003090:	4847      	ldr	r0, [pc, #284]	; (80031b0 <play+0x4e4>)
 8003092:	f002 fe0b 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003096:	bf00      	nop
 8003098:	4845      	ldr	r0, [pc, #276]	; (80031b0 <play+0x4e4>)
 800309a:	f002 ff6f 	bl	8005f7c <HAL_DAC_GetState>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d1f9      	bne.n	8003098 <play+0x3cc>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80030a4:	2100      	movs	r1, #0
 80030a6:	4842      	ldr	r0, [pc, #264]	; (80031b0 <play+0x4e4>)
 80030a8:	f002 febc 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B4_GPIO_Port, B4_Pin)==GPIO_PIN_SET)
 80030ac:	e013      	b.n	80030d6 <play+0x40a>
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 80030ae:	2300      	movs	r3, #0
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b6:	4a3d      	ldr	r2, [pc, #244]	; (80031ac <play+0x4e0>)
 80030b8:	2100      	movs	r1, #0
 80030ba:	483d      	ldr	r0, [pc, #244]	; (80031b0 <play+0x4e4>)
 80030bc:	f002 fdf6 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80030c0:	bf00      	nop
 80030c2:	483b      	ldr	r0, [pc, #236]	; (80031b0 <play+0x4e4>)
 80030c4:	f002 ff5a 	bl	8005f7c <HAL_DAC_GetState>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d1f9      	bne.n	80030c2 <play+0x3f6>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80030ce:	2100      	movs	r1, #0
 80030d0:	4837      	ldr	r0, [pc, #220]	; (80031b0 <play+0x4e4>)
 80030d2:	f002 fea7 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B4_GPIO_Port, B4_Pin)==GPIO_PIN_SET)
 80030d6:	2104      	movs	r1, #4
 80030d8:	4836      	ldr	r0, [pc, #216]	; (80031b4 <play+0x4e8>)
 80030da:	f003 ff73 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d0e4      	beq.n	80030ae <play+0x3e2>
				}
				NoteStat[3]=1;
 80030e4:	4b34      	ldr	r3, [pc, #208]	; (80031b8 <play+0x4ec>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	70da      	strb	r2, [r3, #3]
		  }
		  if ((HAL_GPIO_ReadPin(B4_GPIO_Port, B4_Pin)==GPIO_PIN_RESET)&&(NoteStat[3]==1))
 80030ea:	2104      	movs	r1, #4
 80030ec:	4831      	ldr	r0, [pc, #196]	; (80031b4 <play+0x4e8>)
 80030ee:	f003 ff69 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11a      	bne.n	800312e <play+0x462>
 80030f8:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <play+0x4ec>)
 80030fa:	78db      	ldrb	r3, [r3, #3]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d116      	bne.n	800312e <play+0x462>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <play+0x4f0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2200      	movs	r2, #0
 8003106:	9200      	str	r2, [sp, #0]
 8003108:	4a2d      	ldr	r2, [pc, #180]	; (80031c0 <play+0x4f4>)
 800310a:	2100      	movs	r1, #0
 800310c:	4828      	ldr	r0, [pc, #160]	; (80031b0 <play+0x4e4>)
 800310e:	f002 fdcd 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003112:	bf00      	nop
 8003114:	4826      	ldr	r0, [pc, #152]	; (80031b0 <play+0x4e4>)
 8003116:	f002 ff31 	bl	8005f7c <HAL_DAC_GetState>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d1f9      	bne.n	8003114 <play+0x448>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003120:	2100      	movs	r1, #0
 8003122:	4823      	ldr	r0, [pc, #140]	; (80031b0 <play+0x4e4>)
 8003124:	f002 fe7e 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[3]=0;
 8003128:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <play+0x4ec>)
 800312a:	2200      	movs	r2, #0
 800312c:	70da      	strb	r2, [r3, #3]
		  }

		  // Note 5
		  if((HAL_GPIO_ReadPin(B5_GPIO_Port, B5_Pin)==GPIO_PIN_SET)&&(NoteStat[4]==0))
 800312e:	2102      	movs	r1, #2
 8003130:	4820      	ldr	r0, [pc, #128]	; (80031b4 <play+0x4e8>)
 8003132:	f003 ff47 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003136:	4603      	mov	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d16d      	bne.n	8003218 <play+0x54c>
 800313c:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <play+0x4ec>)
 800313e:	791b      	ldrb	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d169      	bne.n	8003218 <play+0x54c>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 8003144:	481f      	ldr	r0, [pc, #124]	; (80031c4 <play+0x4f8>)
 8003146:	f005 f852 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[4]);
 800314a:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <play+0x4fc>)
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	4618      	mov	r0, r3
 8003150:	f001 fe7e 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <play+0x500>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2200      	movs	r2, #0
 800315a:	9200      	str	r2, [sp, #0]
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <play+0x504>)
 800315e:	2100      	movs	r1, #0
 8003160:	4813      	ldr	r0, [pc, #76]	; (80031b0 <play+0x4e4>)
 8003162:	f002 fda3 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8003166:	4817      	ldr	r0, [pc, #92]	; (80031c4 <play+0x4f8>)
 8003168:	f005 f871 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800316c:	bf00      	nop
 800316e:	4810      	ldr	r0, [pc, #64]	; (80031b0 <play+0x4e4>)
 8003170:	f002 ff04 	bl	8005f7c <HAL_DAC_GetState>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d1f9      	bne.n	800316e <play+0x4a2>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800317a:	2100      	movs	r1, #0
 800317c:	480c      	ldr	r0, [pc, #48]	; (80031b0 <play+0x4e4>)
 800317e:	f002 fe51 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <play+0x508>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	9200      	str	r2, [sp, #0]
 800318a:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <play+0x50c>)
 800318c:	2100      	movs	r1, #0
 800318e:	4808      	ldr	r0, [pc, #32]	; (80031b0 <play+0x4e4>)
 8003190:	f002 fd8c 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003194:	bf00      	nop
 8003196:	4806      	ldr	r0, [pc, #24]	; (80031b0 <play+0x4e4>)
 8003198:	f002 fef0 	bl	8005f7c <HAL_DAC_GetState>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d1f9      	bne.n	8003196 <play+0x4ca>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80031a2:	2100      	movs	r1, #0
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <play+0x4e4>)
 80031a6:	f002 fe3d 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B5_GPIO_Port, B5_Pin)==GPIO_PIN_SET)
 80031aa:	e02b      	b.n	8003204 <play+0x538>
 80031ac:	200100e0 	.word	0x200100e0
 80031b0:	20018760 	.word	0x20018760
 80031b4:	40021000 	.word	0x40021000
 80031b8:	200000cc 	.word	0x200000cc
 80031bc:	20018c40 	.word	0x20018c40
 80031c0:	200104e0 	.word	0x200104e0
 80031c4:	20018c94 	.word	0x20018c94
 80031c8:	20000000 	.word	0x20000000
 80031cc:	20018c30 	.word	0x20018c30
 80031d0:	200000e0 	.word	0x200000e0
 80031d4:	20018c4c 	.word	0x20018c4c
 80031d8:	200080e0 	.word	0x200080e0
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 80031dc:	2300      	movs	r3, #0
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e4:	4a7c      	ldr	r2, [pc, #496]	; (80033d8 <play+0x70c>)
 80031e6:	2100      	movs	r1, #0
 80031e8:	487c      	ldr	r0, [pc, #496]	; (80033dc <play+0x710>)
 80031ea:	f002 fd5f 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80031ee:	bf00      	nop
 80031f0:	487a      	ldr	r0, [pc, #488]	; (80033dc <play+0x710>)
 80031f2:	f002 fec3 	bl	8005f7c <HAL_DAC_GetState>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d1f9      	bne.n	80031f0 <play+0x524>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80031fc:	2100      	movs	r1, #0
 80031fe:	4877      	ldr	r0, [pc, #476]	; (80033dc <play+0x710>)
 8003200:	f002 fe10 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B5_GPIO_Port, B5_Pin)==GPIO_PIN_SET)
 8003204:	2102      	movs	r1, #2
 8003206:	4876      	ldr	r0, [pc, #472]	; (80033e0 <play+0x714>)
 8003208:	f003 fedc 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800320c:	4603      	mov	r3, r0
 800320e:	2b01      	cmp	r3, #1
 8003210:	d0e4      	beq.n	80031dc <play+0x510>
				}
				NoteStat[4]=1;
 8003212:	4b74      	ldr	r3, [pc, #464]	; (80033e4 <play+0x718>)
 8003214:	2201      	movs	r2, #1
 8003216:	711a      	strb	r2, [r3, #4]
		  }
		  if ((HAL_GPIO_ReadPin(B5_GPIO_Port, B5_Pin)==GPIO_PIN_RESET)&&(NoteStat[4]==1))
 8003218:	2102      	movs	r1, #2
 800321a:	4871      	ldr	r0, [pc, #452]	; (80033e0 <play+0x714>)
 800321c:	f003 fed2 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d11a      	bne.n	800325c <play+0x590>
 8003226:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <play+0x718>)
 8003228:	791b      	ldrb	r3, [r3, #4]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d116      	bne.n	800325c <play+0x590>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 800322e:	4b6e      	ldr	r3, [pc, #440]	; (80033e8 <play+0x71c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	9200      	str	r2, [sp, #0]
 8003236:	4a6d      	ldr	r2, [pc, #436]	; (80033ec <play+0x720>)
 8003238:	2100      	movs	r1, #0
 800323a:	4868      	ldr	r0, [pc, #416]	; (80033dc <play+0x710>)
 800323c:	f002 fd36 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003240:	bf00      	nop
 8003242:	4866      	ldr	r0, [pc, #408]	; (80033dc <play+0x710>)
 8003244:	f002 fe9a 	bl	8005f7c <HAL_DAC_GetState>
 8003248:	4603      	mov	r3, r0
 800324a:	2b01      	cmp	r3, #1
 800324c:	d1f9      	bne.n	8003242 <play+0x576>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800324e:	2100      	movs	r1, #0
 8003250:	4862      	ldr	r0, [pc, #392]	; (80033dc <play+0x710>)
 8003252:	f002 fde7 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[4]=0;
 8003256:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <play+0x718>)
 8003258:	2200      	movs	r2, #0
 800325a:	711a      	strb	r2, [r3, #4]
		  }

		  // Note 6
		  if((HAL_GPIO_ReadPin(B6_GPIO_Port, B6_Pin)==GPIO_PIN_SET)&&(NoteStat[5]==0))
 800325c:	2101      	movs	r1, #1
 800325e:	4860      	ldr	r0, [pc, #384]	; (80033e0 <play+0x714>)
 8003260:	f003 feb0 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d155      	bne.n	8003316 <play+0x64a>
 800326a:	4b5e      	ldr	r3, [pc, #376]	; (80033e4 <play+0x718>)
 800326c:	795b      	ldrb	r3, [r3, #5]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d151      	bne.n	8003316 <play+0x64a>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 8003272:	485f      	ldr	r0, [pc, #380]	; (80033f0 <play+0x724>)
 8003274:	f004 ffbb 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[5]);
 8003278:	4b5e      	ldr	r3, [pc, #376]	; (80033f4 <play+0x728>)
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	4618      	mov	r0, r3
 800327e:	f001 fde7 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8003282:	4b5d      	ldr	r3, [pc, #372]	; (80033f8 <play+0x72c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	9200      	str	r2, [sp, #0]
 800328a:	4a5c      	ldr	r2, [pc, #368]	; (80033fc <play+0x730>)
 800328c:	2100      	movs	r1, #0
 800328e:	4853      	ldr	r0, [pc, #332]	; (80033dc <play+0x710>)
 8003290:	f002 fd0c 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8003294:	4856      	ldr	r0, [pc, #344]	; (80033f0 <play+0x724>)
 8003296:	f004 ffda 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800329a:	bf00      	nop
 800329c:	484f      	ldr	r0, [pc, #316]	; (80033dc <play+0x710>)
 800329e:	f002 fe6d 	bl	8005f7c <HAL_DAC_GetState>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d1f9      	bne.n	800329c <play+0x5d0>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80032a8:	2100      	movs	r1, #0
 80032aa:	484c      	ldr	r0, [pc, #304]	; (80033dc <play+0x710>)
 80032ac:	f002 fdba 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 80032b0:	4b53      	ldr	r3, [pc, #332]	; (8003400 <play+0x734>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	9200      	str	r2, [sp, #0]
 80032b8:	4a52      	ldr	r2, [pc, #328]	; (8003404 <play+0x738>)
 80032ba:	2100      	movs	r1, #0
 80032bc:	4847      	ldr	r0, [pc, #284]	; (80033dc <play+0x710>)
 80032be:	f002 fcf5 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80032c2:	bf00      	nop
 80032c4:	4845      	ldr	r0, [pc, #276]	; (80033dc <play+0x710>)
 80032c6:	f002 fe59 	bl	8005f7c <HAL_DAC_GetState>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d1f9      	bne.n	80032c4 <play+0x5f8>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80032d0:	2100      	movs	r1, #0
 80032d2:	4842      	ldr	r0, [pc, #264]	; (80033dc <play+0x710>)
 80032d4:	f002 fda6 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B6_GPIO_Port, B6_Pin)==GPIO_PIN_SET)
 80032d8:	e013      	b.n	8003302 <play+0x636>
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 80032da:	2300      	movs	r3, #0
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e2:	4a3d      	ldr	r2, [pc, #244]	; (80033d8 <play+0x70c>)
 80032e4:	2100      	movs	r1, #0
 80032e6:	483d      	ldr	r0, [pc, #244]	; (80033dc <play+0x710>)
 80032e8:	f002 fce0 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80032ec:	bf00      	nop
 80032ee:	483b      	ldr	r0, [pc, #236]	; (80033dc <play+0x710>)
 80032f0:	f002 fe44 	bl	8005f7c <HAL_DAC_GetState>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d1f9      	bne.n	80032ee <play+0x622>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80032fa:	2100      	movs	r1, #0
 80032fc:	4837      	ldr	r0, [pc, #220]	; (80033dc <play+0x710>)
 80032fe:	f002 fd91 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B6_GPIO_Port, B6_Pin)==GPIO_PIN_SET)
 8003302:	2101      	movs	r1, #1
 8003304:	4836      	ldr	r0, [pc, #216]	; (80033e0 <play+0x714>)
 8003306:	f003 fe5d 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800330a:	4603      	mov	r3, r0
 800330c:	2b01      	cmp	r3, #1
 800330e:	d0e4      	beq.n	80032da <play+0x60e>
				}
				NoteStat[5]=1;
 8003310:	4b34      	ldr	r3, [pc, #208]	; (80033e4 <play+0x718>)
 8003312:	2201      	movs	r2, #1
 8003314:	715a      	strb	r2, [r3, #5]
		  }
		  if ((HAL_GPIO_ReadPin(B6_GPIO_Port, B6_Pin)==GPIO_PIN_RESET)&&(NoteStat[5]==1))
 8003316:	2101      	movs	r1, #1
 8003318:	4831      	ldr	r0, [pc, #196]	; (80033e0 <play+0x714>)
 800331a:	f003 fe53 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11a      	bne.n	800335a <play+0x68e>
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <play+0x718>)
 8003326:	795b      	ldrb	r3, [r3, #5]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d116      	bne.n	800335a <play+0x68e>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 800332c:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <play+0x71c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	9200      	str	r2, [sp, #0]
 8003334:	4a2d      	ldr	r2, [pc, #180]	; (80033ec <play+0x720>)
 8003336:	2100      	movs	r1, #0
 8003338:	4828      	ldr	r0, [pc, #160]	; (80033dc <play+0x710>)
 800333a:	f002 fcb7 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800333e:	bf00      	nop
 8003340:	4826      	ldr	r0, [pc, #152]	; (80033dc <play+0x710>)
 8003342:	f002 fe1b 	bl	8005f7c <HAL_DAC_GetState>
 8003346:	4603      	mov	r3, r0
 8003348:	2b01      	cmp	r3, #1
 800334a:	d1f9      	bne.n	8003340 <play+0x674>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800334c:	2100      	movs	r1, #0
 800334e:	4823      	ldr	r0, [pc, #140]	; (80033dc <play+0x710>)
 8003350:	f002 fd68 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[5]=0;
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <play+0x718>)
 8003356:	2200      	movs	r2, #0
 8003358:	715a      	strb	r2, [r3, #5]
		  }

		  // Note 7
		  if((HAL_GPIO_ReadPin(B7_GPIO_Port, B7_Pin)==GPIO_PIN_SET)&&(NoteStat[6]==0))
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	482a      	ldr	r0, [pc, #168]	; (8003408 <play+0x73c>)
 800335e:	f003 fe31 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003362:	4603      	mov	r3, r0
 8003364:	2b01      	cmp	r3, #1
 8003366:	d16f      	bne.n	8003448 <play+0x77c>
 8003368:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <play+0x718>)
 800336a:	799b      	ldrb	r3, [r3, #6]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d16b      	bne.n	8003448 <play+0x77c>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 8003370:	481f      	ldr	r0, [pc, #124]	; (80033f0 <play+0x724>)
 8003372:	f004 ff3c 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[6]);
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <play+0x728>)
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fd68 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <play+0x72c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2200      	movs	r2, #0
 8003386:	9200      	str	r2, [sp, #0]
 8003388:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <play+0x730>)
 800338a:	2100      	movs	r1, #0
 800338c:	4813      	ldr	r0, [pc, #76]	; (80033dc <play+0x710>)
 800338e:	f002 fc8d 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8003392:	4817      	ldr	r0, [pc, #92]	; (80033f0 <play+0x724>)
 8003394:	f004 ff5b 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003398:	bf00      	nop
 800339a:	4810      	ldr	r0, [pc, #64]	; (80033dc <play+0x710>)
 800339c:	f002 fdee 	bl	8005f7c <HAL_DAC_GetState>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d1f9      	bne.n	800339a <play+0x6ce>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80033a6:	2100      	movs	r1, #0
 80033a8:	480c      	ldr	r0, [pc, #48]	; (80033dc <play+0x710>)
 80033aa:	f002 fd3b 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <play+0x734>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	9200      	str	r2, [sp, #0]
 80033b6:	4a13      	ldr	r2, [pc, #76]	; (8003404 <play+0x738>)
 80033b8:	2100      	movs	r1, #0
 80033ba:	4808      	ldr	r0, [pc, #32]	; (80033dc <play+0x710>)
 80033bc:	f002 fc76 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80033c0:	bf00      	nop
 80033c2:	4806      	ldr	r0, [pc, #24]	; (80033dc <play+0x710>)
 80033c4:	f002 fdda 	bl	8005f7c <HAL_DAC_GetState>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d1f9      	bne.n	80033c2 <play+0x6f6>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80033ce:	2100      	movs	r1, #0
 80033d0:	4802      	ldr	r0, [pc, #8]	; (80033dc <play+0x710>)
 80033d2:	f002 fd27 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B7_GPIO_Port, B7_Pin)==GPIO_PIN_SET)
 80033d6:	e02d      	b.n	8003434 <play+0x768>
 80033d8:	200100e0 	.word	0x200100e0
 80033dc:	20018760 	.word	0x20018760
 80033e0:	40021000 	.word	0x40021000
 80033e4:	200000cc 	.word	0x200000cc
 80033e8:	20018c40 	.word	0x20018c40
 80033ec:	200104e0 	.word	0x200104e0
 80033f0:	20018c94 	.word	0x20018c94
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20018c30 	.word	0x20018c30
 80033fc:	200000e0 	.word	0x200000e0
 8003400:	20018c4c 	.word	0x20018c4c
 8003404:	200080e0 	.word	0x200080e0
 8003408:	40020400 	.word	0x40020400
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 800340c:	2300      	movs	r3, #0
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003414:	4a7c      	ldr	r2, [pc, #496]	; (8003608 <play+0x93c>)
 8003416:	2100      	movs	r1, #0
 8003418:	487c      	ldr	r0, [pc, #496]	; (800360c <play+0x940>)
 800341a:	f002 fc47 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800341e:	bf00      	nop
 8003420:	487a      	ldr	r0, [pc, #488]	; (800360c <play+0x940>)
 8003422:	f002 fdab 	bl	8005f7c <HAL_DAC_GetState>
 8003426:	4603      	mov	r3, r0
 8003428:	2b01      	cmp	r3, #1
 800342a:	d1f9      	bne.n	8003420 <play+0x754>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800342c:	2100      	movs	r1, #0
 800342e:	4877      	ldr	r0, [pc, #476]	; (800360c <play+0x940>)
 8003430:	f002 fcf8 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B7_GPIO_Port, B7_Pin)==GPIO_PIN_SET)
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	4876      	ldr	r0, [pc, #472]	; (8003610 <play+0x944>)
 8003438:	f003 fdc4 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d0e4      	beq.n	800340c <play+0x740>
				}
				NoteStat[6]=1;
 8003442:	4b74      	ldr	r3, [pc, #464]	; (8003614 <play+0x948>)
 8003444:	2201      	movs	r2, #1
 8003446:	719a      	strb	r2, [r3, #6]
		  }
		  if ((HAL_GPIO_ReadPin(B7_GPIO_Port, B7_Pin)==GPIO_PIN_RESET)&&(NoteStat[6]==1))
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	4871      	ldr	r0, [pc, #452]	; (8003610 <play+0x944>)
 800344c:	f003 fdba 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11a      	bne.n	800348c <play+0x7c0>
 8003456:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <play+0x948>)
 8003458:	799b      	ldrb	r3, [r3, #6]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d116      	bne.n	800348c <play+0x7c0>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 800345e:	4b6e      	ldr	r3, [pc, #440]	; (8003618 <play+0x94c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	9200      	str	r2, [sp, #0]
 8003466:	4a6d      	ldr	r2, [pc, #436]	; (800361c <play+0x950>)
 8003468:	2100      	movs	r1, #0
 800346a:	4868      	ldr	r0, [pc, #416]	; (800360c <play+0x940>)
 800346c:	f002 fc1e 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003470:	bf00      	nop
 8003472:	4866      	ldr	r0, [pc, #408]	; (800360c <play+0x940>)
 8003474:	f002 fd82 	bl	8005f7c <HAL_DAC_GetState>
 8003478:	4603      	mov	r3, r0
 800347a:	2b01      	cmp	r3, #1
 800347c:	d1f9      	bne.n	8003472 <play+0x7a6>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800347e:	2100      	movs	r1, #0
 8003480:	4862      	ldr	r0, [pc, #392]	; (800360c <play+0x940>)
 8003482:	f002 fccf 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[6]=0;
 8003486:	4b63      	ldr	r3, [pc, #396]	; (8003614 <play+0x948>)
 8003488:	2200      	movs	r2, #0
 800348a:	719a      	strb	r2, [r3, #6]
		  }

		  // Note 8
		  if((HAL_GPIO_ReadPin(B8_GPIO_Port, B8_Pin)==GPIO_PIN_SET)&&(NoteStat[7]==0))
 800348c:	2102      	movs	r1, #2
 800348e:	4864      	ldr	r0, [pc, #400]	; (8003620 <play+0x954>)
 8003490:	f003 fd98 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003494:	4603      	mov	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d155      	bne.n	8003546 <play+0x87a>
 800349a:	4b5e      	ldr	r3, [pc, #376]	; (8003614 <play+0x948>)
 800349c:	79db      	ldrb	r3, [r3, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d151      	bne.n	8003546 <play+0x87a>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 80034a2:	4860      	ldr	r0, [pc, #384]	; (8003624 <play+0x958>)
 80034a4:	f004 fea3 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[7]);
 80034a8:	4b5f      	ldr	r3, [pc, #380]	; (8003628 <play+0x95c>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 fccf 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 80034b2:	4b5e      	ldr	r3, [pc, #376]	; (800362c <play+0x960>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	9200      	str	r2, [sp, #0]
 80034ba:	4a5d      	ldr	r2, [pc, #372]	; (8003630 <play+0x964>)
 80034bc:	2100      	movs	r1, #0
 80034be:	4853      	ldr	r0, [pc, #332]	; (800360c <play+0x940>)
 80034c0:	f002 fbf4 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 80034c4:	4857      	ldr	r0, [pc, #348]	; (8003624 <play+0x958>)
 80034c6:	f004 fec2 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80034ca:	bf00      	nop
 80034cc:	484f      	ldr	r0, [pc, #316]	; (800360c <play+0x940>)
 80034ce:	f002 fd55 	bl	8005f7c <HAL_DAC_GetState>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d1f9      	bne.n	80034cc <play+0x800>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80034d8:	2100      	movs	r1, #0
 80034da:	484c      	ldr	r0, [pc, #304]	; (800360c <play+0x940>)
 80034dc:	f002 fca2 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 80034e0:	4b54      	ldr	r3, [pc, #336]	; (8003634 <play+0x968>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2200      	movs	r2, #0
 80034e6:	9200      	str	r2, [sp, #0]
 80034e8:	4a53      	ldr	r2, [pc, #332]	; (8003638 <play+0x96c>)
 80034ea:	2100      	movs	r1, #0
 80034ec:	4847      	ldr	r0, [pc, #284]	; (800360c <play+0x940>)
 80034ee:	f002 fbdd 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80034f2:	bf00      	nop
 80034f4:	4845      	ldr	r0, [pc, #276]	; (800360c <play+0x940>)
 80034f6:	f002 fd41 	bl	8005f7c <HAL_DAC_GetState>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d1f9      	bne.n	80034f4 <play+0x828>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003500:	2100      	movs	r1, #0
 8003502:	4842      	ldr	r0, [pc, #264]	; (800360c <play+0x940>)
 8003504:	f002 fc8e 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B8_GPIO_Port, B8_Pin)==GPIO_PIN_SET)
 8003508:	e013      	b.n	8003532 <play+0x866>
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 800350a:	2300      	movs	r3, #0
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003512:	4a3d      	ldr	r2, [pc, #244]	; (8003608 <play+0x93c>)
 8003514:	2100      	movs	r1, #0
 8003516:	483d      	ldr	r0, [pc, #244]	; (800360c <play+0x940>)
 8003518:	f002 fbc8 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800351c:	bf00      	nop
 800351e:	483b      	ldr	r0, [pc, #236]	; (800360c <play+0x940>)
 8003520:	f002 fd2c 	bl	8005f7c <HAL_DAC_GetState>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d1f9      	bne.n	800351e <play+0x852>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800352a:	2100      	movs	r1, #0
 800352c:	4837      	ldr	r0, [pc, #220]	; (800360c <play+0x940>)
 800352e:	f002 fc79 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B8_GPIO_Port, B8_Pin)==GPIO_PIN_SET)
 8003532:	2102      	movs	r1, #2
 8003534:	483a      	ldr	r0, [pc, #232]	; (8003620 <play+0x954>)
 8003536:	f003 fd45 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800353a:	4603      	mov	r3, r0
 800353c:	2b01      	cmp	r3, #1
 800353e:	d0e4      	beq.n	800350a <play+0x83e>
				}
				NoteStat[7]=1;
 8003540:	4b34      	ldr	r3, [pc, #208]	; (8003614 <play+0x948>)
 8003542:	2201      	movs	r2, #1
 8003544:	71da      	strb	r2, [r3, #7]
		  }
		  if ((HAL_GPIO_ReadPin(B8_GPIO_Port, B8_Pin)==GPIO_PIN_RESET)&&(NoteStat[7]==1))
 8003546:	2102      	movs	r1, #2
 8003548:	4835      	ldr	r0, [pc, #212]	; (8003620 <play+0x954>)
 800354a:	f003 fd3b 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11a      	bne.n	800358a <play+0x8be>
 8003554:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <play+0x948>)
 8003556:	79db      	ldrb	r3, [r3, #7]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d116      	bne.n	800358a <play+0x8be>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 800355c:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <play+0x94c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2200      	movs	r2, #0
 8003562:	9200      	str	r2, [sp, #0]
 8003564:	4a2d      	ldr	r2, [pc, #180]	; (800361c <play+0x950>)
 8003566:	2100      	movs	r1, #0
 8003568:	4828      	ldr	r0, [pc, #160]	; (800360c <play+0x940>)
 800356a:	f002 fb9f 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800356e:	bf00      	nop
 8003570:	4826      	ldr	r0, [pc, #152]	; (800360c <play+0x940>)
 8003572:	f002 fd03 	bl	8005f7c <HAL_DAC_GetState>
 8003576:	4603      	mov	r3, r0
 8003578:	2b01      	cmp	r3, #1
 800357a:	d1f9      	bne.n	8003570 <play+0x8a4>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800357c:	2100      	movs	r1, #0
 800357e:	4823      	ldr	r0, [pc, #140]	; (800360c <play+0x940>)
 8003580:	f002 fc50 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[7]=0;
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <play+0x948>)
 8003586:	2200      	movs	r2, #0
 8003588:	71da      	strb	r2, [r3, #7]
		  }

		  // Note 9
		  if((HAL_GPIO_ReadPin(B9_GPIO_Port, B9_Pin)==GPIO_PIN_SET)&&(NoteStat[8]==0))
 800358a:	2120      	movs	r1, #32
 800358c:	4820      	ldr	r0, [pc, #128]	; (8003610 <play+0x944>)
 800358e:	f003 fd19 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003592:	4603      	mov	r3, r0
 8003594:	2b01      	cmp	r3, #1
 8003596:	d16f      	bne.n	8003678 <play+0x9ac>
 8003598:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <play+0x948>)
 800359a:	7a1b      	ldrb	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d16b      	bne.n	8003678 <play+0x9ac>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 80035a0:	4820      	ldr	r0, [pc, #128]	; (8003624 <play+0x958>)
 80035a2:	f004 fe24 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[8]);
 80035a6:	4b20      	ldr	r3, [pc, #128]	; (8003628 <play+0x95c>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 fc50 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <play+0x960>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2200      	movs	r2, #0
 80035b6:	9200      	str	r2, [sp, #0]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <play+0x964>)
 80035ba:	2100      	movs	r1, #0
 80035bc:	4813      	ldr	r0, [pc, #76]	; (800360c <play+0x940>)
 80035be:	f002 fb75 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 80035c2:	4818      	ldr	r0, [pc, #96]	; (8003624 <play+0x958>)
 80035c4:	f004 fe43 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80035c8:	bf00      	nop
 80035ca:	4810      	ldr	r0, [pc, #64]	; (800360c <play+0x940>)
 80035cc:	f002 fcd6 	bl	8005f7c <HAL_DAC_GetState>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d1f9      	bne.n	80035ca <play+0x8fe>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80035d6:	2100      	movs	r1, #0
 80035d8:	480c      	ldr	r0, [pc, #48]	; (800360c <play+0x940>)
 80035da:	f002 fc23 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <play+0x968>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	9200      	str	r2, [sp, #0]
 80035e6:	4a14      	ldr	r2, [pc, #80]	; (8003638 <play+0x96c>)
 80035e8:	2100      	movs	r1, #0
 80035ea:	4808      	ldr	r0, [pc, #32]	; (800360c <play+0x940>)
 80035ec:	f002 fb5e 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80035f0:	bf00      	nop
 80035f2:	4806      	ldr	r0, [pc, #24]	; (800360c <play+0x940>)
 80035f4:	f002 fcc2 	bl	8005f7c <HAL_DAC_GetState>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d1f9      	bne.n	80035f2 <play+0x926>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80035fe:	2100      	movs	r1, #0
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <play+0x940>)
 8003602:	f002 fc0f 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B9_GPIO_Port, B9_Pin)==GPIO_PIN_SET)
 8003606:	e02d      	b.n	8003664 <play+0x998>
 8003608:	200100e0 	.word	0x200100e0
 800360c:	20018760 	.word	0x20018760
 8003610:	40020400 	.word	0x40020400
 8003614:	200000cc 	.word	0x200000cc
 8003618:	20018c40 	.word	0x20018c40
 800361c:	200104e0 	.word	0x200104e0
 8003620:	40020c00 	.word	0x40020c00
 8003624:	20018c94 	.word	0x20018c94
 8003628:	20000000 	.word	0x20000000
 800362c:	20018c30 	.word	0x20018c30
 8003630:	200000e0 	.word	0x200000e0
 8003634:	20018c4c 	.word	0x20018c4c
 8003638:	200080e0 	.word	0x200080e0
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 800363c:	2300      	movs	r3, #0
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003644:	4a7c      	ldr	r2, [pc, #496]	; (8003838 <play+0xb6c>)
 8003646:	2100      	movs	r1, #0
 8003648:	487c      	ldr	r0, [pc, #496]	; (800383c <play+0xb70>)
 800364a:	f002 fb2f 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800364e:	bf00      	nop
 8003650:	487a      	ldr	r0, [pc, #488]	; (800383c <play+0xb70>)
 8003652:	f002 fc93 	bl	8005f7c <HAL_DAC_GetState>
 8003656:	4603      	mov	r3, r0
 8003658:	2b01      	cmp	r3, #1
 800365a:	d1f9      	bne.n	8003650 <play+0x984>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800365c:	2100      	movs	r1, #0
 800365e:	4877      	ldr	r0, [pc, #476]	; (800383c <play+0xb70>)
 8003660:	f002 fbe0 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B9_GPIO_Port, B9_Pin)==GPIO_PIN_SET)
 8003664:	2120      	movs	r1, #32
 8003666:	4876      	ldr	r0, [pc, #472]	; (8003840 <play+0xb74>)
 8003668:	f003 fcac 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800366c:	4603      	mov	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d0e4      	beq.n	800363c <play+0x970>
				}
				NoteStat[8]=1;
 8003672:	4b74      	ldr	r3, [pc, #464]	; (8003844 <play+0xb78>)
 8003674:	2201      	movs	r2, #1
 8003676:	721a      	strb	r2, [r3, #8]
		  }
		  if ((HAL_GPIO_ReadPin(B9_GPIO_Port, B9_Pin)==GPIO_PIN_RESET)&&(NoteStat[8]==1))
 8003678:	2120      	movs	r1, #32
 800367a:	4871      	ldr	r0, [pc, #452]	; (8003840 <play+0xb74>)
 800367c:	f003 fca2 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d11a      	bne.n	80036bc <play+0x9f0>
 8003686:	4b6f      	ldr	r3, [pc, #444]	; (8003844 <play+0xb78>)
 8003688:	7a1b      	ldrb	r3, [r3, #8]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d116      	bne.n	80036bc <play+0x9f0>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 800368e:	4b6e      	ldr	r3, [pc, #440]	; (8003848 <play+0xb7c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	9200      	str	r2, [sp, #0]
 8003696:	4a6d      	ldr	r2, [pc, #436]	; (800384c <play+0xb80>)
 8003698:	2100      	movs	r1, #0
 800369a:	4868      	ldr	r0, [pc, #416]	; (800383c <play+0xb70>)
 800369c:	f002 fb06 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80036a0:	bf00      	nop
 80036a2:	4866      	ldr	r0, [pc, #408]	; (800383c <play+0xb70>)
 80036a4:	f002 fc6a 	bl	8005f7c <HAL_DAC_GetState>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d1f9      	bne.n	80036a2 <play+0x9d6>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80036ae:	2100      	movs	r1, #0
 80036b0:	4862      	ldr	r0, [pc, #392]	; (800383c <play+0xb70>)
 80036b2:	f002 fbb7 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[8]=0;
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <play+0xb78>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	721a      	strb	r2, [r3, #8]
		  }

		  // Note 10
		  if((HAL_GPIO_ReadPin(B10_GPIO_Port, B10_Pin)==GPIO_PIN_SET)&&(NoteStat[9]==0))
 80036bc:	2110      	movs	r1, #16
 80036be:	4860      	ldr	r0, [pc, #384]	; (8003840 <play+0xb74>)
 80036c0:	f003 fc80 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d155      	bne.n	8003776 <play+0xaaa>
 80036ca:	4b5e      	ldr	r3, [pc, #376]	; (8003844 <play+0xb78>)
 80036cc:	7a5b      	ldrb	r3, [r3, #9]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d151      	bne.n	8003776 <play+0xaaa>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 80036d2:	485f      	ldr	r0, [pc, #380]	; (8003850 <play+0xb84>)
 80036d4:	f004 fd8b 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[9]);
 80036d8:	4b5e      	ldr	r3, [pc, #376]	; (8003854 <play+0xb88>)
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 fbb7 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 80036e2:	4b5d      	ldr	r3, [pc, #372]	; (8003858 <play+0xb8c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2200      	movs	r2, #0
 80036e8:	9200      	str	r2, [sp, #0]
 80036ea:	4a5c      	ldr	r2, [pc, #368]	; (800385c <play+0xb90>)
 80036ec:	2100      	movs	r1, #0
 80036ee:	4853      	ldr	r0, [pc, #332]	; (800383c <play+0xb70>)
 80036f0:	f002 fadc 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 80036f4:	4856      	ldr	r0, [pc, #344]	; (8003850 <play+0xb84>)
 80036f6:	f004 fdaa 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80036fa:	bf00      	nop
 80036fc:	484f      	ldr	r0, [pc, #316]	; (800383c <play+0xb70>)
 80036fe:	f002 fc3d 	bl	8005f7c <HAL_DAC_GetState>
 8003702:	4603      	mov	r3, r0
 8003704:	2b01      	cmp	r3, #1
 8003706:	d1f9      	bne.n	80036fc <play+0xa30>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003708:	2100      	movs	r1, #0
 800370a:	484c      	ldr	r0, [pc, #304]	; (800383c <play+0xb70>)
 800370c:	f002 fb8a 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <play+0xb94>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2200      	movs	r2, #0
 8003716:	9200      	str	r2, [sp, #0]
 8003718:	4a52      	ldr	r2, [pc, #328]	; (8003864 <play+0xb98>)
 800371a:	2100      	movs	r1, #0
 800371c:	4847      	ldr	r0, [pc, #284]	; (800383c <play+0xb70>)
 800371e:	f002 fac5 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003722:	bf00      	nop
 8003724:	4845      	ldr	r0, [pc, #276]	; (800383c <play+0xb70>)
 8003726:	f002 fc29 	bl	8005f7c <HAL_DAC_GetState>
 800372a:	4603      	mov	r3, r0
 800372c:	2b01      	cmp	r3, #1
 800372e:	d1f9      	bne.n	8003724 <play+0xa58>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003730:	2100      	movs	r1, #0
 8003732:	4842      	ldr	r0, [pc, #264]	; (800383c <play+0xb70>)
 8003734:	f002 fb76 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B10_GPIO_Port, B10_Pin)==GPIO_PIN_SET)
 8003738:	e013      	b.n	8003762 <play+0xa96>
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 800373a:	2300      	movs	r3, #0
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003742:	4a3d      	ldr	r2, [pc, #244]	; (8003838 <play+0xb6c>)
 8003744:	2100      	movs	r1, #0
 8003746:	483d      	ldr	r0, [pc, #244]	; (800383c <play+0xb70>)
 8003748:	f002 fab0 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800374c:	bf00      	nop
 800374e:	483b      	ldr	r0, [pc, #236]	; (800383c <play+0xb70>)
 8003750:	f002 fc14 	bl	8005f7c <HAL_DAC_GetState>
 8003754:	4603      	mov	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d1f9      	bne.n	800374e <play+0xa82>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800375a:	2100      	movs	r1, #0
 800375c:	4837      	ldr	r0, [pc, #220]	; (800383c <play+0xb70>)
 800375e:	f002 fb61 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B10_GPIO_Port, B10_Pin)==GPIO_PIN_SET)
 8003762:	2110      	movs	r1, #16
 8003764:	4836      	ldr	r0, [pc, #216]	; (8003840 <play+0xb74>)
 8003766:	f003 fc2d 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800376a:	4603      	mov	r3, r0
 800376c:	2b01      	cmp	r3, #1
 800376e:	d0e4      	beq.n	800373a <play+0xa6e>
				}
				NoteStat[9]=1;
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <play+0xb78>)
 8003772:	2201      	movs	r2, #1
 8003774:	725a      	strb	r2, [r3, #9]
		  }
		  if ((HAL_GPIO_ReadPin(B10_GPIO_Port, B10_Pin)==GPIO_PIN_RESET)&&(NoteStat[9]==1))
 8003776:	2110      	movs	r1, #16
 8003778:	4831      	ldr	r0, [pc, #196]	; (8003840 <play+0xb74>)
 800377a:	f003 fc23 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11a      	bne.n	80037ba <play+0xaee>
 8003784:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <play+0xb78>)
 8003786:	7a5b      	ldrb	r3, [r3, #9]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d116      	bne.n	80037ba <play+0xaee>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 800378c:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <play+0xb7c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2200      	movs	r2, #0
 8003792:	9200      	str	r2, [sp, #0]
 8003794:	4a2d      	ldr	r2, [pc, #180]	; (800384c <play+0xb80>)
 8003796:	2100      	movs	r1, #0
 8003798:	4828      	ldr	r0, [pc, #160]	; (800383c <play+0xb70>)
 800379a:	f002 fa87 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800379e:	bf00      	nop
 80037a0:	4826      	ldr	r0, [pc, #152]	; (800383c <play+0xb70>)
 80037a2:	f002 fbeb 	bl	8005f7c <HAL_DAC_GetState>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d1f9      	bne.n	80037a0 <play+0xad4>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80037ac:	2100      	movs	r1, #0
 80037ae:	4823      	ldr	r0, [pc, #140]	; (800383c <play+0xb70>)
 80037b0:	f002 fb38 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[9]=0;
 80037b4:	4b23      	ldr	r3, [pc, #140]	; (8003844 <play+0xb78>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	725a      	strb	r2, [r3, #9]
		  }

		  //Note 11

		  if((HAL_GPIO_ReadPin(B11_GPIO_Port, B11_Pin)==GPIO_PIN_SET)&&(NoteStat[10]==0))
 80037ba:	2108      	movs	r1, #8
 80037bc:	4820      	ldr	r0, [pc, #128]	; (8003840 <play+0xb74>)
 80037be:	f003 fc01 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d16d      	bne.n	80038a4 <play+0xbd8>
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <play+0xb78>)
 80037ca:	7a9b      	ldrb	r3, [r3, #10]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d169      	bne.n	80038a4 <play+0xbd8>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 80037d0:	481f      	ldr	r0, [pc, #124]	; (8003850 <play+0xb84>)
 80037d2:	f004 fd0c 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[10]);
 80037d6:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <play+0xb88>)
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fb38 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <play+0xb8c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2200      	movs	r2, #0
 80037e6:	9200      	str	r2, [sp, #0]
 80037e8:	4a1c      	ldr	r2, [pc, #112]	; (800385c <play+0xb90>)
 80037ea:	2100      	movs	r1, #0
 80037ec:	4813      	ldr	r0, [pc, #76]	; (800383c <play+0xb70>)
 80037ee:	f002 fa5d 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 80037f2:	4817      	ldr	r0, [pc, #92]	; (8003850 <play+0xb84>)
 80037f4:	f004 fd2b 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80037f8:	bf00      	nop
 80037fa:	4810      	ldr	r0, [pc, #64]	; (800383c <play+0xb70>)
 80037fc:	f002 fbbe 	bl	8005f7c <HAL_DAC_GetState>
 8003800:	4603      	mov	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d1f9      	bne.n	80037fa <play+0xb2e>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003806:	2100      	movs	r1, #0
 8003808:	480c      	ldr	r0, [pc, #48]	; (800383c <play+0xb70>)
 800380a:	f002 fb0b 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 800380e:	4b14      	ldr	r3, [pc, #80]	; (8003860 <play+0xb94>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	9200      	str	r2, [sp, #0]
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <play+0xb98>)
 8003818:	2100      	movs	r1, #0
 800381a:	4808      	ldr	r0, [pc, #32]	; (800383c <play+0xb70>)
 800381c:	f002 fa46 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003820:	bf00      	nop
 8003822:	4806      	ldr	r0, [pc, #24]	; (800383c <play+0xb70>)
 8003824:	f002 fbaa 	bl	8005f7c <HAL_DAC_GetState>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d1f9      	bne.n	8003822 <play+0xb56>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800382e:	2100      	movs	r1, #0
 8003830:	4802      	ldr	r0, [pc, #8]	; (800383c <play+0xb70>)
 8003832:	f002 faf7 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B11_GPIO_Port, B11_Pin)==GPIO_PIN_SET)
 8003836:	e02b      	b.n	8003890 <play+0xbc4>
 8003838:	200100e0 	.word	0x200100e0
 800383c:	20018760 	.word	0x20018760
 8003840:	40020400 	.word	0x40020400
 8003844:	200000cc 	.word	0x200000cc
 8003848:	20018c40 	.word	0x20018c40
 800384c:	200104e0 	.word	0x200104e0
 8003850:	20018c94 	.word	0x20018c94
 8003854:	20000000 	.word	0x20000000
 8003858:	20018c30 	.word	0x20018c30
 800385c:	200000e0 	.word	0x200000e0
 8003860:	20018c4c 	.word	0x20018c4c
 8003864:	200080e0 	.word	0x200080e0
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 8003868:	2300      	movs	r3, #0
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003870:	4a7c      	ldr	r2, [pc, #496]	; (8003a64 <play+0xd98>)
 8003872:	2100      	movs	r1, #0
 8003874:	487c      	ldr	r0, [pc, #496]	; (8003a68 <play+0xd9c>)
 8003876:	f002 fa19 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800387a:	bf00      	nop
 800387c:	487a      	ldr	r0, [pc, #488]	; (8003a68 <play+0xd9c>)
 800387e:	f002 fb7d 	bl	8005f7c <HAL_DAC_GetState>
 8003882:	4603      	mov	r3, r0
 8003884:	2b01      	cmp	r3, #1
 8003886:	d1f9      	bne.n	800387c <play+0xbb0>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003888:	2100      	movs	r1, #0
 800388a:	4877      	ldr	r0, [pc, #476]	; (8003a68 <play+0xd9c>)
 800388c:	f002 faca 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B11_GPIO_Port, B11_Pin)==GPIO_PIN_SET)
 8003890:	2108      	movs	r1, #8
 8003892:	4876      	ldr	r0, [pc, #472]	; (8003a6c <play+0xda0>)
 8003894:	f003 fb96 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d0e4      	beq.n	8003868 <play+0xb9c>
				}
				NoteStat[10]=1;
 800389e:	4b74      	ldr	r3, [pc, #464]	; (8003a70 <play+0xda4>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	729a      	strb	r2, [r3, #10]
		  }
		  if ((HAL_GPIO_ReadPin(B11_GPIO_Port, B11_Pin)==GPIO_PIN_RESET)&&(NoteStat[10]==1))
 80038a4:	2108      	movs	r1, #8
 80038a6:	4871      	ldr	r0, [pc, #452]	; (8003a6c <play+0xda0>)
 80038a8:	f003 fb8c 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d11a      	bne.n	80038e8 <play+0xc1c>
 80038b2:	4b6f      	ldr	r3, [pc, #444]	; (8003a70 <play+0xda4>)
 80038b4:	7a9b      	ldrb	r3, [r3, #10]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d116      	bne.n	80038e8 <play+0xc1c>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 80038ba:	4b6e      	ldr	r3, [pc, #440]	; (8003a74 <play+0xda8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2200      	movs	r2, #0
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	4a6d      	ldr	r2, [pc, #436]	; (8003a78 <play+0xdac>)
 80038c4:	2100      	movs	r1, #0
 80038c6:	4868      	ldr	r0, [pc, #416]	; (8003a68 <play+0xd9c>)
 80038c8:	f002 f9f0 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80038cc:	bf00      	nop
 80038ce:	4866      	ldr	r0, [pc, #408]	; (8003a68 <play+0xd9c>)
 80038d0:	f002 fb54 	bl	8005f7c <HAL_DAC_GetState>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d1f9      	bne.n	80038ce <play+0xc02>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80038da:	2100      	movs	r1, #0
 80038dc:	4862      	ldr	r0, [pc, #392]	; (8003a68 <play+0xd9c>)
 80038de:	f002 faa1 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[10]=0;
 80038e2:	4b63      	ldr	r3, [pc, #396]	; (8003a70 <play+0xda4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	729a      	strb	r2, [r3, #10]
		  }

		  //Note 12
		  if((HAL_GPIO_ReadPin(B12_GPIO_Port, B12_Pin)==GPIO_PIN_SET)&&(NoteStat[11]==0))
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	4864      	ldr	r0, [pc, #400]	; (8003a7c <play+0xdb0>)
 80038ec:	f003 fb6a 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d155      	bne.n	80039a2 <play+0xcd6>
 80038f6:	4b5e      	ldr	r3, [pc, #376]	; (8003a70 <play+0xda4>)
 80038f8:	7adb      	ldrb	r3, [r3, #11]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d151      	bne.n	80039a2 <play+0xcd6>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 80038fe:	4860      	ldr	r0, [pc, #384]	; (8003a80 <play+0xdb4>)
 8003900:	f004 fc75 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[11]);
 8003904:	4b5f      	ldr	r3, [pc, #380]	; (8003a84 <play+0xdb8>)
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	4618      	mov	r0, r3
 800390a:	f001 faa1 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 800390e:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <play+0xdbc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2200      	movs	r2, #0
 8003914:	9200      	str	r2, [sp, #0]
 8003916:	4a5d      	ldr	r2, [pc, #372]	; (8003a8c <play+0xdc0>)
 8003918:	2100      	movs	r1, #0
 800391a:	4853      	ldr	r0, [pc, #332]	; (8003a68 <play+0xd9c>)
 800391c:	f002 f9c6 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8003920:	4857      	ldr	r0, [pc, #348]	; (8003a80 <play+0xdb4>)
 8003922:	f004 fc94 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003926:	bf00      	nop
 8003928:	484f      	ldr	r0, [pc, #316]	; (8003a68 <play+0xd9c>)
 800392a:	f002 fb27 	bl	8005f7c <HAL_DAC_GetState>
 800392e:	4603      	mov	r3, r0
 8003930:	2b01      	cmp	r3, #1
 8003932:	d1f9      	bne.n	8003928 <play+0xc5c>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003934:	2100      	movs	r1, #0
 8003936:	484c      	ldr	r0, [pc, #304]	; (8003a68 <play+0xd9c>)
 8003938:	f002 fa74 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 800393c:	4b54      	ldr	r3, [pc, #336]	; (8003a90 <play+0xdc4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2200      	movs	r2, #0
 8003942:	9200      	str	r2, [sp, #0]
 8003944:	4a53      	ldr	r2, [pc, #332]	; (8003a94 <play+0xdc8>)
 8003946:	2100      	movs	r1, #0
 8003948:	4847      	ldr	r0, [pc, #284]	; (8003a68 <play+0xd9c>)
 800394a:	f002 f9af 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 800394e:	bf00      	nop
 8003950:	4845      	ldr	r0, [pc, #276]	; (8003a68 <play+0xd9c>)
 8003952:	f002 fb13 	bl	8005f7c <HAL_DAC_GetState>
 8003956:	4603      	mov	r3, r0
 8003958:	2b01      	cmp	r3, #1
 800395a:	d1f9      	bne.n	8003950 <play+0xc84>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800395c:	2100      	movs	r1, #0
 800395e:	4842      	ldr	r0, [pc, #264]	; (8003a68 <play+0xd9c>)
 8003960:	f002 fa60 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B12_GPIO_Port, B12_Pin)==GPIO_PIN_SET)
 8003964:	e013      	b.n	800398e <play+0xcc2>
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800396e:	4a3d      	ldr	r2, [pc, #244]	; (8003a64 <play+0xd98>)
 8003970:	2100      	movs	r1, #0
 8003972:	483d      	ldr	r0, [pc, #244]	; (8003a68 <play+0xd9c>)
 8003974:	f002 f99a 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003978:	bf00      	nop
 800397a:	483b      	ldr	r0, [pc, #236]	; (8003a68 <play+0xd9c>)
 800397c:	f002 fafe 	bl	8005f7c <HAL_DAC_GetState>
 8003980:	4603      	mov	r3, r0
 8003982:	2b01      	cmp	r3, #1
 8003984:	d1f9      	bne.n	800397a <play+0xcae>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003986:	2100      	movs	r1, #0
 8003988:	4837      	ldr	r0, [pc, #220]	; (8003a68 <play+0xd9c>)
 800398a:	f002 fa4b 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B12_GPIO_Port, B12_Pin)==GPIO_PIN_SET)
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	483a      	ldr	r0, [pc, #232]	; (8003a7c <play+0xdb0>)
 8003992:	f003 fb17 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d0e4      	beq.n	8003966 <play+0xc9a>
				}
				NoteStat[11]=1;
 800399c:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <play+0xda4>)
 800399e:	2201      	movs	r2, #1
 80039a0:	72da      	strb	r2, [r3, #11]
		  }
		  if ((HAL_GPIO_ReadPin(B12_GPIO_Port, B12_Pin)==GPIO_PIN_RESET)&&(NoteStat[11]==1))
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	4835      	ldr	r0, [pc, #212]	; (8003a7c <play+0xdb0>)
 80039a6:	f003 fb0d 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11a      	bne.n	80039e6 <play+0xd1a>
 80039b0:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <play+0xda4>)
 80039b2:	7adb      	ldrb	r3, [r3, #11]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d116      	bne.n	80039e6 <play+0xd1a>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 80039b8:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <play+0xda8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2200      	movs	r2, #0
 80039be:	9200      	str	r2, [sp, #0]
 80039c0:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <play+0xdac>)
 80039c2:	2100      	movs	r1, #0
 80039c4:	4828      	ldr	r0, [pc, #160]	; (8003a68 <play+0xd9c>)
 80039c6:	f002 f971 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 80039ca:	bf00      	nop
 80039cc:	4826      	ldr	r0, [pc, #152]	; (8003a68 <play+0xd9c>)
 80039ce:	f002 fad5 	bl	8005f7c <HAL_DAC_GetState>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d1f9      	bne.n	80039cc <play+0xd00>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80039d8:	2100      	movs	r1, #0
 80039da:	4823      	ldr	r0, [pc, #140]	; (8003a68 <play+0xd9c>)
 80039dc:	f002 fa22 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[11]=0;
 80039e0:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <play+0xda4>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	72da      	strb	r2, [r3, #11]
		  }

		  // Note 13
		  if((HAL_GPIO_ReadPin(B13_GPIO_Port, B13_Pin)==GPIO_PIN_SET)&&(NoteStat[12]==0))
 80039e6:	2140      	movs	r1, #64	; 0x40
 80039e8:	4824      	ldr	r0, [pc, #144]	; (8003a7c <play+0xdb0>)
 80039ea:	f003 faeb 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d16f      	bne.n	8003ad4 <play+0xe08>
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <play+0xda4>)
 80039f6:	7b1b      	ldrb	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d16b      	bne.n	8003ad4 <play+0xe08>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 80039fc:	4820      	ldr	r0, [pc, #128]	; (8003a80 <play+0xdb4>)
 80039fe:	f004 fbf6 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[12]);
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <play+0xdb8>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 fa22 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <play+0xdbc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2200      	movs	r2, #0
 8003a12:	9200      	str	r2, [sp, #0]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <play+0xdc0>)
 8003a16:	2100      	movs	r1, #0
 8003a18:	4813      	ldr	r0, [pc, #76]	; (8003a68 <play+0xd9c>)
 8003a1a:	f002 f947 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8003a1e:	4818      	ldr	r0, [pc, #96]	; (8003a80 <play+0xdb4>)
 8003a20:	f004 fc15 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003a24:	bf00      	nop
 8003a26:	4810      	ldr	r0, [pc, #64]	; (8003a68 <play+0xd9c>)
 8003a28:	f002 faa8 	bl	8005f7c <HAL_DAC_GetState>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d1f9      	bne.n	8003a26 <play+0xd5a>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003a32:	2100      	movs	r1, #0
 8003a34:	480c      	ldr	r0, [pc, #48]	; (8003a68 <play+0xd9c>)
 8003a36:	f002 f9f5 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <play+0xdc4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	9200      	str	r2, [sp, #0]
 8003a42:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <play+0xdc8>)
 8003a44:	2100      	movs	r1, #0
 8003a46:	4808      	ldr	r0, [pc, #32]	; (8003a68 <play+0xd9c>)
 8003a48:	f002 f930 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003a4c:	bf00      	nop
 8003a4e:	4806      	ldr	r0, [pc, #24]	; (8003a68 <play+0xd9c>)
 8003a50:	f002 fa94 	bl	8005f7c <HAL_DAC_GetState>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d1f9      	bne.n	8003a4e <play+0xd82>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <play+0xd9c>)
 8003a5e:	f002 f9e1 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B13_GPIO_Port, B13_Pin)==GPIO_PIN_SET)
 8003a62:	e02d      	b.n	8003ac0 <play+0xdf4>
 8003a64:	200100e0 	.word	0x200100e0
 8003a68:	20018760 	.word	0x20018760
 8003a6c:	40020400 	.word	0x40020400
 8003a70:	200000cc 	.word	0x200000cc
 8003a74:	20018c40 	.word	0x20018c40
 8003a78:	200104e0 	.word	0x200104e0
 8003a7c:	40020c00 	.word	0x40020c00
 8003a80:	20018c94 	.word	0x20018c94
 8003a84:	20000000 	.word	0x20000000
 8003a88:	20018c30 	.word	0x20018c30
 8003a8c:	200000e0 	.word	0x200000e0
 8003a90:	20018c4c 	.word	0x20018c4c
 8003a94:	200080e0 	.word	0x200080e0
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aa0:	4a7c      	ldr	r2, [pc, #496]	; (8003c94 <play+0xfc8>)
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	487c      	ldr	r0, [pc, #496]	; (8003c98 <play+0xfcc>)
 8003aa6:	f002 f901 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003aaa:	bf00      	nop
 8003aac:	487a      	ldr	r0, [pc, #488]	; (8003c98 <play+0xfcc>)
 8003aae:	f002 fa65 	bl	8005f7c <HAL_DAC_GetState>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d1f9      	bne.n	8003aac <play+0xde0>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4877      	ldr	r0, [pc, #476]	; (8003c98 <play+0xfcc>)
 8003abc:	f002 f9b2 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B13_GPIO_Port, B13_Pin)==GPIO_PIN_SET)
 8003ac0:	2140      	movs	r1, #64	; 0x40
 8003ac2:	4876      	ldr	r0, [pc, #472]	; (8003c9c <play+0xfd0>)
 8003ac4:	f003 fa7e 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d0e4      	beq.n	8003a98 <play+0xdcc>
				}
				NoteStat[12]=1;
 8003ace:	4b74      	ldr	r3, [pc, #464]	; (8003ca0 <play+0xfd4>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	731a      	strb	r2, [r3, #12]
		  }
		  if ((HAL_GPIO_ReadPin(B13_GPIO_Port, B13_Pin)==GPIO_PIN_RESET)&&(NoteStat[12]==1))
 8003ad4:	2140      	movs	r1, #64	; 0x40
 8003ad6:	4871      	ldr	r0, [pc, #452]	; (8003c9c <play+0xfd0>)
 8003ad8:	f003 fa74 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d11a      	bne.n	8003b18 <play+0xe4c>
 8003ae2:	4b6f      	ldr	r3, [pc, #444]	; (8003ca0 <play+0xfd4>)
 8003ae4:	7b1b      	ldrb	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d116      	bne.n	8003b18 <play+0xe4c>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 8003aea:	4b6e      	ldr	r3, [pc, #440]	; (8003ca4 <play+0xfd8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	9200      	str	r2, [sp, #0]
 8003af2:	4a6d      	ldr	r2, [pc, #436]	; (8003ca8 <play+0xfdc>)
 8003af4:	2100      	movs	r1, #0
 8003af6:	4868      	ldr	r0, [pc, #416]	; (8003c98 <play+0xfcc>)
 8003af8:	f002 f8d8 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003afc:	bf00      	nop
 8003afe:	4866      	ldr	r0, [pc, #408]	; (8003c98 <play+0xfcc>)
 8003b00:	f002 fa3c 	bl	8005f7c <HAL_DAC_GetState>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d1f9      	bne.n	8003afe <play+0xe32>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4862      	ldr	r0, [pc, #392]	; (8003c98 <play+0xfcc>)
 8003b0e:	f002 f989 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[12]=0;
 8003b12:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <play+0xfd4>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	731a      	strb	r2, [r3, #12]
		  }

		  //Note 14
		  if((HAL_GPIO_ReadPin(B14_GPIO_Port, B14_Pin)==GPIO_PIN_SET)&&(NoteStat[13]==0))
 8003b18:	2104      	movs	r1, #4
 8003b1a:	4860      	ldr	r0, [pc, #384]	; (8003c9c <play+0xfd0>)
 8003b1c:	f003 fa52 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d155      	bne.n	8003bd2 <play+0xf06>
 8003b26:	4b5e      	ldr	r3, [pc, #376]	; (8003ca0 <play+0xfd4>)
 8003b28:	7b5b      	ldrb	r3, [r3, #13]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d151      	bne.n	8003bd2 <play+0xf06>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 8003b2e:	485f      	ldr	r0, [pc, #380]	; (8003cac <play+0xfe0>)
 8003b30:	f004 fb5d 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[13]);
 8003b34:	4b5e      	ldr	r3, [pc, #376]	; (8003cb0 <play+0xfe4>)
 8003b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 f989 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8003b3e:	4b5d      	ldr	r3, [pc, #372]	; (8003cb4 <play+0xfe8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	9200      	str	r2, [sp, #0]
 8003b46:	4a5c      	ldr	r2, [pc, #368]	; (8003cb8 <play+0xfec>)
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4853      	ldr	r0, [pc, #332]	; (8003c98 <play+0xfcc>)
 8003b4c:	f002 f8ae 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8003b50:	4856      	ldr	r0, [pc, #344]	; (8003cac <play+0xfe0>)
 8003b52:	f004 fb7c 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003b56:	bf00      	nop
 8003b58:	484f      	ldr	r0, [pc, #316]	; (8003c98 <play+0xfcc>)
 8003b5a:	f002 fa0f 	bl	8005f7c <HAL_DAC_GetState>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d1f9      	bne.n	8003b58 <play+0xe8c>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003b64:	2100      	movs	r1, #0
 8003b66:	484c      	ldr	r0, [pc, #304]	; (8003c98 <play+0xfcc>)
 8003b68:	f002 f95c 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 8003b6c:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <play+0xff0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2200      	movs	r2, #0
 8003b72:	9200      	str	r2, [sp, #0]
 8003b74:	4a52      	ldr	r2, [pc, #328]	; (8003cc0 <play+0xff4>)
 8003b76:	2100      	movs	r1, #0
 8003b78:	4847      	ldr	r0, [pc, #284]	; (8003c98 <play+0xfcc>)
 8003b7a:	f002 f897 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003b7e:	bf00      	nop
 8003b80:	4845      	ldr	r0, [pc, #276]	; (8003c98 <play+0xfcc>)
 8003b82:	f002 f9fb 	bl	8005f7c <HAL_DAC_GetState>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d1f9      	bne.n	8003b80 <play+0xeb4>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4842      	ldr	r0, [pc, #264]	; (8003c98 <play+0xfcc>)
 8003b90:	f002 f948 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B14_GPIO_Port, B14_Pin)==GPIO_PIN_SET)
 8003b94:	e013      	b.n	8003bbe <play+0xef2>
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 8003b96:	2300      	movs	r3, #0
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b9e:	4a3d      	ldr	r2, [pc, #244]	; (8003c94 <play+0xfc8>)
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	483d      	ldr	r0, [pc, #244]	; (8003c98 <play+0xfcc>)
 8003ba4:	f002 f882 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003ba8:	bf00      	nop
 8003baa:	483b      	ldr	r0, [pc, #236]	; (8003c98 <play+0xfcc>)
 8003bac:	f002 f9e6 	bl	8005f7c <HAL_DAC_GetState>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d1f9      	bne.n	8003baa <play+0xede>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4837      	ldr	r0, [pc, #220]	; (8003c98 <play+0xfcc>)
 8003bba:	f002 f933 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B14_GPIO_Port, B14_Pin)==GPIO_PIN_SET)
 8003bbe:	2104      	movs	r1, #4
 8003bc0:	4836      	ldr	r0, [pc, #216]	; (8003c9c <play+0xfd0>)
 8003bc2:	f003 f9ff 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d0e4      	beq.n	8003b96 <play+0xeca>
				}
				NoteStat[13]=1;
 8003bcc:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <play+0xfd4>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	735a      	strb	r2, [r3, #13]
		  }
		  if ((HAL_GPIO_ReadPin(B14_GPIO_Port, B14_Pin)==GPIO_PIN_RESET)&&(NoteStat[13]==1))
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	4831      	ldr	r0, [pc, #196]	; (8003c9c <play+0xfd0>)
 8003bd6:	f003 f9f5 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11a      	bne.n	8003c16 <play+0xf4a>
 8003be0:	4b2f      	ldr	r3, [pc, #188]	; (8003ca0 <play+0xfd4>)
 8003be2:	7b5b      	ldrb	r3, [r3, #13]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d116      	bne.n	8003c16 <play+0xf4a>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 8003be8:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <play+0xfd8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	9200      	str	r2, [sp, #0]
 8003bf0:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <play+0xfdc>)
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4828      	ldr	r0, [pc, #160]	; (8003c98 <play+0xfcc>)
 8003bf6:	f002 f859 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003bfa:	bf00      	nop
 8003bfc:	4826      	ldr	r0, [pc, #152]	; (8003c98 <play+0xfcc>)
 8003bfe:	f002 f9bd 	bl	8005f7c <HAL_DAC_GetState>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d1f9      	bne.n	8003bfc <play+0xf30>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4823      	ldr	r0, [pc, #140]	; (8003c98 <play+0xfcc>)
 8003c0c:	f002 f90a 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[13]=0;
 8003c10:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <play+0xfd4>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	735a      	strb	r2, [r3, #13]
		  }

		  // Note 15
		  if((HAL_GPIO_ReadPin(B15_GPIO_Port, B15_Pin)==GPIO_PIN_SET)&&(NoteStat[14]==0))
 8003c16:	2110      	movs	r1, #16
 8003c18:	4820      	ldr	r0, [pc, #128]	; (8003c9c <play+0xfd0>)
 8003c1a:	f003 f9d3 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d16d      	bne.n	8003d00 <play+0x1034>
 8003c24:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <play+0xfd4>)
 8003c26:	7b9b      	ldrb	r3, [r3, #14]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d169      	bne.n	8003d00 <play+0x1034>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 8003c2c:	481f      	ldr	r0, [pc, #124]	; (8003cac <play+0xfe0>)
 8003c2e:	f004 fade 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[14]);
 8003c32:	4b1f      	ldr	r3, [pc, #124]	; (8003cb0 <play+0xfe4>)
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	4618      	mov	r0, r3
 8003c38:	f001 f90a 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8003c3c:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <play+0xfe8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2200      	movs	r2, #0
 8003c42:	9200      	str	r2, [sp, #0]
 8003c44:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <play+0xfec>)
 8003c46:	2100      	movs	r1, #0
 8003c48:	4813      	ldr	r0, [pc, #76]	; (8003c98 <play+0xfcc>)
 8003c4a:	f002 f82f 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8003c4e:	4817      	ldr	r0, [pc, #92]	; (8003cac <play+0xfe0>)
 8003c50:	f004 fafd 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003c54:	bf00      	nop
 8003c56:	4810      	ldr	r0, [pc, #64]	; (8003c98 <play+0xfcc>)
 8003c58:	f002 f990 	bl	8005f7c <HAL_DAC_GetState>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d1f9      	bne.n	8003c56 <play+0xf8a>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003c62:	2100      	movs	r1, #0
 8003c64:	480c      	ldr	r0, [pc, #48]	; (8003c98 <play+0xfcc>)
 8003c66:	f002 f8dd 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <play+0xff0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	9200      	str	r2, [sp, #0]
 8003c72:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <play+0xff4>)
 8003c74:	2100      	movs	r1, #0
 8003c76:	4808      	ldr	r0, [pc, #32]	; (8003c98 <play+0xfcc>)
 8003c78:	f002 f818 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003c7c:	bf00      	nop
 8003c7e:	4806      	ldr	r0, [pc, #24]	; (8003c98 <play+0xfcc>)
 8003c80:	f002 f97c 	bl	8005f7c <HAL_DAC_GetState>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d1f9      	bne.n	8003c7e <play+0xfb2>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <play+0xfcc>)
 8003c8e:	f002 f8c9 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B15_GPIO_Port, B15_Pin)==GPIO_PIN_SET)
 8003c92:	e02b      	b.n	8003cec <play+0x1020>
 8003c94:	200100e0 	.word	0x200100e0
 8003c98:	20018760 	.word	0x20018760
 8003c9c:	40020c00 	.word	0x40020c00
 8003ca0:	200000cc 	.word	0x200000cc
 8003ca4:	20018c40 	.word	0x20018c40
 8003ca8:	200104e0 	.word	0x200104e0
 8003cac:	20018c94 	.word	0x20018c94
 8003cb0:	20000000 	.word	0x20000000
 8003cb4:	20018c30 	.word	0x20018c30
 8003cb8:	200000e0 	.word	0x200000e0
 8003cbc:	20018c4c 	.word	0x20018c4c
 8003cc0:	200080e0 	.word	0x200080e0
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ccc:	4a63      	ldr	r2, [pc, #396]	; (8003e5c <play+0x1190>)
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4863      	ldr	r0, [pc, #396]	; (8003e60 <play+0x1194>)
 8003cd2:	f001 ffeb 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003cd6:	bf00      	nop
 8003cd8:	4861      	ldr	r0, [pc, #388]	; (8003e60 <play+0x1194>)
 8003cda:	f002 f94f 	bl	8005f7c <HAL_DAC_GetState>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d1f9      	bne.n	8003cd8 <play+0x100c>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	485e      	ldr	r0, [pc, #376]	; (8003e60 <play+0x1194>)
 8003ce8:	f002 f89c 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B15_GPIO_Port, B15_Pin)==GPIO_PIN_SET)
 8003cec:	2110      	movs	r1, #16
 8003cee:	485d      	ldr	r0, [pc, #372]	; (8003e64 <play+0x1198>)
 8003cf0:	f003 f968 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d0e4      	beq.n	8003cc4 <play+0xff8>
				}
				NoteStat[14]=1;
 8003cfa:	4b5b      	ldr	r3, [pc, #364]	; (8003e68 <play+0x119c>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	739a      	strb	r2, [r3, #14]
		  }
		  if ((HAL_GPIO_ReadPin(B15_GPIO_Port, B15_Pin)==GPIO_PIN_RESET)&&(NoteStat[14]==1))
 8003d00:	2110      	movs	r1, #16
 8003d02:	4858      	ldr	r0, [pc, #352]	; (8003e64 <play+0x1198>)
 8003d04:	f003 f95e 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11a      	bne.n	8003d44 <play+0x1078>
 8003d0e:	4b56      	ldr	r3, [pc, #344]	; (8003e68 <play+0x119c>)
 8003d10:	7b9b      	ldrb	r3, [r3, #14]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d116      	bne.n	8003d44 <play+0x1078>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 8003d16:	4b55      	ldr	r3, [pc, #340]	; (8003e6c <play+0x11a0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	9200      	str	r2, [sp, #0]
 8003d1e:	4a54      	ldr	r2, [pc, #336]	; (8003e70 <play+0x11a4>)
 8003d20:	2100      	movs	r1, #0
 8003d22:	484f      	ldr	r0, [pc, #316]	; (8003e60 <play+0x1194>)
 8003d24:	f001 ffc2 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003d28:	bf00      	nop
 8003d2a:	484d      	ldr	r0, [pc, #308]	; (8003e60 <play+0x1194>)
 8003d2c:	f002 f926 	bl	8005f7c <HAL_DAC_GetState>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d1f9      	bne.n	8003d2a <play+0x105e>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003d36:	2100      	movs	r1, #0
 8003d38:	4849      	ldr	r0, [pc, #292]	; (8003e60 <play+0x1194>)
 8003d3a:	f002 f873 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[14]=0;
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <play+0x119c>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	739a      	strb	r2, [r3, #14]
		  }

		  // Note 16
		  if((HAL_GPIO_ReadPin(B16_GPIO_Port, B16_Pin)==GPIO_PIN_SET)&&(NoteStat[15]==0))
 8003d44:	2108      	movs	r1, #8
 8003d46:	4847      	ldr	r0, [pc, #284]	; (8003e64 <play+0x1198>)
 8003d48:	f003 f93c 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d155      	bne.n	8003dfe <play+0x1132>
 8003d52:	4b45      	ldr	r3, [pc, #276]	; (8003e68 <play+0x119c>)
 8003d54:	7bdb      	ldrb	r3, [r3, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d151      	bne.n	8003dfe <play+0x1132>
		  {
			    HAL_TIM_Base_DeInit(&htim2);
 8003d5a:	4846      	ldr	r0, [pc, #280]	; (8003e74 <play+0x11a8>)
 8003d5c:	f004 fa47 	bl	80081ee <HAL_TIM_Base_DeInit>
			  	TIM2_Init(prescalers[15]);
 8003d60:	4b45      	ldr	r3, [pc, #276]	; (8003e78 <play+0x11ac>)
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	4618      	mov	r0, r3
 8003d66:	f001 f873 	bl	8004e50 <TIM2_Init>

			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResAtt,durA, DAC_ALIGN_12B_R);
 8003d6a:	4b44      	ldr	r3, [pc, #272]	; (8003e7c <play+0x11b0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	9200      	str	r2, [sp, #0]
 8003d72:	4a43      	ldr	r2, [pc, #268]	; (8003e80 <play+0x11b4>)
 8003d74:	2100      	movs	r1, #0
 8003d76:	483a      	ldr	r0, [pc, #232]	; (8003e60 <play+0x1194>)
 8003d78:	f001 ff98 	bl	8005cac <HAL_DAC_Start_DMA>
			    HAL_TIM_Base_Start(&htim2);
 8003d7c:	483d      	ldr	r0, [pc, #244]	; (8003e74 <play+0x11a8>)
 8003d7e:	f004 fa66 	bl	800824e <HAL_TIM_Base_Start>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003d82:	bf00      	nop
 8003d84:	4836      	ldr	r0, [pc, #216]	; (8003e60 <play+0x1194>)
 8003d86:	f002 f8f9 	bl	8005f7c <HAL_DAC_GetState>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d1f9      	bne.n	8003d84 <play+0x10b8>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003d90:	2100      	movs	r1, #0
 8003d92:	4833      	ldr	r0, [pc, #204]	; (8003e60 <play+0x1194>)
 8003d94:	f002 f846 	bl	8005e24 <HAL_DAC_Stop_DMA>
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResDec,durD, DAC_ALIGN_12B_R);
 8003d98:	4b3a      	ldr	r3, [pc, #232]	; (8003e84 <play+0x11b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	9200      	str	r2, [sp, #0]
 8003da0:	4a39      	ldr	r2, [pc, #228]	; (8003e88 <play+0x11bc>)
 8003da2:	2100      	movs	r1, #0
 8003da4:	482e      	ldr	r0, [pc, #184]	; (8003e60 <play+0x1194>)
 8003da6:	f001 ff81 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003daa:	bf00      	nop
 8003dac:	482c      	ldr	r0, [pc, #176]	; (8003e60 <play+0x1194>)
 8003dae:	f002 f8e5 	bl	8005f7c <HAL_DAC_GetState>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d1f9      	bne.n	8003dac <play+0x10e0>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003db8:	2100      	movs	r1, #0
 8003dba:	4829      	ldr	r0, [pc, #164]	; (8003e60 <play+0x1194>)
 8003dbc:	f002 f832 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B16_GPIO_Port, B16_Pin)==GPIO_PIN_SET)
 8003dc0:	e013      	b.n	8003dea <play+0x111e>
				{
			    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResSus,256, DAC_ALIGN_12B_R);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dca:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <play+0x1190>)
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4824      	ldr	r0, [pc, #144]	; (8003e60 <play+0x1194>)
 8003dd0:	f001 ff6c 	bl	8005cac <HAL_DAC_Start_DMA>
			    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003dd4:	bf00      	nop
 8003dd6:	4822      	ldr	r0, [pc, #136]	; (8003e60 <play+0x1194>)
 8003dd8:	f002 f8d0 	bl	8005f7c <HAL_DAC_GetState>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d1f9      	bne.n	8003dd6 <play+0x110a>
			    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003de2:	2100      	movs	r1, #0
 8003de4:	481e      	ldr	r0, [pc, #120]	; (8003e60 <play+0x1194>)
 8003de6:	f002 f81d 	bl	8005e24 <HAL_DAC_Stop_DMA>
				while(HAL_GPIO_ReadPin(B16_GPIO_Port, B16_Pin)==GPIO_PIN_SET)
 8003dea:	2108      	movs	r1, #8
 8003dec:	481d      	ldr	r0, [pc, #116]	; (8003e64 <play+0x1198>)
 8003dee:	f003 f8e9 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d0e4      	beq.n	8003dc2 <play+0x10f6>
				}
				NoteStat[15]=1;
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <play+0x119c>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	73da      	strb	r2, [r3, #15]
		  }
		  if ((HAL_GPIO_ReadPin(B16_GPIO_Port, B16_Pin)==GPIO_PIN_RESET)&&(NoteStat[15]==1))
 8003dfe:	2108      	movs	r1, #8
 8003e00:	4818      	ldr	r0, [pc, #96]	; (8003e64 <play+0x1198>)
 8003e02:	f003 f8df 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11a      	bne.n	8003e42 <play+0x1176>
 8003e0c:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <play+0x119c>)
 8003e0e:	7bdb      	ldrb	r3, [r3, #15]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d116      	bne.n	8003e42 <play+0x1176>
		  {
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)ResRel,durR, DAC_ALIGN_12B_R);
 8003e14:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <play+0x11a0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	9200      	str	r2, [sp, #0]
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <play+0x11a4>)
 8003e1e:	2100      	movs	r1, #0
 8003e20:	480f      	ldr	r0, [pc, #60]	; (8003e60 <play+0x1194>)
 8003e22:	f001 ff43 	bl	8005cac <HAL_DAC_Start_DMA>
		    while(HAL_DAC_GetState(&hdac)!=HAL_DAC_STATE_READY){}
 8003e26:	bf00      	nop
 8003e28:	480d      	ldr	r0, [pc, #52]	; (8003e60 <play+0x1194>)
 8003e2a:	f002 f8a7 	bl	8005f7c <HAL_DAC_GetState>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d1f9      	bne.n	8003e28 <play+0x115c>
		    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8003e34:	2100      	movs	r1, #0
 8003e36:	480a      	ldr	r0, [pc, #40]	; (8003e60 <play+0x1194>)
 8003e38:	f001 fff4 	bl	8005e24 <HAL_DAC_Stop_DMA>
		    NoteStat[15]=0;
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <play+0x119c>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	73da      	strb	r2, [r3, #15]
	  while(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_RESET)
 8003e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e46:	4811      	ldr	r0, [pc, #68]	; (8003e8c <play+0x11c0>)
 8003e48:	f003 f8bc 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f43e af4c 	beq.w	8002cec <play+0x20>
		  }
	  }

}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	200100e0 	.word	0x200100e0
 8003e60:	20018760 	.word	0x20018760
 8003e64:	40020c00 	.word	0x40020c00
 8003e68:	200000cc 	.word	0x200000cc
 8003e6c:	20018c40 	.word	0x20018c40
 8003e70:	200104e0 	.word	0x200104e0
 8003e74:	20018c94 	.word	0x20018c94
 8003e78:	20000000 	.word	0x20000000
 8003e7c:	20018c30 	.word	0x20018c30
 8003e80:	200000e0 	.word	0x200000e0
 8003e84:	20018c4c 	.word	0x20018c4c
 8003e88:	200080e0 	.word	0x200080e0
 8003e8c:	40021000 	.word	0x40021000

08003e90 <Octv>:
void Octv(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
	  lcd_clear();
 8003e96:	f7fd fc51 	bl	800173c <lcd_clear>
	  lcd_put_cur(0, 0);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f7fd fc64 	bl	800176a <lcd_put_cur>
	  lcd_send_string(&"Octave:");
 8003ea2:	484c      	ldr	r0, [pc, #304]	; (8003fd4 <Octv+0x144>)
 8003ea4:	f7fd fcbd 	bl	8001822 <lcd_send_string>
	  lcd_put_cur(1,0);
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f7fd fc5d 	bl	800176a <lcd_put_cur>
	  itoa(k,val,10);
 8003eb0:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <Octv+0x148>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	220a      	movs	r2, #10
 8003eb6:	4949      	ldr	r1, [pc, #292]	; (8003fdc <Octv+0x14c>)
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f005 fb59 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 8003ebe:	4847      	ldr	r0, [pc, #284]	; (8003fdc <Octv+0x14c>)
 8003ec0:	f7fd fcaf 	bl	8001822 <lcd_send_string>

	  while((HAL_GPIO_ReadPin(BNon_GPIO_Port, BNon_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_RESET)){}
 8003ec4:	bf00      	nop
 8003ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003eca:	4845      	ldr	r0, [pc, #276]	; (8003fe0 <Octv+0x150>)
 8003ecc:	f003 f87a 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10f      	bne.n	8003ef6 <Octv+0x66>
 8003ed6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003eda:	4841      	ldr	r0, [pc, #260]	; (8003fe0 <Octv+0x150>)
 8003edc:	f003 f872 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d107      	bne.n	8003ef6 <Octv+0x66>
 8003ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003eea:	483d      	ldr	r0, [pc, #244]	; (8003fe0 <Octv+0x150>)
 8003eec:	f003 f86a 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0e7      	beq.n	8003ec6 <Octv+0x36>
	  if(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET)
 8003ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003efa:	4839      	ldr	r0, [pc, #228]	; (8003fe0 <Octv+0x150>)
 8003efc:	f003 f862 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d10b      	bne.n	8003f1e <Octv+0x8e>
	  {
		  while(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET){}
 8003f06:	bf00      	nop
 8003f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f0c:	4834      	ldr	r0, [pc, #208]	; (8003fe0 <Octv+0x150>)
 8003f0e:	f003 f859 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d0f7      	beq.n	8003f08 <Octv+0x78>
		  synth=0;
 8003f18:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <Octv+0x154>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
	  }
	  if(HAL_GPIO_ReadPin(BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_SET)
 8003f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f22:	482f      	ldr	r0, [pc, #188]	; (8003fe0 <Octv+0x150>)
 8003f24:	f003 f84e 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d124      	bne.n	8003f78 <Octv+0xe8>
	  {
		while((BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_SET){}
 8003f2e:	bf00      	nop
			kpred=k;
 8003f30:	4b29      	ldr	r3, [pc, #164]	; (8003fd8 <Octv+0x148>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a2c      	ldr	r2, [pc, #176]	; (8003fe8 <Octv+0x158>)
 8003f36:	6013      	str	r3, [r2, #0]
			k++;
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <Octv+0x148>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	4a26      	ldr	r2, [pc, #152]	; (8003fd8 <Octv+0x148>)
 8003f40:	6013      	str	r3, [r2, #0]
			  if(k>kpred)
 8003f42:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <Octv+0x148>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <Octv+0x158>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	dd14      	ble.n	8003f78 <Octv+0xe8>
			  {
				for (int i =0;i<16;i++)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	e00e      	b.n	8003f72 <Octv+0xe2>
				{
					prescalers[i]=prescalers[i]/2;
 8003f54:	4a25      	ldr	r2, [pc, #148]	; (8003fec <Octv+0x15c>)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5c:	0fda      	lsrs	r2, r3, #31
 8003f5e:	4413      	add	r3, r2
 8003f60:	105b      	asrs	r3, r3, #1
 8003f62:	4619      	mov	r1, r3
 8003f64:	4a21      	ldr	r2, [pc, #132]	; (8003fec <Octv+0x15c>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i =0;i<16;i++)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b0f      	cmp	r3, #15
 8003f76:	dded      	ble.n	8003f54 <Octv+0xc4>
				}
			  }
	  }
	  if(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET)
 8003f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f7c:	4818      	ldr	r0, [pc, #96]	; (8003fe0 <Octv+0x150>)
 8003f7e:	f003 f821 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d121      	bne.n	8003fcc <Octv+0x13c>
	  {
		while((BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET){}
 8003f88:	bf00      	nop

			kpred=k;
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <Octv+0x148>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <Octv+0x158>)
 8003f90:	6013      	str	r3, [r2, #0]
			k--;
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <Octv+0x148>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	4a0f      	ldr	r2, [pc, #60]	; (8003fd8 <Octv+0x148>)
 8003f9a:	6013      	str	r3, [r2, #0]
			  if(k<kpred)
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <Octv+0x148>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <Octv+0x158>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	da11      	bge.n	8003fcc <Octv+0x13c>
			  {
				for (int i =0;i<16;i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	e00b      	b.n	8003fc6 <Octv+0x136>
				{
					prescalers[i]=prescalers[i]*2;
 8003fae:	4a0f      	ldr	r2, [pc, #60]	; (8003fec <Octv+0x15c>)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb6:	005a      	lsls	r2, r3, #1
 8003fb8:	490c      	ldr	r1, [pc, #48]	; (8003fec <Octv+0x15c>)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int i =0;i<16;i++)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b0f      	cmp	r3, #15
 8003fca:	ddf0      	ble.n	8003fae <Octv+0x11e>
				}
			  }

	  }
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	08009654 	.word	0x08009654
 8003fd8:	200184f8 	.word	0x200184f8
 8003fdc:	20018c34 	.word	0x20018c34
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	200184f5 	.word	0x200184f5
 8003fe8:	200184fc 	.word	0x200184fc
 8003fec:	20000000 	.word	0x20000000

08003ff0 <osc>:
void osc(void)
{
 8003ff0:	b5b0      	push	{r4, r5, r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
	  lcd_clear();
 8003ff6:	f7fd fba1 	bl	800173c <lcd_clear>
	  lcd_put_cur(0, 0);
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f7fd fbb4 	bl	800176a <lcd_put_cur>
	  itoa(bt1,val,10);
 8004002:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <osc+0xb8>)
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	220a      	movs	r2, #10
 8004008:	4928      	ldr	r1, [pc, #160]	; (80040ac <osc+0xbc>)
 800400a:	4618      	mov	r0, r3
 800400c:	f005 fab0 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 8004010:	4826      	ldr	r0, [pc, #152]	; (80040ac <osc+0xbc>)
 8004012:	f7fd fc06 	bl	8001822 <lcd_send_string>
	  lcd_put_cur(0, 5);
 8004016:	2105      	movs	r1, #5
 8004018:	2000      	movs	r0, #0
 800401a:	f7fd fba6 	bl	800176a <lcd_put_cur>
	  itoa(bt2,val,10);
 800401e:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <osc+0xc0>)
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	220a      	movs	r2, #10
 8004024:	4921      	ldr	r1, [pc, #132]	; (80040ac <osc+0xbc>)
 8004026:	4618      	mov	r0, r3
 8004028:	f005 faa2 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 800402c:	481f      	ldr	r0, [pc, #124]	; (80040ac <osc+0xbc>)
 800402e:	f7fd fbf8 	bl	8001822 <lcd_send_string>
	  lcd_put_cur(0, 10);
 8004032:	210a      	movs	r1, #10
 8004034:	2000      	movs	r0, #0
 8004036:	f7fd fb98 	bl	800176a <lcd_put_cur>
	  itoa(bt3,val,10);
 800403a:	4b1e      	ldr	r3, [pc, #120]	; (80040b4 <osc+0xc4>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	220a      	movs	r2, #10
 8004040:	491a      	ldr	r1, [pc, #104]	; (80040ac <osc+0xbc>)
 8004042:	4618      	mov	r0, r3
 8004044:	f005 fa94 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 8004048:	4818      	ldr	r0, [pc, #96]	; (80040ac <osc+0xbc>)
 800404a:	f7fd fbea 	bl	8001822 <lcd_send_string>

	  lcd_put_cur(1, 0);
 800404e:	2100      	movs	r1, #0
 8004050:	2001      	movs	r0, #1
 8004052:	f7fd fb8a 	bl	800176a <lcd_put_cur>
	  itoa(adc1[0],val,10);
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <osc+0xc8>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	220a      	movs	r2, #10
 800405c:	4913      	ldr	r1, [pc, #76]	; (80040ac <osc+0xbc>)
 800405e:	4618      	mov	r0, r3
 8004060:	f005 fa86 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 8004064:	4811      	ldr	r0, [pc, #68]	; (80040ac <osc+0xbc>)
 8004066:	f7fd fbdc 	bl	8001822 <lcd_send_string>
	  lcd_put_cur(1, 5);
 800406a:	2105      	movs	r1, #5
 800406c:	2001      	movs	r0, #1
 800406e:	f7fd fb7c 	bl	800176a <lcd_put_cur>
	  itoa(adc2[0],val,10);
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <osc+0xcc>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	220a      	movs	r2, #10
 8004078:	490c      	ldr	r1, [pc, #48]	; (80040ac <osc+0xbc>)
 800407a:	4618      	mov	r0, r3
 800407c:	f005 fa78 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 8004080:	480a      	ldr	r0, [pc, #40]	; (80040ac <osc+0xbc>)
 8004082:	f7fd fbce 	bl	8001822 <lcd_send_string>
	  lcd_put_cur(1, 10);
 8004086:	210a      	movs	r1, #10
 8004088:	2001      	movs	r0, #1
 800408a:	f7fd fb6e 	bl	800176a <lcd_put_cur>
	  itoa(adc3[0],val,10);
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <osc+0xd0>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	220a      	movs	r2, #10
 8004094:	4905      	ldr	r1, [pc, #20]	; (80040ac <osc+0xbc>)
 8004096:	4618      	mov	r0, r3
 8004098:	f005 fa6a 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 800409c:	4803      	ldr	r0, [pc, #12]	; (80040ac <osc+0xbc>)
 800409e:	f7fd fbc0 	bl	8001822 <lcd_send_string>
	  for(int i=0 ; i<256;i++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	e0cf      	b.n	8004248 <osc+0x258>
 80040a8:	2000008c 	.word	0x2000008c
 80040ac:	20018c34 	.word	0x20018c34
 80040b0:	2000008e 	.word	0x2000008e
 80040b4:	20000090 	.word	0x20000090
 80040b8:	20000080 	.word	0x20000080
 80040bc:	20000084 	.word	0x20000084
 80040c0:	20000088 	.word	0x20000088
	  	  {
		  long int test1=((adc1[0]+1))*0.33*(waveforms[bt1][i]/64);
 80040c4:	4bc2      	ldr	r3, [pc, #776]	; (80043d0 <osc+0x3e0>)
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc f9ce 	bl	800046c <__aeabi_i2d>
 80040d0:	a3bd      	add	r3, pc, #756	; (adr r3, 80043c8 <osc+0x3d8>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f7fc fa33 	bl	8000540 <__aeabi_dmul>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4614      	mov	r4, r2
 80040e0:	461d      	mov	r5, r3
 80040e2:	4bbc      	ldr	r3, [pc, #752]	; (80043d4 <osc+0x3e4>)
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	49bc      	ldr	r1, [pc, #752]	; (80043d8 <osc+0x3e8>)
 80040e8:	021a      	lsls	r2, r3, #8
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040f2:	099b      	lsrs	r3, r3, #6
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fc f9a9 	bl	800044c <__aeabi_ui2d>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f7fc fa1d 	bl	8000540 <__aeabi_dmul>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	f7fc fcb1 	bl	8000a74 <__aeabi_d2iz>
 8004112:	4603      	mov	r3, r0
 8004114:	613b      	str	r3, [r7, #16]
		  long int test2=((adc2[0]+1))*0.33*(waveforms[bt2][i]/64);
 8004116:	4bb1      	ldr	r3, [pc, #708]	; (80043dc <osc+0x3ec>)
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	3301      	adds	r3, #1
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc f9a5 	bl	800046c <__aeabi_i2d>
 8004122:	a3a9      	add	r3, pc, #676	; (adr r3, 80043c8 <osc+0x3d8>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f7fc fa0a 	bl	8000540 <__aeabi_dmul>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4614      	mov	r4, r2
 8004132:	461d      	mov	r5, r3
 8004134:	4baa      	ldr	r3, [pc, #680]	; (80043e0 <osc+0x3f0>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	49a7      	ldr	r1, [pc, #668]	; (80043d8 <osc+0x3e8>)
 800413a:	021a      	lsls	r2, r3, #8
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004144:	099b      	lsrs	r3, r3, #6
 8004146:	4618      	mov	r0, r3
 8004148:	f7fc f980 	bl	800044c <__aeabi_ui2d>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4620      	mov	r0, r4
 8004152:	4629      	mov	r1, r5
 8004154:	f7fc f9f4 	bl	8000540 <__aeabi_dmul>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	f7fc fc88 	bl	8000a74 <__aeabi_d2iz>
 8004164:	4603      	mov	r3, r0
 8004166:	60fb      	str	r3, [r7, #12]
		  long int test3=((adc3[0]+1))*0.33*(waveforms[bt3][i]/64);
 8004168:	4b9e      	ldr	r3, [pc, #632]	; (80043e4 <osc+0x3f4>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc f97c 	bl	800046c <__aeabi_i2d>
 8004174:	a394      	add	r3, pc, #592	; (adr r3, 80043c8 <osc+0x3d8>)
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f7fc f9e1 	bl	8000540 <__aeabi_dmul>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4614      	mov	r4, r2
 8004184:	461d      	mov	r5, r3
 8004186:	4b98      	ldr	r3, [pc, #608]	; (80043e8 <osc+0x3f8>)
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	4993      	ldr	r1, [pc, #588]	; (80043d8 <osc+0x3e8>)
 800418c:	021a      	lsls	r2, r3, #8
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	4618      	mov	r0, r3
 800419a:	f7fc f957 	bl	800044c <__aeabi_ui2d>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4620      	mov	r0, r4
 80041a4:	4629      	mov	r1, r5
 80041a6:	f7fc f9cb 	bl	8000540 <__aeabi_dmul>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	f7fc fc5f 	bl	8000a74 <__aeabi_d2iz>
 80041b6:	4603      	mov	r3, r0
 80041b8:	60bb      	str	r3, [r7, #8]
		  float testfloat = (0.33*(adc1[0]+adc2[0]+adc3[0]+3)/64);
 80041ba:	4b85      	ldr	r3, [pc, #532]	; (80043d0 <osc+0x3e0>)
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	4b86      	ldr	r3, [pc, #536]	; (80043dc <osc+0x3ec>)
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	4413      	add	r3, r2
 80041c6:	4a87      	ldr	r2, [pc, #540]	; (80043e4 <osc+0x3f4>)
 80041c8:	8812      	ldrh	r2, [r2, #0]
 80041ca:	4413      	add	r3, r2
 80041cc:	3303      	adds	r3, #3
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc f94c 	bl	800046c <__aeabi_i2d>
 80041d4:	a37c      	add	r3, pc, #496	; (adr r3, 80043c8 <osc+0x3d8>)
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f7fc f9b1 	bl	8000540 <__aeabi_dmul>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	4b80      	ldr	r3, [pc, #512]	; (80043ec <osc+0x3fc>)
 80041ec:	f7fc fad2 	bl	8000794 <__aeabi_ddiv>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f7fc fc64 	bl	8000ac4 <__aeabi_d2f>
 80041fc:	4603      	mov	r3, r0
 80041fe:	607b      	str	r3, [r7, #4]
		  testfloat=2048*(1-testfloat);
 8004200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004204:	edd7 7a01 	vldr	s15, [r7, #4]
 8004208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80043f0 <osc+0x400>
 8004210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004214:	edc7 7a01 	vstr	s15, [r7, #4]
		  Resultat[i]=test1+test2+test3+testfloat;
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	441a      	add	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4413      	add	r3, r2
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800422a:	edd7 7a01 	vldr	s15, [r7, #4]
 800422e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004236:	ee17 1a90 	vmov	r1, s15
 800423a:	4a6e      	ldr	r2, [pc, #440]	; (80043f4 <osc+0x404>)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(int i=0 ; i<256;i++)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3301      	adds	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2bff      	cmp	r3, #255	; 0xff
 800424c:	f77f af3a 	ble.w	80040c4 <osc+0xd4>
	  	  }
		while((HAL_GPIO_ReadPin(BOsc1_GPIO_Port, BOsc1_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BOsc2_GPIO_Port, BOsc2_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BOsc3_GPIO_Port, BOsc3_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BOui_GPIO_Port,BOui_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_RESET)){}
 8004250:	bf00      	nop
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	4868      	ldr	r0, [pc, #416]	; (80043f8 <osc+0x408>)
 8004256:	f002 feb5 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d11f      	bne.n	80042a0 <osc+0x2b0>
 8004260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004264:	4864      	ldr	r0, [pc, #400]	; (80043f8 <osc+0x408>)
 8004266:	f002 fead 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d117      	bne.n	80042a0 <osc+0x2b0>
 8004270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004274:	4860      	ldr	r0, [pc, #384]	; (80043f8 <osc+0x408>)
 8004276:	f002 fea5 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10f      	bne.n	80042a0 <osc+0x2b0>
 8004280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004284:	485c      	ldr	r0, [pc, #368]	; (80043f8 <osc+0x408>)
 8004286:	f002 fe9d 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <osc+0x2b0>
 8004290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004294:	4858      	ldr	r0, [pc, #352]	; (80043f8 <osc+0x408>)
 8004296:	f002 fe95 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0d8      	beq.n	8004252 <osc+0x262>
		if(HAL_GPIO_ReadPin(BOsc1_GPIO_Port, BOsc1_Pin)==GPIO_PIN_SET)
 80042a0:	2180      	movs	r1, #128	; 0x80
 80042a2:	4855      	ldr	r0, [pc, #340]	; (80043f8 <osc+0x408>)
 80042a4:	f002 fe8e 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d117      	bne.n	80042de <osc+0x2ee>
		{
			while(HAL_GPIO_ReadPin(BOsc1_GPIO_Port, BOsc1_Pin)==GPIO_PIN_SET){}
 80042ae:	bf00      	nop
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	4851      	ldr	r0, [pc, #324]	; (80043f8 <osc+0x408>)
 80042b4:	f002 fe86 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d0f8      	beq.n	80042b0 <osc+0x2c0>
			bt1=(bt1+1)%5;
 80042be:	4b45      	ldr	r3, [pc, #276]	; (80043d4 <osc+0x3e4>)
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	4b4d      	ldr	r3, [pc, #308]	; (80043fc <osc+0x40c>)
 80042c6:	fb83 1302 	smull	r1, r3, r3, r2
 80042ca:	1059      	asrs	r1, r3, #1
 80042cc:	17d3      	asrs	r3, r2, #31
 80042ce:	1ac9      	subs	r1, r1, r3
 80042d0:	460b      	mov	r3, r1
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	1ad1      	subs	r1, r2, r3
 80042d8:	b28a      	uxth	r2, r1
 80042da:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <osc+0x3e4>)
 80042dc:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(BOsc2_GPIO_Port, BOsc2_Pin)==GPIO_PIN_SET)
 80042de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042e2:	4845      	ldr	r0, [pc, #276]	; (80043f8 <osc+0x408>)
 80042e4:	f002 fe6e 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d118      	bne.n	8004320 <osc+0x330>
		{
			while(HAL_GPIO_ReadPin(BOsc2_GPIO_Port, BOsc2_Pin)==GPIO_PIN_SET){}
 80042ee:	bf00      	nop
 80042f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042f4:	4840      	ldr	r0, [pc, #256]	; (80043f8 <osc+0x408>)
 80042f6:	f002 fe65 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d0f7      	beq.n	80042f0 <osc+0x300>
			bt2=(bt2+1)%5;
 8004300:	4b37      	ldr	r3, [pc, #220]	; (80043e0 <osc+0x3f0>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	4b3d      	ldr	r3, [pc, #244]	; (80043fc <osc+0x40c>)
 8004308:	fb83 1302 	smull	r1, r3, r3, r2
 800430c:	1059      	asrs	r1, r3, #1
 800430e:	17d3      	asrs	r3, r2, #31
 8004310:	1ac9      	subs	r1, r1, r3
 8004312:	460b      	mov	r3, r1
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	1ad1      	subs	r1, r2, r3
 800431a:	b28a      	uxth	r2, r1
 800431c:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <osc+0x3f0>)
 800431e:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(BOsc3_GPIO_Port, BOsc3_Pin)==GPIO_PIN_SET)
 8004320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004324:	4834      	ldr	r0, [pc, #208]	; (80043f8 <osc+0x408>)
 8004326:	f002 fe4d 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800432a:	4603      	mov	r3, r0
 800432c:	2b01      	cmp	r3, #1
 800432e:	d118      	bne.n	8004362 <osc+0x372>
		{
			while(HAL_GPIO_ReadPin(BOsc3_GPIO_Port, BOsc3_Pin)==GPIO_PIN_SET){}
 8004330:	bf00      	nop
 8004332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004336:	4830      	ldr	r0, [pc, #192]	; (80043f8 <osc+0x408>)
 8004338:	f002 fe44 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d0f7      	beq.n	8004332 <osc+0x342>
			bt3=(bt3+1)%5;
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <osc+0x3f8>)
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	4b2c      	ldr	r3, [pc, #176]	; (80043fc <osc+0x40c>)
 800434a:	fb83 1302 	smull	r1, r3, r3, r2
 800434e:	1059      	asrs	r1, r3, #1
 8004350:	17d3      	asrs	r3, r2, #31
 8004352:	1ac9      	subs	r1, r1, r3
 8004354:	460b      	mov	r3, r1
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	1ad1      	subs	r1, r2, r3
 800435c:	b28a      	uxth	r2, r1
 800435e:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <osc+0x3f8>)
 8004360:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(BOui_GPIO_Port,BOui_Pin)==GPIO_PIN_SET)
 8004362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004366:	4824      	ldr	r0, [pc, #144]	; (80043f8 <osc+0x408>)
 8004368:	f002 fe2c 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d10b      	bne.n	800438a <osc+0x39a>
		{
			while(HAL_GPIO_ReadPin(BOui_GPIO_Port,BOui_Pin)==GPIO_PIN_SET){}
 8004372:	bf00      	nop
 8004374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004378:	481f      	ldr	r0, [pc, #124]	; (80043f8 <osc+0x408>)
 800437a:	f002 fe23 	bl	8006fc4 <HAL_GPIO_ReadPin>
 800437e:	4603      	mov	r3, r0
 8004380:	2b01      	cmp	r3, #1
 8004382:	d0f7      	beq.n	8004374 <osc+0x384>
			synth=0;
 8004384:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <osc+0x410>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
		}
		HAL_ADC_Stop_DMA(&hadc1);
 800438a:	481e      	ldr	r0, [pc, #120]	; (8004404 <osc+0x414>)
 800438c:	f001 f852 	bl	8005434 <HAL_ADC_Stop_DMA>
		HAL_ADC_Stop_DMA(&hadc2);
 8004390:	481d      	ldr	r0, [pc, #116]	; (8004408 <osc+0x418>)
 8004392:	f001 f84f 	bl	8005434 <HAL_ADC_Stop_DMA>
		HAL_ADC_Stop_DMA(&hadc3);
 8004396:	481d      	ldr	r0, [pc, #116]	; (800440c <osc+0x41c>)
 8004398:	f001 f84c 	bl	8005434 <HAL_ADC_Stop_DMA>
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adc1, 32);
 800439c:	2220      	movs	r2, #32
 800439e:	490c      	ldr	r1, [pc, #48]	; (80043d0 <osc+0x3e0>)
 80043a0:	4818      	ldr	r0, [pc, #96]	; (8004404 <osc+0x414>)
 80043a2:	f000 ff55 	bl	8005250 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(&hadc2,(uint32_t*) adc2, 32);
 80043a6:	2220      	movs	r2, #32
 80043a8:	490c      	ldr	r1, [pc, #48]	; (80043dc <osc+0x3ec>)
 80043aa:	4817      	ldr	r0, [pc, #92]	; (8004408 <osc+0x418>)
 80043ac:	f000 ff50 	bl	8005250 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(&hadc3,(uint32_t*) adc3, 32);
 80043b0:	2220      	movs	r2, #32
 80043b2:	490c      	ldr	r1, [pc, #48]	; (80043e4 <osc+0x3f4>)
 80043b4:	4815      	ldr	r0, [pc, #84]	; (800440c <osc+0x41c>)
 80043b6:	f000 ff4b 	bl	8005250 <HAL_ADC_Start_DMA>
}
 80043ba:	bf00      	nop
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bdb0      	pop	{r4, r5, r7, pc}
 80043c2:	bf00      	nop
 80043c4:	f3af 8000 	nop.w
 80043c8:	51eb851f 	.word	0x51eb851f
 80043cc:	3fd51eb8 	.word	0x3fd51eb8
 80043d0:	20000080 	.word	0x20000080
 80043d4:	2000008c 	.word	0x2000008c
 80043d8:	080097b8 	.word	0x080097b8
 80043dc:	20000084 	.word	0x20000084
 80043e0:	2000008e 	.word	0x2000008e
 80043e4:	20000088 	.word	0x20000088
 80043e8:	20000090 	.word	0x20000090
 80043ec:	40500000 	.word	0x40500000
 80043f0:	45000000 	.word	0x45000000
 80043f4:	20018830 	.word	0x20018830
 80043f8:	40021000 	.word	0x40021000
 80043fc:	66666667 	.word	0x66666667
 8004400:	200184f5 	.word	0x200184f5
 8004404:	200185b0 	.word	0x200185b0
 8004408:	20018508 	.word	0x20018508
 800440c:	200185f8 	.word	0x200185f8

08004410 <env>:
void env(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0

	  HAL_ADC_Stop_DMA(&hadc1);
 8004416:	48b5      	ldr	r0, [pc, #724]	; (80046ec <env+0x2dc>)
 8004418:	f001 f80c 	bl	8005434 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc2);
 800441c:	48b4      	ldr	r0, [pc, #720]	; (80046f0 <env+0x2e0>)
 800441e:	f001 f809 	bl	8005434 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc3);
 8004422:	48b4      	ldr	r0, [pc, #720]	; (80046f4 <env+0x2e4>)
 8004424:	f001 f806 	bl	8005434 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adc1, 32);
 8004428:	2220      	movs	r2, #32
 800442a:	49b3      	ldr	r1, [pc, #716]	; (80046f8 <env+0x2e8>)
 800442c:	48af      	ldr	r0, [pc, #700]	; (80046ec <env+0x2dc>)
 800442e:	f000 ff0f 	bl	8005250 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2,(uint32_t*) adc2, 32);
 8004432:	2220      	movs	r2, #32
 8004434:	49b1      	ldr	r1, [pc, #708]	; (80046fc <env+0x2ec>)
 8004436:	48ae      	ldr	r0, [pc, #696]	; (80046f0 <env+0x2e0>)
 8004438:	f000 ff0a 	bl	8005250 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc3,(uint32_t*) adc3, 32);
 800443c:	2220      	movs	r2, #32
 800443e:	49b0      	ldr	r1, [pc, #704]	; (8004700 <env+0x2f0>)
 8004440:	48ac      	ldr	r0, [pc, #688]	; (80046f4 <env+0x2e4>)
 8004442:	f000 ff05 	bl	8005250 <HAL_ADC_Start_DMA>
	// de 1 à 64 les valeurs de l'adc (résolution 6 bit )
	  A=(adc1[0]+0);
 8004446:	4bac      	ldr	r3, [pc, #688]	; (80046f8 <env+0x2e8>)
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004452:	4bac      	ldr	r3, [pc, #688]	; (8004704 <env+0x2f4>)
 8004454:	edc3 7a00 	vstr	s15, [r3]
	  D=(adc2[0]+1);
 8004458:	4ba8      	ldr	r3, [pc, #672]	; (80046fc <env+0x2ec>)
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	3301      	adds	r3, #1
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004466:	4ba8      	ldr	r3, [pc, #672]	; (8004708 <env+0x2f8>)
 8004468:	edc3 7a00 	vstr	s15, [r3]
	  R=(adc3[0]+0);
 800446c:	4ba4      	ldr	r3, [pc, #656]	; (8004700 <env+0x2f0>)
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004478:	4ba4      	ldr	r3, [pc, #656]	; (800470c <env+0x2fc>)
 800447a:	edc3 7a00 	vstr	s15, [r3]
	  durA=32*A*4;
 800447e:	4ba1      	ldr	r3, [pc, #644]	; (8004704 <env+0x2f4>)
 8004480:	edd3 7a00 	vldr	s15, [r3]
 8004484:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8004710 <env+0x300>
 8004488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800448c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004498:	ee17 2a90 	vmov	r2, s15
 800449c:	4b9d      	ldr	r3, [pc, #628]	; (8004714 <env+0x304>)
 800449e:	601a      	str	r2, [r3, #0]
	  durD=32*D*4;
 80044a0:	4b99      	ldr	r3, [pc, #612]	; (8004708 <env+0x2f8>)
 80044a2:	edd3 7a00 	vldr	s15, [r3]
 80044a6:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8004710 <env+0x300>
 80044aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ae:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80044b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ba:	ee17 2a90 	vmov	r2, s15
 80044be:	4b96      	ldr	r3, [pc, #600]	; (8004718 <env+0x308>)
 80044c0:	601a      	str	r2, [r3, #0]
	  durR=32*R*4;
 80044c2:	4b92      	ldr	r3, [pc, #584]	; (800470c <env+0x2fc>)
 80044c4:	edd3 7a00 	vldr	s15, [r3]
 80044c8:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8004710 <env+0x300>
 80044cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80044d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044dc:	ee17 2a90 	vmov	r2, s15
 80044e0:	4b8e      	ldr	r3, [pc, #568]	; (800471c <env+0x30c>)
 80044e2:	601a      	str	r2, [r3, #0]
	  //Prendre les valeurs de A,D et R;


	  lcd_clear();
 80044e4:	f7fd f92a 	bl	800173c <lcd_clear>
	  lcd_put_cur(0, 0);
 80044e8:	2100      	movs	r1, #0
 80044ea:	2000      	movs	r0, #0
 80044ec:	f7fd f93d 	bl	800176a <lcd_put_cur>
	  lcd_send_string(&"A:");
 80044f0:	488b      	ldr	r0, [pc, #556]	; (8004720 <env+0x310>)
 80044f2:	f7fd f996 	bl	8001822 <lcd_send_string>
	  lcd_put_cur(0, 8);
 80044f6:	2108      	movs	r1, #8
 80044f8:	2000      	movs	r0, #0
 80044fa:	f7fd f936 	bl	800176a <lcd_put_cur>
	  lcd_send_string(&"D:");
 80044fe:	4889      	ldr	r0, [pc, #548]	; (8004724 <env+0x314>)
 8004500:	f7fd f98f 	bl	8001822 <lcd_send_string>

	  lcd_put_cur(1, 0);
 8004504:	2100      	movs	r1, #0
 8004506:	2001      	movs	r0, #1
 8004508:	f7fd f92f 	bl	800176a <lcd_put_cur>
	  lcd_send_string(&"S:");
 800450c:	4886      	ldr	r0, [pc, #536]	; (8004728 <env+0x318>)
 800450e:	f7fd f988 	bl	8001822 <lcd_send_string>
	  lcd_put_cur(1,5);
 8004512:	2105      	movs	r1, #5
 8004514:	2001      	movs	r0, #1
 8004516:	f7fd f928 	bl	800176a <lcd_put_cur>
	  lcd_send_string(&"/10 ");
 800451a:	4884      	ldr	r0, [pc, #528]	; (800472c <env+0x31c>)
 800451c:	f7fd f981 	bl	8001822 <lcd_send_string>
	  lcd_put_cur(1, 8);
 8004520:	2108      	movs	r1, #8
 8004522:	2001      	movs	r0, #1
 8004524:	f7fd f921 	bl	800176a <lcd_put_cur>
	  lcd_send_string(&"R:");
 8004528:	4881      	ldr	r0, [pc, #516]	; (8004730 <env+0x320>)
 800452a:	f7fd f97a 	bl	8001822 <lcd_send_string>

	  lcd_put_cur(0, 3);
 800452e:	2103      	movs	r1, #3
 8004530:	2000      	movs	r0, #0
 8004532:	f7fd f91a 	bl	800176a <lcd_put_cur>
	  itoa(A,val,10);
 8004536:	4b73      	ldr	r3, [pc, #460]	; (8004704 <env+0x2f4>)
 8004538:	edd3 7a00 	vldr	s15, [r3]
 800453c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004540:	220a      	movs	r2, #10
 8004542:	497c      	ldr	r1, [pc, #496]	; (8004734 <env+0x324>)
 8004544:	ee17 0a90 	vmov	r0, s15
 8004548:	f005 f812 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 800454c:	4879      	ldr	r0, [pc, #484]	; (8004734 <env+0x324>)
 800454e:	f7fd f968 	bl	8001822 <lcd_send_string>
	  lcd_put_cur(0, 11);
 8004552:	210b      	movs	r1, #11
 8004554:	2000      	movs	r0, #0
 8004556:	f7fd f908 	bl	800176a <lcd_put_cur>
	  itoa(D,val,10);
 800455a:	4b6b      	ldr	r3, [pc, #428]	; (8004708 <env+0x2f8>)
 800455c:	edd3 7a00 	vldr	s15, [r3]
 8004560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004564:	220a      	movs	r2, #10
 8004566:	4973      	ldr	r1, [pc, #460]	; (8004734 <env+0x324>)
 8004568:	ee17 0a90 	vmov	r0, s15
 800456c:	f005 f800 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 8004570:	4870      	ldr	r0, [pc, #448]	; (8004734 <env+0x324>)
 8004572:	f7fd f956 	bl	8001822 <lcd_send_string>

	  lcd_put_cur(1, 3);
 8004576:	2103      	movs	r1, #3
 8004578:	2001      	movs	r0, #1
 800457a:	f7fd f8f6 	bl	800176a <lcd_put_cur>
	  itoa(10*S,val,10);
 800457e:	4b6e      	ldr	r3, [pc, #440]	; (8004738 <env+0x328>)
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800458c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004590:	220a      	movs	r2, #10
 8004592:	4968      	ldr	r1, [pc, #416]	; (8004734 <env+0x324>)
 8004594:	ee17 0a90 	vmov	r0, s15
 8004598:	f004 ffea 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 800459c:	4865      	ldr	r0, [pc, #404]	; (8004734 <env+0x324>)
 800459e:	f7fd f940 	bl	8001822 <lcd_send_string>
	  lcd_put_cur(1, 11);
 80045a2:	210b      	movs	r1, #11
 80045a4:	2001      	movs	r0, #1
 80045a6:	f7fd f8e0 	bl	800176a <lcd_put_cur>
	  itoa(R,val,10);
 80045aa:	4b58      	ldr	r3, [pc, #352]	; (800470c <env+0x2fc>)
 80045ac:	edd3 7a00 	vldr	s15, [r3]
 80045b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045b4:	220a      	movs	r2, #10
 80045b6:	495f      	ldr	r1, [pc, #380]	; (8004734 <env+0x324>)
 80045b8:	ee17 0a90 	vmov	r0, s15
 80045bc:	f004 ffd8 	bl	8009570 <itoa>
	  lcd_send_string(&val);
 80045c0:	485c      	ldr	r0, [pc, #368]	; (8004734 <env+0x324>)
 80045c2:	f7fd f92e 	bl	8001822 <lcd_send_string>
	  // Affichage des valeurs
	  A=32*A*4;
 80045c6:	4b4f      	ldr	r3, [pc, #316]	; (8004704 <env+0x2f4>)
 80045c8:	edd3 7a00 	vldr	s15, [r3]
 80045cc:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004710 <env+0x300>
 80045d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045d4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80045d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045dc:	4b49      	ldr	r3, [pc, #292]	; (8004704 <env+0x2f4>)
 80045de:	edc3 7a00 	vstr	s15, [r3]
	  D=32*D*4;
 80045e2:	4b49      	ldr	r3, [pc, #292]	; (8004708 <env+0x2f8>)
 80045e4:	edd3 7a00 	vldr	s15, [r3]
 80045e8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004710 <env+0x300>
 80045ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80045f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f8:	4b43      	ldr	r3, [pc, #268]	; (8004708 <env+0x2f8>)
 80045fa:	edc3 7a00 	vstr	s15, [r3]
	  R=32*R*4;
 80045fe:	4b43      	ldr	r3, [pc, #268]	; (800470c <env+0x2fc>)
 8004600:	edd3 7a00 	vldr	s15, [r3]
 8004604:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8004710 <env+0x300>
 8004608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800460c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004614:	4b3d      	ldr	r3, [pc, #244]	; (800470c <env+0x2fc>)
 8004616:	edc3 7a00 	vstr	s15, [r3]

	  // traitement ADSR
	  HAL_FLASH_Unlock();
 800461a:	f002 f99d 	bl	8006958 <HAL_FLASH_Unlock>
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 800461e:	4b47      	ldr	r3, [pc, #284]	; (800473c <env+0x32c>)
 8004620:	22f3      	movs	r2, #243	; 0xf3
 8004622:	60da      	str	r2, [r3, #12]
	  FLASH_Erase_Sector(FLASH_SECTOR_3, VOLTAGE_RANGE_3);
 8004624:	2102      	movs	r1, #2
 8004626:	2003      	movs	r0, #3
 8004628:	f002 fae8 	bl	8006bfc <FLASH_Erase_Sector>
	  // Tabs de Res
	  for (int i=0;i<A;i++)
 800462c:	2300      	movs	r3, #0
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	e04c      	b.n	80046cc <env+0x2bc>
	  {
		  coef=(i/A)*Resultat[i%256];
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800463c:	4b31      	ldr	r3, [pc, #196]	; (8004704 <env+0x2f4>)
 800463e:	edd3 7a00 	vldr	s15, [r3]
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	425a      	negs	r2, r3
 800464a:	b2db      	uxtb	r3, r3
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	bf58      	it	pl
 8004650:	4253      	negpl	r3, r2
 8004652:	4a3b      	ldr	r2, [pc, #236]	; (8004740 <env+0x330>)
 8004654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004664:	4b37      	ldr	r3, [pc, #220]	; (8004744 <env+0x334>)
 8004666:	edc3 7a00 	vstr	s15, [r3]
		  float testfloat=(1-(i/A))*2048;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004674:	4b23      	ldr	r3, [pc, #140]	; (8004704 <env+0x2f4>)
 8004676:	ed93 7a00 	vldr	s14, [r3]
 800467a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004686:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004748 <env+0x338>
 800468a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800468e:	edc7 7a00 	vstr	s15, [r7]
		  interm=coef+testfloat;
 8004692:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <env+0x334>)
 8004694:	ed93 7a00 	vldr	s14, [r3]
 8004698:	edd7 7a00 	vldr	s15, [r7]
 800469c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a4:	ee17 2a90 	vmov	r2, s15
 80046a8:	4b28      	ldr	r3, [pc, #160]	; (800474c <env+0x33c>)
 80046aa:	601a      	str	r2, [r3, #0]
		  //ResAtt[i]=coef+testfloat;
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ResAtt+i, interm);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4a27      	ldr	r2, [pc, #156]	; (8004750 <env+0x340>)
 80046b2:	4413      	add	r3, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	4b25      	ldr	r3, [pc, #148]	; (800474c <env+0x33c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	2002      	movs	r0, #2
 80046c2:	f002 f8f5 	bl	80068b0 <HAL_FLASH_Program>
	  for (int i=0;i<A;i++)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3301      	adds	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <env+0x2f4>)
 80046d8:	edd3 7a00 	vldr	s15, [r3]
 80046dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	d4a5      	bmi.n	8004632 <env+0x222>
	  }
	  for(int i=0;i<D;i++)
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	e099      	b.n	8004820 <env+0x410>
 80046ec:	200185b0 	.word	0x200185b0
 80046f0:	20018508 	.word	0x20018508
 80046f4:	200185f8 	.word	0x200185f8
 80046f8:	20000080 	.word	0x20000080
 80046fc:	20000084 	.word	0x20000084
 8004700:	20000088 	.word	0x20000088
 8004704:	20000094 	.word	0x20000094
 8004708:	20000098 	.word	0x20000098
 800470c:	2000009c 	.word	0x2000009c
 8004710:	42000000 	.word	0x42000000
 8004714:	20018c30 	.word	0x20018c30
 8004718:	20018c4c 	.word	0x20018c4c
 800471c:	20018c40 	.word	0x20018c40
 8004720:	080097a0 	.word	0x080097a0
 8004724:	080097a4 	.word	0x080097a4
 8004728:	080097a8 	.word	0x080097a8
 800472c:	080097ac 	.word	0x080097ac
 8004730:	080097b4 	.word	0x080097b4
 8004734:	20018c34 	.word	0x20018c34
 8004738:	200000a0 	.word	0x200000a0
 800473c:	40023c00 	.word	0x40023c00
 8004740:	20018830 	.word	0x20018830
 8004744:	200184e0 	.word	0x200184e0
 8004748:	45000000 	.word	0x45000000
 800474c:	2001882c 	.word	0x2001882c
 8004750:	200000e0 	.word	0x200000e0
	  {
		  coef=((((S-1)/D)*i)+1)*Resultat[(i+durA)%256];
 8004754:	4bbe      	ldr	r3, [pc, #760]	; (8004a50 <env+0x640>)
 8004756:	edd3 7a00 	vldr	s15, [r3]
 800475a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800475e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004762:	4bbc      	ldr	r3, [pc, #752]	; (8004a54 <env+0x644>)
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800477e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4bb4      	ldr	r3, [pc, #720]	; (8004a58 <env+0x648>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4413      	add	r3, r2
 800478a:	b2db      	uxtb	r3, r3
 800478c:	4ab3      	ldr	r2, [pc, #716]	; (8004a5c <env+0x64c>)
 800478e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479e:	4bb0      	ldr	r3, [pc, #704]	; (8004a60 <env+0x650>)
 80047a0:	edc3 7a00 	vstr	s15, [r3]
		  float testfloat=(1-((((S-1)/D)*i)+1))*2048;
 80047a4:	4baa      	ldr	r3, [pc, #680]	; (8004a50 <env+0x640>)
 80047a6:	edd3 7a00 	vldr	s15, [r3]
 80047aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80047b2:	4ba8      	ldr	r3, [pc, #672]	; (8004a54 <env+0x644>)
 80047b4:	edd3 7a00 	vldr	s15, [r3]
 80047b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047da:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8004a64 <env+0x654>
 80047de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047e2:	edc7 7a01 	vstr	s15, [r7, #4]
		  //ResDec[i]=coef+testfloat;
		  interm=coef+testfloat;
 80047e6:	4b9e      	ldr	r3, [pc, #632]	; (8004a60 <env+0x650>)
 80047e8:	ed93 7a00 	vldr	s14, [r3]
 80047ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80047f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047f8:	ee17 2a90 	vmov	r2, s15
 80047fc:	4b9a      	ldr	r3, [pc, #616]	; (8004a68 <env+0x658>)
 80047fe:	601a      	str	r2, [r3, #0]
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ResDec+i, interm);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4a99      	ldr	r2, [pc, #612]	; (8004a6c <env+0x65c>)
 8004806:	4413      	add	r3, r2
 8004808:	4619      	mov	r1, r3
 800480a:	4b97      	ldr	r3, [pc, #604]	; (8004a68 <env+0x658>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	2002      	movs	r0, #2
 8004816:	f002 f84b 	bl	80068b0 <HAL_FLASH_Program>
	  for(int i=0;i<D;i++)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	3301      	adds	r3, #1
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800482a:	4b8a      	ldr	r3, [pc, #552]	; (8004a54 <env+0x644>)
 800482c:	edd3 7a00 	vldr	s15, [r3]
 8004830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004838:	d48c      	bmi.n	8004754 <env+0x344>
	  }
	  ;
	  for(int i=0;i<256;i++)
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e040      	b.n	80048c2 <env+0x4b2>
	  {
		  coef=S*Resultat[(i+durA+durD)%256];
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4b85      	ldr	r3, [pc, #532]	; (8004a58 <env+0x648>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	441a      	add	r2, r3
 8004848:	4b89      	ldr	r3, [pc, #548]	; (8004a70 <env+0x660>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4413      	add	r3, r2
 800484e:	b2db      	uxtb	r3, r3
 8004850:	4a82      	ldr	r2, [pc, #520]	; (8004a5c <env+0x64c>)
 8004852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800485e:	4b7c      	ldr	r3, [pc, #496]	; (8004a50 <env+0x640>)
 8004860:	edd3 7a00 	vldr	s15, [r3]
 8004864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004868:	4b7d      	ldr	r3, [pc, #500]	; (8004a60 <env+0x650>)
 800486a:	edc3 7a00 	vstr	s15, [r3]
		  float testfloat=(1-S)*2048;
 800486e:	4b78      	ldr	r3, [pc, #480]	; (8004a50 <env+0x640>)
 8004870:	edd3 7a00 	vldr	s15, [r3]
 8004874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800487c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004a64 <env+0x654>
 8004880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004884:	edc7 7a02 	vstr	s15, [r7, #8]
		  //ResSus[i]=coef+testfloat;
		  interm=coef+testfloat;
 8004888:	4b75      	ldr	r3, [pc, #468]	; (8004a60 <env+0x650>)
 800488a:	ed93 7a00 	vldr	s14, [r3]
 800488e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489a:	ee17 2a90 	vmov	r2, s15
 800489e:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <env+0x658>)
 80048a0:	601a      	str	r2, [r3, #0]
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ResSus+i, interm);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4a73      	ldr	r2, [pc, #460]	; (8004a74 <env+0x664>)
 80048a8:	4413      	add	r3, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	4b6e      	ldr	r3, [pc, #440]	; (8004a68 <env+0x658>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	2002      	movs	r0, #2
 80048b8:	f001 fffa 	bl	80068b0 <HAL_FLASH_Program>
	  for(int i=0;i<256;i++)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	3301      	adds	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2bff      	cmp	r3, #255	; 0xff
 80048c6:	ddbb      	ble.n	8004840 <env+0x430>
	  }
	  for(int i=0;i<R;i++)
 80048c8:	2300      	movs	r3, #0
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	e066      	b.n	800499c <env+0x58c>
	  {
		  coef=((-S/R)*i+S)*Resultat[(i+durA+durD+256)%256];
 80048ce:	4b60      	ldr	r3, [pc, #384]	; (8004a50 <env+0x640>)
 80048d0:	edd3 7a00 	vldr	s15, [r3]
 80048d4:	eef1 6a67 	vneg.f32	s13, s15
 80048d8:	4b67      	ldr	r3, [pc, #412]	; (8004a78 <env+0x668>)
 80048da:	edd3 7a00 	vldr	s15, [r3]
 80048de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	ee07 3a90 	vmov	s15, r3
 80048e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048f0:	4b57      	ldr	r3, [pc, #348]	; (8004a50 <env+0x640>)
 80048f2:	edd3 7a00 	vldr	s15, [r3]
 80048f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4b56      	ldr	r3, [pc, #344]	; (8004a58 <env+0x648>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	441a      	add	r2, r3
 8004902:	4b5b      	ldr	r3, [pc, #364]	; (8004a70 <env+0x660>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4413      	add	r3, r2
 8004908:	b2db      	uxtb	r3, r3
 800490a:	4a54      	ldr	r2, [pc, #336]	; (8004a5c <env+0x64c>)
 800490c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491c:	4b50      	ldr	r3, [pc, #320]	; (8004a60 <env+0x650>)
 800491e:	edc3 7a00 	vstr	s15, [r3]
		  float testfloat=(1-((-S/R)*i+S))*2048;
 8004922:	4b4b      	ldr	r3, [pc, #300]	; (8004a50 <env+0x640>)
 8004924:	edd3 7a00 	vldr	s15, [r3]
 8004928:	eef1 6a67 	vneg.f32	s13, s15
 800492c:	4b52      	ldr	r3, [pc, #328]	; (8004a78 <env+0x668>)
 800492e:	edd3 7a00 	vldr	s15, [r3]
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004944:	4b42      	ldr	r3, [pc, #264]	; (8004a50 <env+0x640>)
 8004946:	edd3 7a00 	vldr	s15, [r3]
 800494a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800494e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004956:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004a64 <env+0x654>
 800495a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800495e:	edc7 7a03 	vstr	s15, [r7, #12]
		  //ResRel[i]=coef+testfloat;
		  interm=coef+testfloat;
 8004962:	4b3f      	ldr	r3, [pc, #252]	; (8004a60 <env+0x650>)
 8004964:	ed93 7a00 	vldr	s14, [r3]
 8004968:	edd7 7a03 	vldr	s15, [r7, #12]
 800496c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004974:	ee17 2a90 	vmov	r2, s15
 8004978:	4b3b      	ldr	r3, [pc, #236]	; (8004a68 <env+0x658>)
 800497a:	601a      	str	r2, [r3, #0]
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ResRel+i, interm);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4a3e      	ldr	r2, [pc, #248]	; (8004a7c <env+0x66c>)
 8004982:	4413      	add	r3, r2
 8004984:	4619      	mov	r1, r3
 8004986:	4b38      	ldr	r3, [pc, #224]	; (8004a68 <env+0x658>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	2002      	movs	r0, #2
 8004992:	f001 ff8d 	bl	80068b0 <HAL_FLASH_Program>
	  for(int i=0;i<R;i++)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	3301      	adds	r3, #1
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049a6:	4b34      	ldr	r3, [pc, #208]	; (8004a78 <env+0x668>)
 80049a8:	edd3 7a00 	vldr	s15, [r3]
 80049ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b4:	d48b      	bmi.n	80048ce <env+0x4be>
	  }

	  //Commandes pour revenir dans le menu ;
	  //Boutton gauche et droite pour faire varier Sustain
		while((HAL_GPIO_ReadPin(BOui_GPIO_Port,BOui_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BDroite_GPIO_Port,BDroite_Pin)==GPIO_PIN_RESET)&&(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_RESET)){}
 80049b6:	bf00      	nop
 80049b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049bc:	4830      	ldr	r0, [pc, #192]	; (8004a80 <env+0x670>)
 80049be:	f002 fb01 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d117      	bne.n	80049f8 <env+0x5e8>
 80049c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049cc:	482c      	ldr	r0, [pc, #176]	; (8004a80 <env+0x670>)
 80049ce:	f002 faf9 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10f      	bne.n	80049f8 <env+0x5e8>
 80049d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049dc:	4828      	ldr	r0, [pc, #160]	; (8004a80 <env+0x670>)
 80049de:	f002 faf1 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d107      	bne.n	80049f8 <env+0x5e8>
 80049e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049ec:	4824      	ldr	r0, [pc, #144]	; (8004a80 <env+0x670>)
 80049ee:	f002 fae9 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0df      	beq.n	80049b8 <env+0x5a8>
		if(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET)
 80049f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049fc:	4820      	ldr	r0, [pc, #128]	; (8004a80 <env+0x670>)
 80049fe:	f002 fae1 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10b      	bne.n	8004a20 <env+0x610>
		{
			while(HAL_GPIO_ReadPin(BNon_GPIO_Port,BNon_Pin)==GPIO_PIN_SET){}
 8004a08:	bf00      	nop
 8004a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a0e:	481c      	ldr	r0, [pc, #112]	; (8004a80 <env+0x670>)
 8004a10:	f002 fad8 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d0f7      	beq.n	8004a0a <env+0x5fa>
			synth=0;
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <env+0x674>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_SET)
 8004a20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a24:	4816      	ldr	r0, [pc, #88]	; (8004a80 <env+0x670>)
 8004a26:	f002 facd 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d142      	bne.n	8004ab6 <env+0x6a6>
			  {
				while((BDroite_GPIO_Port, BDroite_Pin)==GPIO_PIN_SET){}
 8004a30:	bf00      	nop
					if(S>=1){S=1;}
 8004a32:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <env+0x640>)
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a44:	db20      	blt.n	8004a88 <env+0x678>
 8004a46:	4b02      	ldr	r3, [pc, #8]	; (8004a50 <env+0x640>)
 8004a48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e032      	b.n	8004ab6 <env+0x6a6>
 8004a50:	200000a0 	.word	0x200000a0
 8004a54:	20000098 	.word	0x20000098
 8004a58:	20018c30 	.word	0x20018c30
 8004a5c:	20018830 	.word	0x20018830
 8004a60:	200184e0 	.word	0x200184e0
 8004a64:	45000000 	.word	0x45000000
 8004a68:	2001882c 	.word	0x2001882c
 8004a6c:	200080e0 	.word	0x200080e0
 8004a70:	20018c4c 	.word	0x20018c4c
 8004a74:	200100e0 	.word	0x200100e0
 8004a78:	2000009c 	.word	0x2000009c
 8004a7c:	200104e0 	.word	0x200104e0
 8004a80:	40021000 	.word	0x40021000
 8004a84:	200184f5 	.word	0x200184f5
					else
					{
						Spred=S;
 8004a88:	4b27      	ldr	r3, [pc, #156]	; (8004b28 <env+0x718>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <env+0x71c>)
 8004a8e:	6013      	str	r3, [r2, #0]
						S=S+0.1;
 8004a90:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <env+0x718>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fb fcfb 	bl	8000490 <__aeabi_f2d>
 8004a9a:	a321      	add	r3, pc, #132	; (adr r3, 8004b20 <env+0x710>)
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f7fb fb98 	bl	80001d4 <__adddf3>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f7fc f80a 	bl	8000ac4 <__aeabi_d2f>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <env+0x718>)
 8004ab4:	6013      	str	r3, [r2, #0]
					}
			  }
			  if(HAL_GPIO_ReadPin(BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET)
 8004ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004aba:	481d      	ldr	r0, [pc, #116]	; (8004b30 <env+0x720>)
 8004abc:	f002 fa82 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d128      	bne.n	8004b18 <env+0x708>
			  {
				while((BGauche_GPIO_Port,BGauche_Pin)==GPIO_PIN_SET){}
 8004ac6:	bf00      	nop
					if(S<=0.1){S=0.1;}
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <env+0x718>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fb fcdf 	bl	8000490 <__aeabi_f2d>
 8004ad2:	a313      	add	r3, pc, #76	; (adr r3, 8004b20 <env+0x710>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb ffae 	bl	8000a38 <__aeabi_dcmple>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <env+0x6da>
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <env+0x718>)
 8004ae4:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <env+0x724>)
 8004ae6:	601a      	str	r2, [r3, #0]
						S=S-0.1;
					}

			  }

}
 8004ae8:	e016      	b.n	8004b18 <env+0x708>
						Spred=S;
 8004aea:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <env+0x718>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a0f      	ldr	r2, [pc, #60]	; (8004b2c <env+0x71c>)
 8004af0:	6013      	str	r3, [r2, #0]
						S=S-0.1;
 8004af2:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <env+0x718>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fb fcca 	bl	8000490 <__aeabi_f2d>
 8004afc:	a308      	add	r3, pc, #32	; (adr r3, 8004b20 <env+0x710>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f7fb fb65 	bl	80001d0 <__aeabi_dsub>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f7fb ffd9 	bl	8000ac4 <__aeabi_d2f>
 8004b12:	4603      	mov	r3, r0
 8004b14:	4a04      	ldr	r2, [pc, #16]	; (8004b28 <env+0x718>)
 8004b16:	6013      	str	r3, [r2, #0]
}
 8004b18:	bf00      	nop
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	9999999a 	.word	0x9999999a
 8004b24:	3fb99999 	.word	0x3fb99999
 8004b28:	200000a0 	.word	0x200000a0
 8004b2c:	20018500 	.word	0x20018500
 8004b30:	40021000 	.word	0x40021000
 8004b34:	3dcccccd 	.word	0x3dcccccd

08004b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HAL_MspInit+0x4c>)
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	4a0f      	ldr	r2, [pc, #60]	; (8004b94 <HAL_MspInit+0x4c>)
 8004b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <HAL_MspInit+0x4c>)
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b66:	607b      	str	r3, [r7, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	603b      	str	r3, [r7, #0]
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_MspInit+0x4c>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <HAL_MspInit+0x4c>)
 8004b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b78:	6413      	str	r3, [r2, #64]	; 0x40
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <HAL_MspInit+0x4c>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004b86:	2007      	movs	r0, #7
 8004b88:	f001 f82c 	bl	8005be4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40023800 	.word	0x40023800

08004b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b9c:	bf00      	nop
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004baa:	e7fe      	b.n	8004baa <HardFault_Handler+0x4>

08004bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bb0:	e7fe      	b.n	8004bb0 <MemManage_Handler+0x4>

08004bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bb6:	e7fe      	b.n	8004bb6 <BusFault_Handler+0x4>

08004bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bbc:	e7fe      	b.n	8004bbc <UsageFault_Handler+0x4>

08004bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bc2:	bf00      	nop
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bde:	bf00      	nop
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bec:	f000 faa8 	bl	8005140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bf0:	bf00      	nop
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004bf8:	4802      	ldr	r0, [pc, #8]	; (8004c04 <DMA1_Stream4_IRQHandler+0x10>)
 8004bfa:	f001 fbef 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20018d14 	.word	0x20018d14

08004c08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8004c0c:	4802      	ldr	r0, [pc, #8]	; (8004c18 <DMA1_Stream5_IRQHandler+0x10>)
 8004c0e:	f001 fbe5 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20018700 	.word	0x20018700

08004c1c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004c20:	4802      	ldr	r0, [pc, #8]	; (8004c2c <UART4_IRQHandler+0x10>)
 8004c22:	f003 fe6f 	bl	8008904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20018cd4 	.word	0x20018cd4

08004c30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c34:	4802      	ldr	r0, [pc, #8]	; (8004c40 <DMA2_Stream0_IRQHandler+0x10>)
 8004c36:	f001 fbd1 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20018640 	.word	0x20018640

08004c44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004c48:	4802      	ldr	r0, [pc, #8]	; (8004c54 <DMA2_Stream1_IRQHandler+0x10>)
 8004c4a:	f001 fbc7 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004c4e:	bf00      	nop
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20018550 	.word	0x20018550

08004c58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004c5c:	4802      	ldr	r0, [pc, #8]	; (8004c68 <DMA2_Stream2_IRQHandler+0x10>)
 8004c5e:	f001 fbbd 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	200186a0 	.word	0x200186a0

08004c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c70:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <SystemInit+0x28>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <SystemInit+0x28>)
 8004c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <SystemInit+0x28>)
 8004c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c86:	609a      	str	r2, [r3, #8]
#endif
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c9e:	f107 0308 	add.w	r3, r7, #8
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	605a      	str	r2, [r3, #4]
 8004ca8:	609a      	str	r2, [r3, #8]
 8004caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cac:	463b      	mov	r3, r7
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8004cb4:	4b1d      	ldr	r3, [pc, #116]	; (8004d2c <MX_TIM2_Init+0x94>)
 8004cb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <MX_TIM2_Init+0x94>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cc2:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <MX_TIM2_Init+0x94>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1562;
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <MX_TIM2_Init+0x94>)
 8004cca:	f240 621a 	movw	r2, #1562	; 0x61a
 8004cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cd0:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <MX_TIM2_Init+0x94>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <MX_TIM2_Init+0x94>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004cdc:	4813      	ldr	r0, [pc, #76]	; (8004d2c <MX_TIM2_Init+0x94>)
 8004cde:	f003 fa5b 	bl	8008198 <HAL_TIM_Base_Init>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004ce8:	f7ff ff26 	bl	8004b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004cf2:	f107 0308 	add.w	r3, r7, #8
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	480c      	ldr	r0, [pc, #48]	; (8004d2c <MX_TIM2_Init+0x94>)
 8004cfa:	f003 faf7 	bl	80082ec <HAL_TIM_ConfigClockSource>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004d04:	f7ff ff18 	bl	8004b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d08:	2320      	movs	r3, #32
 8004d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d10:	463b      	mov	r3, r7
 8004d12:	4619      	mov	r1, r3
 8004d14:	4805      	ldr	r0, [pc, #20]	; (8004d2c <MX_TIM2_Init+0x94>)
 8004d16:	f003 fce7 	bl	80086e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004d20:	f7ff ff0a 	bl	8004b38 <Error_Handler>
  }

}
 8004d24:	bf00      	nop
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20018c94 	.word	0x20018c94

08004d30 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d36:	463b      	mov	r3, r7
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8004d3e:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <MX_TIM6_Init+0x60>)
 8004d40:	4a14      	ldr	r2, [pc, #80]	; (8004d94 <MX_TIM6_Init+0x64>)
 8004d42:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8004d44:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <MX_TIM6_Init+0x60>)
 8004d46:	2207      	movs	r2, #7
 8004d48:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <MX_TIM6_Init+0x60>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 204-1;
 8004d50:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <MX_TIM6_Init+0x60>)
 8004d52:	22cb      	movs	r2, #203	; 0xcb
 8004d54:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d56:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <MX_TIM6_Init+0x60>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004d5c:	480c      	ldr	r0, [pc, #48]	; (8004d90 <MX_TIM6_Init+0x60>)
 8004d5e:	f003 fa1b 	bl	8008198 <HAL_TIM_Base_Init>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8004d68:	f7ff fee6 	bl	8004b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004d74:	463b      	mov	r3, r7
 8004d76:	4619      	mov	r1, r3
 8004d78:	4805      	ldr	r0, [pc, #20]	; (8004d90 <MX_TIM6_Init+0x60>)
 8004d7a:	f003 fcb5 	bl	80086e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8004d84:	f7ff fed8 	bl	8004b38 <Error_Handler>
  }

}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20018c54 	.word	0x20018c54
 8004d94:	40001000 	.word	0x40001000

08004d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d10e      	bne.n	8004dc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <HAL_TIM_Base_MspInit+0x64>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	4a12      	ldr	r2, [pc, #72]	; (8004dfc <HAL_TIM_Base_MspInit+0x64>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <HAL_TIM_Base_MspInit+0x64>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004dc6:	e012      	b.n	8004dee <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0c      	ldr	r2, [pc, #48]	; (8004e00 <HAL_TIM_Base_MspInit+0x68>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10d      	bne.n	8004dee <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <HAL_TIM_Base_MspInit+0x64>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	4a08      	ldr	r2, [pc, #32]	; (8004dfc <HAL_TIM_Base_MspInit+0x64>)
 8004ddc:	f043 0310 	orr.w	r3, r3, #16
 8004de0:	6413      	str	r3, [r2, #64]	; 0x40
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_TIM_Base_MspInit+0x64>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	68bb      	ldr	r3, [r7, #8]
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40001000 	.word	0x40001000

08004e04 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e14:	d106      	bne.n	8004e24 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <HAL_TIM_Base_MspDeInit+0x44>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	4a0b      	ldr	r2, [pc, #44]	; (8004e48 <HAL_TIM_Base_MspDeInit+0x44>)
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RCC_TIM6_CLK_DISABLE();
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }
}
 8004e22:	e00a      	b.n	8004e3a <HAL_TIM_Base_MspDeInit+0x36>
  else if(tim_baseHandle->Instance==TIM6)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <HAL_TIM_Base_MspDeInit+0x48>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d105      	bne.n	8004e3a <HAL_TIM_Base_MspDeInit+0x36>
    __HAL_RCC_TIM6_CLK_DISABLE();
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <HAL_TIM_Base_MspDeInit+0x44>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	4a05      	ldr	r2, [pc, #20]	; (8004e48 <HAL_TIM_Base_MspDeInit+0x44>)
 8004e34:	f023 0310 	bic.w	r3, r3, #16
 8004e38:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40001000 	.word	0x40001000

08004e50 <TIM2_Init>:

/* USER CODE BEGIN 1 */
void TIM2_Init(int i){
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e58:	f107 0310 	add.w	r3, r7, #16
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e66:	f107 0308 	add.w	r3, r7, #8
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	605a      	str	r2, [r3, #4]

	  htim2.Instance = TIM2;
 8004e70:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <TIM2_Init+0x98>)
 8004e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e76:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 0;
 8004e78:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <TIM2_Init+0x98>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <TIM2_Init+0x98>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = i;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <TIM2_Init+0x98>)
 8004e88:	60d3      	str	r3, [r2, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e8a:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <TIM2_Init+0x98>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	611a      	str	r2, [r3, #16]

	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e90:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <TIM2_Init+0x98>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e96:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <TIM2_Init+0x98>)
 8004e98:	f003 f97e 	bl	8008198 <HAL_TIM_Base_Init>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <TIM2_Init+0x56>
	  {
	    Error_Handler();
 8004ea2:	f7ff fe49 	bl	8004b38 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eaa:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004eac:	f107 0310 	add.w	r3, r7, #16
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <TIM2_Init+0x98>)
 8004eb4:	f003 fa1a 	bl	80082ec <HAL_TIM_ConfigClockSource>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <TIM2_Init+0x72>
	  {
	    Error_Handler();
 8004ebe:	f7ff fe3b 	bl	8004b38 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004eca:	f107 0308 	add.w	r3, r7, #8
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4805      	ldr	r0, [pc, #20]	; (8004ee8 <TIM2_Init+0x98>)
 8004ed2:	f003 fc09 	bl	80086e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <TIM2_Init+0x90>
	  {
	    Error_Handler();
 8004edc:	f7ff fe2c 	bl	8004b38 <Error_Handler>
	  }
}
 8004ee0:	bf00      	nop
 8004ee2:	3720      	adds	r7, #32
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20018c94 	.word	0x20018c94

08004eec <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8004ef0:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <MX_UART4_Init+0x4c>)
 8004ef2:	4a12      	ldr	r2, [pc, #72]	; (8004f3c <MX_UART4_Init+0x50>)
 8004ef4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <MX_UART4_Init+0x4c>)
 8004ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004efc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004efe:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <MX_UART4_Init+0x4c>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <MX_UART4_Init+0x4c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <MX_UART4_Init+0x4c>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <MX_UART4_Init+0x4c>)
 8004f12:	2208      	movs	r2, #8
 8004f14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f16:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <MX_UART4_Init+0x4c>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <MX_UART4_Init+0x4c>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004f22:	4805      	ldr	r0, [pc, #20]	; (8004f38 <MX_UART4_Init+0x4c>)
 8004f24:	f003 fc5c 	bl	80087e0 <HAL_UART_Init>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004f2e:	f7ff fe03 	bl	8004b38 <Error_Handler>
  }

}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20018cd4 	.word	0x20018cd4
 8004f3c:	40004c00 	.word	0x40004c00

08004f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	; 0x28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f48:	f107 0314 	add.w	r3, r7, #20
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	609a      	str	r2, [r3, #8]
 8004f54:	60da      	str	r2, [r3, #12]
 8004f56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a35      	ldr	r2, [pc, #212]	; (8005034 <HAL_UART_MspInit+0xf4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d164      	bne.n	800502c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	4b34      	ldr	r3, [pc, #208]	; (8005038 <HAL_UART_MspInit+0xf8>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	4a33      	ldr	r2, [pc, #204]	; (8005038 <HAL_UART_MspInit+0xf8>)
 8004f6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f70:	6413      	str	r3, [r2, #64]	; 0x40
 8004f72:	4b31      	ldr	r3, [pc, #196]	; (8005038 <HAL_UART_MspInit+0xf8>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	4b2d      	ldr	r3, [pc, #180]	; (8005038 <HAL_UART_MspInit+0xf8>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	4a2c      	ldr	r2, [pc, #176]	; (8005038 <HAL_UART_MspInit+0xf8>)
 8004f88:	f043 0304 	orr.w	r3, r3, #4
 8004f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8e:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <HAL_UART_MspInit+0xf8>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004fac:	2308      	movs	r3, #8
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4821      	ldr	r0, [pc, #132]	; (800503c <HAL_UART_MspInit+0xfc>)
 8004fb8:	f001 fe68 	bl	8006c8c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004fbc:	4b20      	ldr	r3, [pc, #128]	; (8005040 <HAL_UART_MspInit+0x100>)
 8004fbe:	4a21      	ldr	r2, [pc, #132]	; (8005044 <HAL_UART_MspInit+0x104>)
 8004fc0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8004fc2:	4b1f      	ldr	r3, [pc, #124]	; (8005040 <HAL_UART_MspInit+0x100>)
 8004fc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fc8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fca:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <HAL_UART_MspInit+0x100>)
 8004fcc:	2240      	movs	r2, #64	; 0x40
 8004fce:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	; (8005040 <HAL_UART_MspInit+0x100>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fd6:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <HAL_UART_MspInit+0x100>)
 8004fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fdc:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fde:	4b18      	ldr	r3, [pc, #96]	; (8005040 <HAL_UART_MspInit+0x100>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fe4:	4b16      	ldr	r3, [pc, #88]	; (8005040 <HAL_UART_MspInit+0x100>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_CIRCULAR;
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <HAL_UART_MspInit+0x100>)
 8004fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ff0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <HAL_UART_MspInit+0x100>)
 8004ff4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004ff8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ffa:	4b11      	ldr	r3, [pc, #68]	; (8005040 <HAL_UART_MspInit+0x100>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005000:	480f      	ldr	r0, [pc, #60]	; (8005040 <HAL_UART_MspInit+0x100>)
 8005002:	f001 f853 	bl	80060ac <HAL_DMA_Init>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800500c:	f7ff fd94 	bl	8004b38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a0b      	ldr	r2, [pc, #44]	; (8005040 <HAL_UART_MspInit+0x100>)
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
 8005016:	4a0a      	ldr	r2, [pc, #40]	; (8005040 <HAL_UART_MspInit+0x100>)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800501c:	2200      	movs	r2, #0
 800501e:	2100      	movs	r1, #0
 8005020:	2034      	movs	r0, #52	; 0x34
 8005022:	f000 fdea 	bl	8005bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005026:	2034      	movs	r0, #52	; 0x34
 8005028:	f000 fe03 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800502c:	bf00      	nop
 800502e:	3728      	adds	r7, #40	; 0x28
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40004c00 	.word	0x40004c00
 8005038:	40023800 	.word	0x40023800
 800503c:	40020800 	.word	0x40020800
 8005040:	20018d14 	.word	0x20018d14
 8005044:	40026070 	.word	0x40026070

08005048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005080 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800504c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800504e:	e003      	b.n	8005058 <LoopCopyDataInit>

08005050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005050:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005056:	3104      	adds	r1, #4

08005058 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005058:	480b      	ldr	r0, [pc, #44]	; (8005088 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800505c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800505e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005060:	d3f6      	bcc.n	8005050 <CopyDataInit>
  ldr  r2, =_sbss
 8005062:	4a0b      	ldr	r2, [pc, #44]	; (8005090 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005064:	e002      	b.n	800506c <LoopFillZerobss>

08005066 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005066:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005068:	f842 3b04 	str.w	r3, [r2], #4

0800506c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800506e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005070:	d3f9      	bcc.n	8005066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005072:	f7ff fdfb 	bl	8004c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005076:	f004 fa3f 	bl	80094f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800507a:	f7fc fc5d 	bl	8001938 <main>
  bx  lr    
 800507e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005080:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005084:	0800ac10 	.word	0x0800ac10
  ldr  r0, =_sdata
 8005088:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800508c:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8005090:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8005094:	20018d98 	.word	0x20018d98

08005098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005098:	e7fe      	b.n	8005098 <ADC_IRQHandler>
	...

0800509c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050a0:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <HAL_Init+0x40>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <HAL_Init+0x40>)
 80050a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <HAL_Init+0x40>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <HAL_Init+0x40>)
 80050b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050b8:	4b08      	ldr	r3, [pc, #32]	; (80050dc <HAL_Init+0x40>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a07      	ldr	r2, [pc, #28]	; (80050dc <HAL_Init+0x40>)
 80050be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050c4:	2003      	movs	r0, #3
 80050c6:	f000 fd8d 	bl	8005be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050ca:	2000      	movs	r0, #0
 80050cc:	f000 f808 	bl	80050e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050d0:	f7ff fd3a 	bl	8004b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40023c00 	.word	0x40023c00

080050e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050e8:	4b12      	ldr	r3, [pc, #72]	; (8005134 <HAL_InitTick+0x54>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_InitTick+0x58>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	4619      	mov	r1, r3
 80050f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fda5 	bl	8005c4e <HAL_SYSTICK_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e00e      	b.n	800512c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b0f      	cmp	r3, #15
 8005112:	d80a      	bhi.n	800512a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005114:	2200      	movs	r2, #0
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	f000 fd6d 	bl	8005bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005120:	4a06      	ldr	r2, [pc, #24]	; (800513c <HAL_InitTick+0x5c>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	e000      	b.n	800512c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	200000a4 	.word	0x200000a4
 8005138:	200000ac 	.word	0x200000ac
 800513c:	200000a8 	.word	0x200000a8

08005140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <HAL_IncTick+0x20>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <HAL_IncTick+0x24>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4413      	add	r3, r2
 8005150:	4a04      	ldr	r2, [pc, #16]	; (8005164 <HAL_IncTick+0x24>)
 8005152:	6013      	str	r3, [r2, #0]
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	200000ac 	.word	0x200000ac
 8005164:	20018d74 	.word	0x20018d74

08005168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return uwTick;
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_GetTick+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20018d74 	.word	0x20018d74

08005180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7ff ffee 	bl	8005168 <HAL_GetTick>
 800518c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d005      	beq.n	80051a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <HAL_Delay+0x44>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051a6:	bf00      	nop
 80051a8:	f7ff ffde 	bl	8005168 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d8f7      	bhi.n	80051a8 <HAL_Delay+0x28>
  {
  }
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200000ac 	.word	0x200000ac

080051c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e033      	b.n	8005246 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fb ff34 	bl	8001054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	d118      	bne.n	8005238 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800520e:	f023 0302 	bic.w	r3, r3, #2
 8005212:	f043 0202 	orr.w	r2, r3, #2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa94 	bl	8005748 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	f043 0201 	orr.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40
 8005236:	e001      	b.n	800523c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_ADC_Start_DMA+0x1e>
 800526a:	2302      	movs	r3, #2
 800526c:	e0cc      	b.n	8005408 <HAL_ADC_Start_DMA+0x1b8>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d018      	beq.n	80052b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005294:	4b5e      	ldr	r3, [pc, #376]	; (8005410 <HAL_ADC_Start_DMA+0x1c0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a5e      	ldr	r2, [pc, #376]	; (8005414 <HAL_ADC_Start_DMA+0x1c4>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	0c9a      	lsrs	r2, r3, #18
 80052a0:	4613      	mov	r3, r2
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	4413      	add	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052a8:	e002      	b.n	80052b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f9      	bne.n	80052aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	f040 80a0 	bne.w	8005406 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80052ce:	f023 0301 	bic.w	r3, r3, #1
 80052d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005304:	d106      	bne.n	8005314 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	f023 0206 	bic.w	r2, r3, #6
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
 8005312:	e002      	b.n	800531a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005322:	4b3d      	ldr	r3, [pc, #244]	; (8005418 <HAL_ADC_Start_DMA+0x1c8>)
 8005324:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	4a3c      	ldr	r2, [pc, #240]	; (800541c <HAL_ADC_Start_DMA+0x1cc>)
 800532c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	4a3b      	ldr	r2, [pc, #236]	; (8005420 <HAL_ADC_Start_DMA+0x1d0>)
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	4a3a      	ldr	r2, [pc, #232]	; (8005424 <HAL_ADC_Start_DMA+0x1d4>)
 800533c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005346:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005356:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005366:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	334c      	adds	r3, #76	; 0x4c
 8005372:	4619      	mov	r1, r3
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f000 ff46 	bl	8006208 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2b00      	cmp	r3, #0
 8005386:	d12a      	bne.n	80053de <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a26      	ldr	r2, [pc, #152]	; (8005428 <HAL_ADC_Start_DMA+0x1d8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d015      	beq.n	80053be <HAL_ADC_Start_DMA+0x16e>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a25      	ldr	r2, [pc, #148]	; (800542c <HAL_ADC_Start_DMA+0x1dc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d105      	bne.n	80053a8 <HAL_ADC_Start_DMA+0x158>
 800539c:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <HAL_ADC_Start_DMA+0x1c8>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a20      	ldr	r2, [pc, #128]	; (8005430 <HAL_ADC_Start_DMA+0x1e0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d129      	bne.n	8005406 <HAL_ADC_Start_DMA+0x1b6>
 80053b2:	4b19      	ldr	r3, [pc, #100]	; (8005418 <HAL_ADC_Start_DMA+0x1c8>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d123      	bne.n	8005406 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d11c      	bne.n	8005406 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	e013      	b.n	8005406 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a11      	ldr	r2, [pc, #68]	; (8005428 <HAL_ADC_Start_DMA+0x1d8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10e      	bne.n	8005406 <HAL_ADC_Start_DMA+0x1b6>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d107      	bne.n	8005406 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005404:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	200000a4 	.word	0x200000a4
 8005414:	431bde83 	.word	0x431bde83
 8005418:	40012300 	.word	0x40012300
 800541c:	08005941 	.word	0x08005941
 8005420:	080059fb 	.word	0x080059fb
 8005424:	08005a17 	.word	0x08005a17
 8005428:	40012000 	.word	0x40012000
 800542c:	40012100 	.word	0x40012100
 8005430:	40012200 	.word	0x40012200

08005434 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_ADC_Stop_DMA+0x1a>
 800544a:	2302      	movs	r3, #2
 800544c:	e038      	b.n	80054c0 <HAL_ADC_Stop_DMA+0x8c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d120      	bne.n	80054b6 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005482:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	4618      	mov	r0, r3
 800548a:	f000 ff15 	bl	80062b8 <HAL_DMA_Abort>
 800548e:	4603      	mov	r3, r0
 8005490:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80054a0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	f043 0201 	orr.w	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_ADC_ConfigChannel+0x1c>
 800551c:	2302      	movs	r3, #2
 800551e:	e105      	b.n	800572c <HAL_ADC_ConfigChannel+0x228>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b09      	cmp	r3, #9
 800552e:	d925      	bls.n	800557c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68d9      	ldr	r1, [r3, #12]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	3b1e      	subs	r3, #30
 8005546:	2207      	movs	r2, #7
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	43da      	mvns	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	400a      	ands	r2, r1
 8005554:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68d9      	ldr	r1, [r3, #12]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	4618      	mov	r0, r3
 8005568:	4603      	mov	r3, r0
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4403      	add	r3, r0
 800556e:	3b1e      	subs	r3, #30
 8005570:	409a      	lsls	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	60da      	str	r2, [r3, #12]
 800557a:	e022      	b.n	80055c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6919      	ldr	r1, [r3, #16]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	4613      	mov	r3, r2
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	4413      	add	r3, r2
 8005590:	2207      	movs	r2, #7
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43da      	mvns	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	400a      	ands	r2, r1
 800559e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6919      	ldr	r1, [r3, #16]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	4618      	mov	r0, r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4403      	add	r3, r0
 80055b8:	409a      	lsls	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d824      	bhi.n	8005614 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	3b05      	subs	r3, #5
 80055dc:	221f      	movs	r2, #31
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43da      	mvns	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	400a      	ands	r2, r1
 80055ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4618      	mov	r0, r3
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	3b05      	subs	r3, #5
 8005606:	fa00 f203 	lsl.w	r2, r0, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	635a      	str	r2, [r3, #52]	; 0x34
 8005612:	e04c      	b.n	80056ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b0c      	cmp	r3, #12
 800561a:	d824      	bhi.n	8005666 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	3b23      	subs	r3, #35	; 0x23
 800562e:	221f      	movs	r2, #31
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	43da      	mvns	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	400a      	ands	r2, r1
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	4618      	mov	r0, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	3b23      	subs	r3, #35	; 0x23
 8005658:	fa00 f203 	lsl.w	r2, r0, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
 8005664:	e023      	b.n	80056ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	3b41      	subs	r3, #65	; 0x41
 8005678:	221f      	movs	r2, #31
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43da      	mvns	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	400a      	ands	r2, r1
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	4618      	mov	r0, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	3b41      	subs	r3, #65	; 0x41
 80056a2:	fa00 f203 	lsl.w	r2, r0, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056ae:	4b22      	ldr	r3, [pc, #136]	; (8005738 <HAL_ADC_ConfigChannel+0x234>)
 80056b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_ADC_ConfigChannel+0x238>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d109      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x1cc>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b12      	cmp	r3, #18
 80056c2:	d105      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a19      	ldr	r2, [pc, #100]	; (800573c <HAL_ADC_ConfigChannel+0x238>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d123      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x21e>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b10      	cmp	r3, #16
 80056e0:	d003      	beq.n	80056ea <HAL_ADC_ConfigChannel+0x1e6>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b11      	cmp	r3, #17
 80056e8:	d11b      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d111      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056fe:	4b10      	ldr	r3, [pc, #64]	; (8005740 <HAL_ADC_ConfigChannel+0x23c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <HAL_ADC_ConfigChannel+0x240>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	0c9a      	lsrs	r2, r3, #18
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005714:	e002      	b.n	800571c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	3b01      	subs	r3, #1
 800571a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f9      	bne.n	8005716 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	40012300 	.word	0x40012300
 800573c:	40012000 	.word	0x40012000
 8005740:	200000a4 	.word	0x200000a4
 8005744:	431bde83 	.word	0x431bde83

08005748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005750:	4b79      	ldr	r3, [pc, #484]	; (8005938 <ADC_Init+0x1f0>)
 8005752:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	431a      	orrs	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800577c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	021a      	lsls	r2, r3, #8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80057a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6859      	ldr	r1, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6899      	ldr	r1, [r3, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	4a58      	ldr	r2, [pc, #352]	; (800593c <ADC_Init+0x1f4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d022      	beq.n	8005826 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6899      	ldr	r1, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6899      	ldr	r1, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	e00f      	b.n	8005846 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005844:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0202 	bic.w	r2, r2, #2
 8005854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6899      	ldr	r1, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7e1b      	ldrb	r3, [r3, #24]
 8005860:	005a      	lsls	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005882:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005892:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	3b01      	subs	r3, #1
 80058a0:	035a      	lsls	r2, r3, #13
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	e007      	b.n	80058bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	051a      	lsls	r2, r3, #20
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6899      	ldr	r1, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058fe:	025a      	lsls	r2, r3, #9
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6899      	ldr	r1, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	029a      	lsls	r2, r3, #10
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40012300 	.word	0x40012300
 800593c:	0f000001 	.word	0x0f000001

08005940 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005956:	2b00      	cmp	r3, #0
 8005958:	d13c      	bne.n	80059d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d12b      	bne.n	80059cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005978:	2b00      	cmp	r3, #0
 800597a:	d127      	bne.n	80059cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005994:	2b00      	cmp	r3, #0
 8005996:	d119      	bne.n	80059cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0220 	bic.w	r2, r2, #32
 80059a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	f043 0201 	orr.w	r2, r3, #1
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f7ff fd7b 	bl	80054c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80059d2:	e00e      	b.n	80059f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff fd85 	bl	80054f0 <HAL_ADC_ErrorCallback>
}
 80059e6:	e004      	b.n	80059f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	4798      	blx	r3
}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff fd67 	bl	80054dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2240      	movs	r2, #64	; 0x40
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	f043 0204 	orr.w	r2, r3, #4
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff fd5a 	bl	80054f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <__NVIC_SetPriorityGrouping+0x44>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a60:	4013      	ands	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a76:	4a04      	ldr	r2, [pc, #16]	; (8005a88 <__NVIC_SetPriorityGrouping+0x44>)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	60d3      	str	r3, [r2, #12]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	0a1b      	lsrs	r3, r3, #8
 8005a96:	f003 0307 	and.w	r3, r3, #7
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	e000ed00 	.word	0xe000ed00

08005aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	db0b      	blt.n	8005ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	f003 021f 	and.w	r2, r3, #31
 8005ac0:	4907      	ldr	r1, [pc, #28]	; (8005ae0 <__NVIC_EnableIRQ+0x38>)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	2001      	movs	r0, #1
 8005aca:	fa00 f202 	lsl.w	r2, r0, r2
 8005ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	e000e100 	.word	0xe000e100

08005ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	6039      	str	r1, [r7, #0]
 8005aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	db0a      	blt.n	8005b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	490c      	ldr	r1, [pc, #48]	; (8005b30 <__NVIC_SetPriority+0x4c>)
 8005afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b02:	0112      	lsls	r2, r2, #4
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	440b      	add	r3, r1
 8005b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b0c:	e00a      	b.n	8005b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	4908      	ldr	r1, [pc, #32]	; (8005b34 <__NVIC_SetPriority+0x50>)
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	3b04      	subs	r3, #4
 8005b1c:	0112      	lsls	r2, r2, #4
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	440b      	add	r3, r1
 8005b22:	761a      	strb	r2, [r3, #24]
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	e000e100 	.word	0xe000e100
 8005b34:	e000ed00 	.word	0xe000ed00

08005b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b089      	sub	sp, #36	; 0x24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f1c3 0307 	rsb	r3, r3, #7
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	bf28      	it	cs
 8005b56:	2304      	movcs	r3, #4
 8005b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2b06      	cmp	r3, #6
 8005b60:	d902      	bls.n	8005b68 <NVIC_EncodePriority+0x30>
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	3b03      	subs	r3, #3
 8005b66:	e000      	b.n	8005b6a <NVIC_EncodePriority+0x32>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43da      	mvns	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b80:	f04f 31ff 	mov.w	r1, #4294967295
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	43d9      	mvns	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b90:	4313      	orrs	r3, r2
         );
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3724      	adds	r7, #36	; 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bb0:	d301      	bcc.n	8005bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e00f      	b.n	8005bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bb6:	4a0a      	ldr	r2, [pc, #40]	; (8005be0 <SysTick_Config+0x40>)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bbe:	210f      	movs	r1, #15
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc4:	f7ff ff8e 	bl	8005ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <SysTick_Config+0x40>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bce:	4b04      	ldr	r3, [pc, #16]	; (8005be0 <SysTick_Config+0x40>)
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	e000e010 	.word	0xe000e010

08005be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff ff29 	bl	8005a44 <__NVIC_SetPriorityGrouping>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	4603      	mov	r3, r0
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c0c:	f7ff ff3e 	bl	8005a8c <__NVIC_GetPriorityGrouping>
 8005c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	6978      	ldr	r0, [r7, #20]
 8005c18:	f7ff ff8e 	bl	8005b38 <NVIC_EncodePriority>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c22:	4611      	mov	r1, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ff5d 	bl	8005ae4 <__NVIC_SetPriority>
}
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	4603      	mov	r3, r0
 8005c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ff31 	bl	8005aa8 <__NVIC_EnableIRQ>
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff ffa2 	bl	8005ba0 <SysTick_Config>
 8005c5c:	4603      	mov	r3, r0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e014      	b.n	8005ca2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	791b      	ldrb	r3, [r3, #4]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d105      	bne.n	8005c8e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7fb fb51 	bl	8001330 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2202      	movs	r2, #2
 8005c92:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	795b      	ldrb	r3, [r3, #5]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_DAC_Start_DMA+0x1e>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e09b      	b.n	8005e02 <HAL_DAC_Start_DMA+0x156>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d12f      	bne.n	8005d3c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4a4a      	ldr	r2, [pc, #296]	; (8005e0c <HAL_DAC_Start_DMA+0x160>)
 8005ce2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a49      	ldr	r2, [pc, #292]	; (8005e10 <HAL_DAC_Start_DMA+0x164>)
 8005cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	4a48      	ldr	r2, [pc, #288]	; (8005e14 <HAL_DAC_Start_DMA+0x168>)
 8005cf2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d02:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d013      	beq.n	8005d32 <HAL_DAC_Start_DMA+0x86>
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d845      	bhi.n	8005d9c <HAL_DAC_Start_DMA+0xf0>
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_DAC_Start_DMA+0x72>
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d005      	beq.n	8005d28 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005d1c:	e03e      	b.n	8005d9c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3308      	adds	r3, #8
 8005d24:	617b      	str	r3, [r7, #20]
        break;
 8005d26:	e03c      	b.n	8005da2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	617b      	str	r3, [r7, #20]
        break;
 8005d30:	e037      	b.n	8005da2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3310      	adds	r3, #16
 8005d38:	617b      	str	r3, [r7, #20]
        break;
 8005d3a:	e032      	b.n	8005da2 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4a35      	ldr	r2, [pc, #212]	; (8005e18 <HAL_DAC_Start_DMA+0x16c>)
 8005d42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	4a34      	ldr	r2, [pc, #208]	; (8005e1c <HAL_DAC_Start_DMA+0x170>)
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4a33      	ldr	r2, [pc, #204]	; (8005e20 <HAL_DAC_Start_DMA+0x174>)
 8005d52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d013      	beq.n	8005d92 <HAL_DAC_Start_DMA+0xe6>
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d817      	bhi.n	8005da0 <HAL_DAC_Start_DMA+0xf4>
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_DAC_Start_DMA+0xd2>
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d005      	beq.n	8005d88 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005d7c:	e010      	b.n	8005da0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3314      	adds	r3, #20
 8005d84:	617b      	str	r3, [r7, #20]
        break;
 8005d86:	e00c      	b.n	8005da2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3318      	adds	r3, #24
 8005d8e:	617b      	str	r3, [r7, #20]
        break;
 8005d90:	e007      	b.n	8005da2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	331c      	adds	r3, #28
 8005d98:	617b      	str	r3, [r7, #20]
        break;
 8005d9a:	e002      	b.n	8005da2 <HAL_DAC_Start_DMA+0xf6>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <HAL_DAC_Start_DMA+0xf6>
        break;
 8005da0:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10f      	bne.n	8005dc8 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005db6:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6898      	ldr	r0, [r3, #8]
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	f000 fa21 	bl	8006208 <HAL_DMA_Start_IT>
 8005dc6:	e00e      	b.n	8005de6 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005dd6:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68d8      	ldr	r0, [r3, #12]
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	f000 fa11 	bl	8006208 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6819      	ldr	r1, [r3, #0]
 8005dec:	2201      	movs	r2, #1
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	409a      	lsls	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08005f97 	.word	0x08005f97
 8005e10:	08005fb9 	.word	0x08005fb9
 8005e14:	08005fd5 	.word	0x08005fd5
 8005e18:	0800603f 	.word	0x0800603f
 8005e1c:	08006061 	.word	0x08006061
 8005e20:	0800607d 	.word	0x0800607d

08005e24 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6819      	ldr	r1, [r3, #0]
 8005e38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	43da      	mvns	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	400a      	ands	r2, r1
 8005e4a:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6819      	ldr	r1, [r3, #0]
 8005e52:	2201      	movs	r2, #1
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	43da      	mvns	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	400a      	ands	r2, r1
 8005e62:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d107      	bne.n	8005e7a <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fa22 	bl	80062b8 <HAL_DMA_Abort>
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]
 8005e78:	e006      	b.n	8005e88 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fa1a 	bl	80062b8 <HAL_DMA_Abort>
 8005e84:	4603      	mov	r3, r0
 8005e86:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2204      	movs	r2, #4
 8005e92:	711a      	strb	r2, [r3, #4]
 8005e94:	e002      	b.n	8005e9c <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b087      	sub	sp, #28
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	795b      	ldrb	r3, [r3, #5]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_DAC_ConfigChannel+0x20>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e036      	b.n	8005f70 <HAL_DAC_ConfigChannel+0x8e>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005f16:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	43db      	mvns	r3, r3
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4013      	ands	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6819      	ldr	r1, [r3, #0]
 8005f50:	22c0      	movs	r2, #192	; 0xc0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	fa02 f303 	lsl.w	r3, r2, r3
 8005f58:	43da      	mvns	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	400a      	ands	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef* hdac)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Return DAC state */
  return hdac->State;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	791b      	ldrb	r3, [r3, #4]
 8005f88:	b2db      	uxtb	r3, r3
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff ff7e 	bl	8005ea6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	711a      	strb	r2, [r3, #4]
}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7ff ff77 	bl	8005eba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f043 0204 	orr.w	r2, r3, #4
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f7ff ff6d 	bl	8005ece <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	711a      	strb	r2, [r3, #4]
}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff ffd8 	bl	8006002 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	711a      	strb	r2, [r3, #4]
}
 8006058:	bf00      	nop
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7ff ffd1 	bl	8006016 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006074:	bf00      	nop
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f043 0204 	orr.w	r2, r3, #4
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7ff ffc7 	bl	800602a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	711a      	strb	r2, [r3, #4]
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060b8:	f7ff f856 	bl	8005168 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e099      	b.n	80061fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060e8:	e00f      	b.n	800610a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060ea:	f7ff f83d 	bl	8005168 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b05      	cmp	r3, #5
 80060f6:	d908      	bls.n	800610a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2203      	movs	r2, #3
 8006102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e078      	b.n	80061fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e8      	bne.n	80060ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4b38      	ldr	r3, [pc, #224]	; (8006204 <HAL_DMA_Init+0x158>)
 8006124:	4013      	ands	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006136:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800614e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b04      	cmp	r3, #4
 8006162:	d107      	bne.n	8006174 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616c:	4313      	orrs	r3, r2
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f023 0307 	bic.w	r3, r3, #7
 800618a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	2b04      	cmp	r3, #4
 800619c:	d117      	bne.n	80061ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00e      	beq.n	80061ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fb01 	bl	80067b8 <DMA_CheckFifoParam>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2240      	movs	r2, #64	; 0x40
 80061c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80061ca:	2301      	movs	r3, #1
 80061cc:	e016      	b.n	80061fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fab8 	bl	800674c <DMA_CalcBaseAndBitshift>
 80061dc:	4603      	mov	r3, r0
 80061de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e4:	223f      	movs	r2, #63	; 0x3f
 80061e6:	409a      	lsls	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	f010803f 	.word	0xf010803f

08006208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_DMA_Start_IT+0x26>
 800622a:	2302      	movs	r3, #2
 800622c:	e040      	b.n	80062b0 <HAL_DMA_Start_IT+0xa8>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	d12f      	bne.n	80062a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fa4a 	bl	80066f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	223f      	movs	r2, #63	; 0x3f
 8006262:	409a      	lsls	r2, r3
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0216 	orr.w	r2, r2, #22
 8006276:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0208 	orr.w	r2, r2, #8
 800628e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	e005      	b.n	80062ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80062c6:	f7fe ff4f 	bl	8005168 <HAL_GetTick>
 80062ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d008      	beq.n	80062ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2280      	movs	r2, #128	; 0x80
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e052      	b.n	8006390 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0216 	bic.w	r2, r2, #22
 80062f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006308:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <HAL_DMA_Abort+0x62>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0208 	bic.w	r2, r2, #8
 8006328:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800633a:	e013      	b.n	8006364 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800633c:	f7fe ff14 	bl	8005168 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b05      	cmp	r3, #5
 8006348:	d90c      	bls.n	8006364 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2203      	movs	r2, #3
 800635c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e015      	b.n	8006390 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e4      	bne.n	800633c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006376:	223f      	movs	r2, #63	; 0x3f
 8006378:	409a      	lsls	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d004      	beq.n	80063b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2280      	movs	r2, #128	; 0x80
 80063b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e00c      	b.n	80063d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2205      	movs	r2, #5
 80063ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063e8:	4b92      	ldr	r3, [pc, #584]	; (8006634 <HAL_DMA_IRQHandler+0x258>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a92      	ldr	r2, [pc, #584]	; (8006638 <HAL_DMA_IRQHandler+0x25c>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	0a9b      	lsrs	r3, r3, #10
 80063f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006406:	2208      	movs	r2, #8
 8006408:	409a      	lsls	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4013      	ands	r3, r2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01a      	beq.n	8006448 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d013      	beq.n	8006448 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0204 	bic.w	r2, r2, #4
 800642e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006434:	2208      	movs	r2, #8
 8006436:	409a      	lsls	r2, r3
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	f043 0201 	orr.w	r2, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644c:	2201      	movs	r2, #1
 800644e:	409a      	lsls	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4013      	ands	r3, r2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d012      	beq.n	800647e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00b      	beq.n	800647e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646a:	2201      	movs	r2, #1
 800646c:	409a      	lsls	r2, r3
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006476:	f043 0202 	orr.w	r2, r3, #2
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006482:	2204      	movs	r2, #4
 8006484:	409a      	lsls	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4013      	ands	r3, r2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d012      	beq.n	80064b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a0:	2204      	movs	r2, #4
 80064a2:	409a      	lsls	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ac:	f043 0204 	orr.w	r2, r3, #4
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b8:	2210      	movs	r2, #16
 80064ba:	409a      	lsls	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4013      	ands	r3, r2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d043      	beq.n	800654c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d03c      	beq.n	800654c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d6:	2210      	movs	r2, #16
 80064d8:	409a      	lsls	r2, r3
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d018      	beq.n	800651e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d108      	bne.n	800650c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d024      	beq.n	800654c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	4798      	blx	r3
 800650a:	e01f      	b.n	800654c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01b      	beq.n	800654c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
 800651c:	e016      	b.n	800654c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006528:	2b00      	cmp	r3, #0
 800652a:	d107      	bne.n	800653c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0208 	bic.w	r2, r2, #8
 800653a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006550:	2220      	movs	r2, #32
 8006552:	409a      	lsls	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4013      	ands	r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 808e 	beq.w	800667a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8086 	beq.w	800667a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006572:	2220      	movs	r2, #32
 8006574:	409a      	lsls	r2, r3
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b05      	cmp	r3, #5
 8006584:	d136      	bne.n	80065f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0216 	bic.w	r2, r2, #22
 8006594:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695a      	ldr	r2, [r3, #20]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <HAL_DMA_IRQHandler+0x1da>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0208 	bic.w	r2, r2, #8
 80065c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ca:	223f      	movs	r2, #63	; 0x3f
 80065cc:	409a      	lsls	r2, r3
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d07d      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
        }
        return;
 80065f2:	e078      	b.n	80066e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01c      	beq.n	800663c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d108      	bne.n	8006622 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006614:	2b00      	cmp	r3, #0
 8006616:	d030      	beq.n	800667a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4798      	blx	r3
 8006620:	e02b      	b.n	800667a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d027      	beq.n	800667a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
 8006632:	e022      	b.n	800667a <HAL_DMA_IRQHandler+0x29e>
 8006634:	200000a4 	.word	0x200000a4
 8006638:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10f      	bne.n	800666a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0210 	bic.w	r2, r2, #16
 8006658:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	2b00      	cmp	r3, #0
 8006680:	d032      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d022      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2205      	movs	r2, #5
 8006692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0201 	bic.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60bb      	str	r3, [r7, #8]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d307      	bcc.n	80066c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f2      	bne.n	80066a6 <HAL_DMA_IRQHandler+0x2ca>
 80066c0:	e000      	b.n	80066c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80066c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
 80066e4:	e000      	b.n	80066e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80066e6:	bf00      	nop
    }
  }
}
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop

080066f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800670c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d108      	bne.n	8006730 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800672e:	e007      	b.n	8006740 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	60da      	str	r2, [r3, #12]
}
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	3b10      	subs	r3, #16
 800675c:	4a14      	ldr	r2, [pc, #80]	; (80067b0 <DMA_CalcBaseAndBitshift+0x64>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	091b      	lsrs	r3, r3, #4
 8006764:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006766:	4a13      	ldr	r2, [pc, #76]	; (80067b4 <DMA_CalcBaseAndBitshift+0x68>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b03      	cmp	r3, #3
 8006778:	d909      	bls.n	800678e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	1d1a      	adds	r2, r3, #4
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	659a      	str	r2, [r3, #88]	; 0x58
 800678c:	e007      	b.n	800679e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	aaaaaaab 	.word	0xaaaaaaab
 80067b4:	0800abd0 	.word	0x0800abd0

080067b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d11f      	bne.n	8006812 <DMA_CheckFifoParam+0x5a>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d856      	bhi.n	8006886 <DMA_CheckFifoParam+0xce>
 80067d8:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <DMA_CheckFifoParam+0x28>)
 80067da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067de:	bf00      	nop
 80067e0:	080067f1 	.word	0x080067f1
 80067e4:	08006803 	.word	0x08006803
 80067e8:	080067f1 	.word	0x080067f1
 80067ec:	08006887 	.word	0x08006887
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d046      	beq.n	800688a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006800:	e043      	b.n	800688a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800680a:	d140      	bne.n	800688e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006810:	e03d      	b.n	800688e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800681a:	d121      	bne.n	8006860 <DMA_CheckFifoParam+0xa8>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b03      	cmp	r3, #3
 8006820:	d837      	bhi.n	8006892 <DMA_CheckFifoParam+0xda>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <DMA_CheckFifoParam+0x70>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	08006839 	.word	0x08006839
 800682c:	0800683f 	.word	0x0800683f
 8006830:	08006839 	.word	0x08006839
 8006834:	08006851 	.word	0x08006851
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
      break;
 800683c:	e030      	b.n	80068a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d025      	beq.n	8006896 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800684e:	e022      	b.n	8006896 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006858:	d11f      	bne.n	800689a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800685e:	e01c      	b.n	800689a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b02      	cmp	r3, #2
 8006864:	d903      	bls.n	800686e <DMA_CheckFifoParam+0xb6>
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b03      	cmp	r3, #3
 800686a:	d003      	beq.n	8006874 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800686c:	e018      	b.n	80068a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	73fb      	strb	r3, [r7, #15]
      break;
 8006872:	e015      	b.n	80068a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00e      	beq.n	800689e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]
      break;
 8006884:	e00b      	b.n	800689e <DMA_CheckFifoParam+0xe6>
      break;
 8006886:	bf00      	nop
 8006888:	e00a      	b.n	80068a0 <DMA_CheckFifoParam+0xe8>
      break;
 800688a:	bf00      	nop
 800688c:	e008      	b.n	80068a0 <DMA_CheckFifoParam+0xe8>
      break;
 800688e:	bf00      	nop
 8006890:	e006      	b.n	80068a0 <DMA_CheckFifoParam+0xe8>
      break;
 8006892:	bf00      	nop
 8006894:	e004      	b.n	80068a0 <DMA_CheckFifoParam+0xe8>
      break;
 8006896:	bf00      	nop
 8006898:	e002      	b.n	80068a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <DMA_CheckFifoParam+0xe8>
      break;
 800689e:	bf00      	nop
    }
  } 
  
  return status; 
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop

080068b0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80068c2:	4b23      	ldr	r3, [pc, #140]	; (8006950 <HAL_FLASH_Program+0xa0>)
 80068c4:	7e1b      	ldrb	r3, [r3, #24]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <HAL_FLASH_Program+0x1e>
 80068ca:	2302      	movs	r3, #2
 80068cc:	e03b      	b.n	8006946 <HAL_FLASH_Program+0x96>
 80068ce:	4b20      	ldr	r3, [pc, #128]	; (8006950 <HAL_FLASH_Program+0xa0>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068d8:	f000 f860 	bl	800699c <FLASH_WaitForLastOperation>
 80068dc:	4603      	mov	r3, r0
 80068de:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d12b      	bne.n	800693e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d105      	bne.n	80068f8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80068ec:	783b      	ldrb	r3, [r7, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	68b8      	ldr	r0, [r7, #8]
 80068f2:	f000 f90b 	bl	8006b0c <FLASH_Program_Byte>
 80068f6:	e016      	b.n	8006926 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d105      	bne.n	800690a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80068fe:	883b      	ldrh	r3, [r7, #0]
 8006900:	4619      	mov	r1, r3
 8006902:	68b8      	ldr	r0, [r7, #8]
 8006904:	f000 f8de 	bl	8006ac4 <FLASH_Program_HalfWord>
 8006908:	e00d      	b.n	8006926 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d105      	bne.n	800691c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	4619      	mov	r1, r3
 8006914:	68b8      	ldr	r0, [r7, #8]
 8006916:	f000 f8b3 	bl	8006a80 <FLASH_Program_Word>
 800691a:	e004      	b.n	8006926 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800691c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006920:	68b8      	ldr	r0, [r7, #8]
 8006922:	f000 f87b 	bl	8006a1c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006926:	f24c 3050 	movw	r0, #50000	; 0xc350
 800692a:	f000 f837 	bl	800699c <FLASH_WaitForLastOperation>
 800692e:	4603      	mov	r3, r0
 8006930:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <HAL_FLASH_Program+0xa4>)
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	4a07      	ldr	r2, [pc, #28]	; (8006954 <HAL_FLASH_Program+0xa4>)
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800693e:	4b04      	ldr	r3, [pc, #16]	; (8006950 <HAL_FLASH_Program+0xa0>)
 8006940:	2200      	movs	r2, #0
 8006942:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20018d78 	.word	0x20018d78
 8006954:	40023c00 	.word	0x40023c00

08006958 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <HAL_FLASH_Unlock+0x38>)
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	da0b      	bge.n	8006982 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800696a:	4b09      	ldr	r3, [pc, #36]	; (8006990 <HAL_FLASH_Unlock+0x38>)
 800696c:	4a09      	ldr	r2, [pc, #36]	; (8006994 <HAL_FLASH_Unlock+0x3c>)
 800696e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <HAL_FLASH_Unlock+0x38>)
 8006972:	4a09      	ldr	r2, [pc, #36]	; (8006998 <HAL_FLASH_Unlock+0x40>)
 8006974:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006976:	4b06      	ldr	r3, [pc, #24]	; (8006990 <HAL_FLASH_Unlock+0x38>)
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	da01      	bge.n	8006982 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006982:	79fb      	ldrb	r3, [r7, #7]
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40023c00 	.word	0x40023c00
 8006994:	45670123 	.word	0x45670123
 8006998:	cdef89ab 	.word	0xcdef89ab

0800699c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80069a8:	4b1a      	ldr	r3, [pc, #104]	; (8006a14 <FLASH_WaitForLastOperation+0x78>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80069ae:	f7fe fbdb 	bl	8005168 <HAL_GetTick>
 80069b2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80069b4:	e010      	b.n	80069d8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d00c      	beq.n	80069d8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d007      	beq.n	80069d4 <FLASH_WaitForLastOperation+0x38>
 80069c4:	f7fe fbd0 	bl	8005168 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d201      	bcs.n	80069d8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e019      	b.n	8006a0c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <FLASH_WaitForLastOperation+0x7c>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e8      	bne.n	80069b6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <FLASH_WaitForLastOperation+0x7c>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80069f0:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <FLASH_WaitForLastOperation+0x7c>)
 80069f2:	2201      	movs	r2, #1
 80069f4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80069f6:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <FLASH_WaitForLastOperation+0x7c>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006a02:	f000 f8a5 	bl	8006b50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
  
}  
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20018d78 	.word	0x20018d78
 8006a18:	40023c00 	.word	0x40023c00

08006a1c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a28:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <FLASH_Program_DoubleWord+0x60>)
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <FLASH_Program_DoubleWord+0x60>)
 8006a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006a34:	4b11      	ldr	r3, [pc, #68]	; (8006a7c <FLASH_Program_DoubleWord+0x60>)
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	4a10      	ldr	r2, [pc, #64]	; (8006a7c <FLASH_Program_DoubleWord+0x60>)
 8006a3a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006a40:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <FLASH_Program_DoubleWord+0x60>)
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	4a0d      	ldr	r2, [pc, #52]	; (8006a7c <FLASH_Program_DoubleWord+0x60>)
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006a52:	f3bf 8f6f 	isb	sy
}
 8006a56:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	000a      	movs	r2, r1
 8006a66:	2300      	movs	r3, #0
 8006a68:	68f9      	ldr	r1, [r7, #12]
 8006a6a:	3104      	adds	r1, #4
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	600b      	str	r3, [r1, #0]
}
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	40023c00 	.word	0x40023c00

08006a80 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <FLASH_Program_Word+0x40>)
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <FLASH_Program_Word+0x40>)
 8006a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006a96:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <FLASH_Program_Word+0x40>)
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	4a09      	ldr	r2, [pc, #36]	; (8006ac0 <FLASH_Program_Word+0x40>)
 8006a9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aa0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006aa2:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <FLASH_Program_Word+0x40>)
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	4a06      	ldr	r2, [pc, #24]	; (8006ac0 <FLASH_Program_Word+0x40>)
 8006aa8:	f043 0301 	orr.w	r3, r3, #1
 8006aac:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40023c00 	.word	0x40023c00

08006ac4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <FLASH_Program_HalfWord+0x44>)
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	4a0c      	ldr	r2, [pc, #48]	; (8006b08 <FLASH_Program_HalfWord+0x44>)
 8006ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ada:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <FLASH_Program_HalfWord+0x44>)
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <FLASH_Program_HalfWord+0x44>)
 8006ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006ae8:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <FLASH_Program_HalfWord+0x44>)
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	4a06      	ldr	r2, [pc, #24]	; (8006b08 <FLASH_Program_HalfWord+0x44>)
 8006aee:	f043 0301 	orr.w	r3, r3, #1
 8006af2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	887a      	ldrh	r2, [r7, #2]
 8006af8:	801a      	strh	r2, [r3, #0]
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40023c00 	.word	0x40023c00

08006b0c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006b18:	4b0c      	ldr	r3, [pc, #48]	; (8006b4c <FLASH_Program_Byte+0x40>)
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	4a0b      	ldr	r2, [pc, #44]	; (8006b4c <FLASH_Program_Byte+0x40>)
 8006b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006b24:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <FLASH_Program_Byte+0x40>)
 8006b26:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <FLASH_Program_Byte+0x40>)
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006b2c:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <FLASH_Program_Byte+0x40>)
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	4a06      	ldr	r2, [pc, #24]	; (8006b4c <FLASH_Program_Byte+0x40>)
 8006b32:	f043 0301 	orr.w	r3, r3, #1
 8006b36:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	701a      	strb	r2, [r3, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40023c00 	.word	0x40023c00

08006b50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006b54:	4b27      	ldr	r3, [pc, #156]	; (8006bf4 <FLASH_SetErrorCode+0xa4>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006b60:	4b25      	ldr	r3, [pc, #148]	; (8006bf8 <FLASH_SetErrorCode+0xa8>)
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	f043 0310 	orr.w	r3, r3, #16
 8006b68:	4a23      	ldr	r2, [pc, #140]	; (8006bf8 <FLASH_SetErrorCode+0xa8>)
 8006b6a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006b6c:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <FLASH_SetErrorCode+0xa4>)
 8006b6e:	2210      	movs	r2, #16
 8006b70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006b72:	4b20      	ldr	r3, [pc, #128]	; (8006bf4 <FLASH_SetErrorCode+0xa4>)
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d008      	beq.n	8006b90 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006b7e:	4b1e      	ldr	r3, [pc, #120]	; (8006bf8 <FLASH_SetErrorCode+0xa8>)
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f043 0308 	orr.w	r3, r3, #8
 8006b86:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <FLASH_SetErrorCode+0xa8>)
 8006b88:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006b8a:	4b1a      	ldr	r3, [pc, #104]	; (8006bf4 <FLASH_SetErrorCode+0xa4>)
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006b90:	4b18      	ldr	r3, [pc, #96]	; (8006bf4 <FLASH_SetErrorCode+0xa4>)
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006b9c:	4b16      	ldr	r3, [pc, #88]	; (8006bf8 <FLASH_SetErrorCode+0xa8>)
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	f043 0304 	orr.w	r3, r3, #4
 8006ba4:	4a14      	ldr	r2, [pc, #80]	; (8006bf8 <FLASH_SetErrorCode+0xa8>)
 8006ba6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006ba8:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <FLASH_SetErrorCode+0xa4>)
 8006baa:	2240      	movs	r2, #64	; 0x40
 8006bac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006bae:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <FLASH_SetErrorCode+0xa4>)
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d008      	beq.n	8006bcc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006bba:	4b0f      	ldr	r3, [pc, #60]	; (8006bf8 <FLASH_SetErrorCode+0xa8>)
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f043 0302 	orr.w	r3, r3, #2
 8006bc2:	4a0d      	ldr	r2, [pc, #52]	; (8006bf8 <FLASH_SetErrorCode+0xa8>)
 8006bc4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <FLASH_SetErrorCode+0xa4>)
 8006bc8:	2280      	movs	r2, #128	; 0x80
 8006bca:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <FLASH_SetErrorCode+0xa4>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006bd8:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <FLASH_SetErrorCode+0xa8>)
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	f043 0320 	orr.w	r3, r3, #32
 8006be0:	4a05      	ldr	r2, [pc, #20]	; (8006bf8 <FLASH_SetErrorCode+0xa8>)
 8006be2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006be4:	4b03      	ldr	r3, [pc, #12]	; (8006bf4 <FLASH_SetErrorCode+0xa4>)
 8006be6:	2202      	movs	r2, #2
 8006be8:	60da      	str	r2, [r3, #12]
  }
}
 8006bea:	bf00      	nop
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	40023c00 	.word	0x40023c00
 8006bf8:	20018d78 	.word	0x20018d78

08006bfc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d102      	bne.n	8006c18 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	e010      	b.n	8006c3a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d103      	bne.n	8006c26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	e009      	b.n	8006c3a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d103      	bne.n	8006c34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e002      	b.n	8006c3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006c34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c38:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006c3a:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <FLASH_Erase_Sector+0x8c>)
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <FLASH_Erase_Sector+0x8c>)
 8006c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006c46:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <FLASH_Erase_Sector+0x8c>)
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	490f      	ldr	r1, [pc, #60]	; (8006c88 <FLASH_Erase_Sector+0x8c>)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006c52:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <FLASH_Erase_Sector+0x8c>)
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	4a0c      	ldr	r2, [pc, #48]	; (8006c88 <FLASH_Erase_Sector+0x8c>)
 8006c58:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006c5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <FLASH_Erase_Sector+0x8c>)
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	4313      	orrs	r3, r2
 8006c68:	4a07      	ldr	r2, [pc, #28]	; (8006c88 <FLASH_Erase_Sector+0x8c>)
 8006c6a:	f043 0302 	orr.w	r3, r3, #2
 8006c6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006c70:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <FLASH_Erase_Sector+0x8c>)
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	4a04      	ldr	r2, [pc, #16]	; (8006c88 <FLASH_Erase_Sector+0x8c>)
 8006c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7a:	6113      	str	r3, [r2, #16]
}
 8006c7c:	bf00      	nop
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	40023c00 	.word	0x40023c00

08006c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b089      	sub	sp, #36	; 0x24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	e16b      	b.n	8006f80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ca8:	2201      	movs	r2, #1
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	f040 815a 	bne.w	8006f7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d00b      	beq.n	8006ce6 <HAL_GPIO_Init+0x5a>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d007      	beq.n	8006ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006cda:	2b11      	cmp	r3, #17
 8006cdc:	d003      	beq.n	8006ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b12      	cmp	r3, #18
 8006ce4:	d130      	bne.n	8006d48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	43db      	mvns	r3, r3
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	091b      	lsrs	r3, r3, #4
 8006d32:	f003 0201 	and.w	r2, r3, #1
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	2203      	movs	r2, #3
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d003      	beq.n	8006d88 <HAL_GPIO_Init+0xfc>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b12      	cmp	r3, #18
 8006d86:	d123      	bne.n	8006dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	08da      	lsrs	r2, r3, #3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3208      	adds	r2, #8
 8006d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	220f      	movs	r2, #15
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	43db      	mvns	r3, r3
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	4013      	ands	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	08da      	lsrs	r2, r3, #3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3208      	adds	r2, #8
 8006dca:	69b9      	ldr	r1, [r7, #24]
 8006dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	2203      	movs	r2, #3
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	43db      	mvns	r3, r3
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	4013      	ands	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f003 0203 	and.w	r2, r3, #3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	fa02 f303 	lsl.w	r3, r2, r3
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80b4 	beq.w	8006f7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	4b60      	ldr	r3, [pc, #384]	; (8006f98 <HAL_GPIO_Init+0x30c>)
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	4a5f      	ldr	r2, [pc, #380]	; (8006f98 <HAL_GPIO_Init+0x30c>)
 8006e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e20:	6453      	str	r3, [r2, #68]	; 0x44
 8006e22:	4b5d      	ldr	r3, [pc, #372]	; (8006f98 <HAL_GPIO_Init+0x30c>)
 8006e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e2e:	4a5b      	ldr	r2, [pc, #364]	; (8006f9c <HAL_GPIO_Init+0x310>)
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	089b      	lsrs	r3, r3, #2
 8006e34:	3302      	adds	r3, #2
 8006e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	220f      	movs	r2, #15
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	43db      	mvns	r3, r3
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a52      	ldr	r2, [pc, #328]	; (8006fa0 <HAL_GPIO_Init+0x314>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d02b      	beq.n	8006eb2 <HAL_GPIO_Init+0x226>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a51      	ldr	r2, [pc, #324]	; (8006fa4 <HAL_GPIO_Init+0x318>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d025      	beq.n	8006eae <HAL_GPIO_Init+0x222>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a50      	ldr	r2, [pc, #320]	; (8006fa8 <HAL_GPIO_Init+0x31c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d01f      	beq.n	8006eaa <HAL_GPIO_Init+0x21e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a4f      	ldr	r2, [pc, #316]	; (8006fac <HAL_GPIO_Init+0x320>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d019      	beq.n	8006ea6 <HAL_GPIO_Init+0x21a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a4e      	ldr	r2, [pc, #312]	; (8006fb0 <HAL_GPIO_Init+0x324>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d013      	beq.n	8006ea2 <HAL_GPIO_Init+0x216>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a4d      	ldr	r2, [pc, #308]	; (8006fb4 <HAL_GPIO_Init+0x328>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00d      	beq.n	8006e9e <HAL_GPIO_Init+0x212>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a4c      	ldr	r2, [pc, #304]	; (8006fb8 <HAL_GPIO_Init+0x32c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <HAL_GPIO_Init+0x20e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a4b      	ldr	r2, [pc, #300]	; (8006fbc <HAL_GPIO_Init+0x330>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d101      	bne.n	8006e96 <HAL_GPIO_Init+0x20a>
 8006e92:	2307      	movs	r3, #7
 8006e94:	e00e      	b.n	8006eb4 <HAL_GPIO_Init+0x228>
 8006e96:	2308      	movs	r3, #8
 8006e98:	e00c      	b.n	8006eb4 <HAL_GPIO_Init+0x228>
 8006e9a:	2306      	movs	r3, #6
 8006e9c:	e00a      	b.n	8006eb4 <HAL_GPIO_Init+0x228>
 8006e9e:	2305      	movs	r3, #5
 8006ea0:	e008      	b.n	8006eb4 <HAL_GPIO_Init+0x228>
 8006ea2:	2304      	movs	r3, #4
 8006ea4:	e006      	b.n	8006eb4 <HAL_GPIO_Init+0x228>
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e004      	b.n	8006eb4 <HAL_GPIO_Init+0x228>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e002      	b.n	8006eb4 <HAL_GPIO_Init+0x228>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <HAL_GPIO_Init+0x228>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	69fa      	ldr	r2, [r7, #28]
 8006eb6:	f002 0203 	and.w	r2, r2, #3
 8006eba:	0092      	lsls	r2, r2, #2
 8006ebc:	4093      	lsls	r3, r2
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ec4:	4935      	ldr	r1, [pc, #212]	; (8006f9c <HAL_GPIO_Init+0x310>)
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	089b      	lsrs	r3, r3, #2
 8006eca:	3302      	adds	r3, #2
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ed2:	4b3b      	ldr	r3, [pc, #236]	; (8006fc0 <HAL_GPIO_Init+0x334>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	43db      	mvns	r3, r3
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ef6:	4a32      	ldr	r2, [pc, #200]	; (8006fc0 <HAL_GPIO_Init+0x334>)
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006efc:	4b30      	ldr	r3, [pc, #192]	; (8006fc0 <HAL_GPIO_Init+0x334>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	43db      	mvns	r3, r3
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f20:	4a27      	ldr	r2, [pc, #156]	; (8006fc0 <HAL_GPIO_Init+0x334>)
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f26:	4b26      	ldr	r3, [pc, #152]	; (8006fc0 <HAL_GPIO_Init+0x334>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	4013      	ands	r3, r2
 8006f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f4a:	4a1d      	ldr	r2, [pc, #116]	; (8006fc0 <HAL_GPIO_Init+0x334>)
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f50:	4b1b      	ldr	r3, [pc, #108]	; (8006fc0 <HAL_GPIO_Init+0x334>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f74:	4a12      	ldr	r2, [pc, #72]	; (8006fc0 <HAL_GPIO_Init+0x334>)
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	61fb      	str	r3, [r7, #28]
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	2b0f      	cmp	r3, #15
 8006f84:	f67f ae90 	bls.w	8006ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	3724      	adds	r7, #36	; 0x24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	40013800 	.word	0x40013800
 8006fa0:	40020000 	.word	0x40020000
 8006fa4:	40020400 	.word	0x40020400
 8006fa8:	40020800 	.word	0x40020800
 8006fac:	40020c00 	.word	0x40020c00
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	40021400 	.word	0x40021400
 8006fb8:	40021800 	.word	0x40021800
 8006fbc:	40021c00 	.word	0x40021c00
 8006fc0:	40013c00 	.word	0x40013c00

08006fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	887b      	ldrh	r3, [r7, #2]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73fb      	strb	r3, [r7, #15]
 8006fe0:	e001      	b.n	8006fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	807b      	strh	r3, [r7, #2]
 8007000:	4613      	mov	r3, r2
 8007002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007004:	787b      	ldrb	r3, [r7, #1]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800700a:	887a      	ldrh	r2, [r7, #2]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007010:	e003      	b.n	800701a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007012:	887b      	ldrh	r3, [r7, #2]
 8007014:	041a      	lsls	r2, r3, #16
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	619a      	str	r2, [r3, #24]
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e12b      	b.n	8007292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fa fc2a 	bl	80018a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	; 0x24
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800707a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800708a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800708c:	f001 f85c 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 8007090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	4a81      	ldr	r2, [pc, #516]	; (800729c <HAL_I2C_Init+0x274>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d807      	bhi.n	80070ac <HAL_I2C_Init+0x84>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a80      	ldr	r2, [pc, #512]	; (80072a0 <HAL_I2C_Init+0x278>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	bf94      	ite	ls
 80070a4:	2301      	movls	r3, #1
 80070a6:	2300      	movhi	r3, #0
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	e006      	b.n	80070ba <HAL_I2C_Init+0x92>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4a7d      	ldr	r2, [pc, #500]	; (80072a4 <HAL_I2C_Init+0x27c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	bf94      	ite	ls
 80070b4:	2301      	movls	r3, #1
 80070b6:	2300      	movhi	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e0e7      	b.n	8007292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4a78      	ldr	r2, [pc, #480]	; (80072a8 <HAL_I2C_Init+0x280>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	0c9b      	lsrs	r3, r3, #18
 80070cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	4a6a      	ldr	r2, [pc, #424]	; (800729c <HAL_I2C_Init+0x274>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d802      	bhi.n	80070fc <HAL_I2C_Init+0xd4>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	3301      	adds	r3, #1
 80070fa:	e009      	b.n	8007110 <HAL_I2C_Init+0xe8>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	4a69      	ldr	r2, [pc, #420]	; (80072ac <HAL_I2C_Init+0x284>)
 8007108:	fba2 2303 	umull	r2, r3, r2, r3
 800710c:	099b      	lsrs	r3, r3, #6
 800710e:	3301      	adds	r3, #1
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6812      	ldr	r2, [r2, #0]
 8007114:	430b      	orrs	r3, r1
 8007116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	495c      	ldr	r1, [pc, #368]	; (800729c <HAL_I2C_Init+0x274>)
 800712c:	428b      	cmp	r3, r1
 800712e:	d819      	bhi.n	8007164 <HAL_I2C_Init+0x13c>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	1e59      	subs	r1, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	fbb1 f3f3 	udiv	r3, r1, r3
 800713e:	1c59      	adds	r1, r3, #1
 8007140:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007144:	400b      	ands	r3, r1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <HAL_I2C_Init+0x138>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1e59      	subs	r1, r3, #1
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	fbb1 f3f3 	udiv	r3, r1, r3
 8007158:	3301      	adds	r3, #1
 800715a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800715e:	e051      	b.n	8007204 <HAL_I2C_Init+0x1dc>
 8007160:	2304      	movs	r3, #4
 8007162:	e04f      	b.n	8007204 <HAL_I2C_Init+0x1dc>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d111      	bne.n	8007190 <HAL_I2C_Init+0x168>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	1e58      	subs	r0, r3, #1
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6859      	ldr	r1, [r3, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	440b      	add	r3, r1
 800717a:	fbb0 f3f3 	udiv	r3, r0, r3
 800717e:	3301      	adds	r3, #1
 8007180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007184:	2b00      	cmp	r3, #0
 8007186:	bf0c      	ite	eq
 8007188:	2301      	moveq	r3, #1
 800718a:	2300      	movne	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	e012      	b.n	80071b6 <HAL_I2C_Init+0x18e>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	1e58      	subs	r0, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6859      	ldr	r1, [r3, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	0099      	lsls	r1, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80071a6:	3301      	adds	r3, #1
 80071a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <HAL_I2C_Init+0x196>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e022      	b.n	8007204 <HAL_I2C_Init+0x1dc>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10e      	bne.n	80071e4 <HAL_I2C_Init+0x1bc>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1e58      	subs	r0, r3, #1
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6859      	ldr	r1, [r3, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	440b      	add	r3, r1
 80071d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80071d8:	3301      	adds	r3, #1
 80071da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e2:	e00f      	b.n	8007204 <HAL_I2C_Init+0x1dc>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	1e58      	subs	r0, r3, #1
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6859      	ldr	r1, [r3, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	0099      	lsls	r1, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80071fa:	3301      	adds	r3, #1
 80071fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	6809      	ldr	r1, [r1, #0]
 8007208:	4313      	orrs	r3, r2
 800720a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	69da      	ldr	r2, [r3, #28]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6911      	ldr	r1, [r2, #16]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	68d2      	ldr	r2, [r2, #12]
 800723e:	4311      	orrs	r1, r2
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6812      	ldr	r2, [r2, #0]
 8007244:	430b      	orrs	r3, r1
 8007246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695a      	ldr	r2, [r3, #20]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	000186a0 	.word	0x000186a0
 80072a0:	001e847f 	.word	0x001e847f
 80072a4:	003d08ff 	.word	0x003d08ff
 80072a8:	431bde83 	.word	0x431bde83
 80072ac:	10624dd3 	.word	0x10624dd3

080072b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	607a      	str	r2, [r7, #4]
 80072ba:	461a      	mov	r2, r3
 80072bc:	460b      	mov	r3, r1
 80072be:	817b      	strh	r3, [r7, #10]
 80072c0:	4613      	mov	r3, r2
 80072c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072c4:	f7fd ff50 	bl	8005168 <HAL_GetTick>
 80072c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	f040 80e0 	bne.w	8007498 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	2319      	movs	r3, #25
 80072de:	2201      	movs	r2, #1
 80072e0:	4970      	ldr	r1, [pc, #448]	; (80074a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f964 	bl	80075b0 <I2C_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80072ee:	2302      	movs	r3, #2
 80072f0:	e0d3      	b.n	800749a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_I2C_Master_Transmit+0x50>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e0cc      	b.n	800749a <HAL_I2C_Master_Transmit+0x1ea>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b01      	cmp	r3, #1
 8007314:	d007      	beq.n	8007326 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f042 0201 	orr.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007334:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2221      	movs	r2, #33	; 0x21
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2210      	movs	r2, #16
 8007342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	893a      	ldrh	r2, [r7, #8]
 8007356:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735c:	b29a      	uxth	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4a50      	ldr	r2, [pc, #320]	; (80074a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007368:	8979      	ldrh	r1, [r7, #10]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	6a3a      	ldr	r2, [r7, #32]
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f89c 	bl	80074ac <I2C_MasterRequestWrite>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e08d      	b.n	800749a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	613b      	str	r3, [r7, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007394:	e066      	b.n	8007464 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	6a39      	ldr	r1, [r7, #32]
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 f9de 	bl	800775c <I2C_WaitOnTXEFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00d      	beq.n	80073c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d107      	bne.n	80073be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e06b      	b.n	800749a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d11b      	bne.n	8007438 <HAL_I2C_Master_Transmit+0x188>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007404:	2b00      	cmp	r3, #0
 8007406:	d017      	beq.n	8007438 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	6a39      	ldr	r1, [r7, #32]
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f9ce 	bl	80077de <I2C_WaitOnBTFFlagUntilTimeout>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00d      	beq.n	8007464 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	2b04      	cmp	r3, #4
 800744e:	d107      	bne.n	8007460 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800745e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e01a      	b.n	800749a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007468:	2b00      	cmp	r3, #0
 800746a:	d194      	bne.n	8007396 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800747a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	e000      	b.n	800749a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007498:	2302      	movs	r3, #2
  }
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	00100002 	.word	0x00100002
 80074a8:	ffff0000 	.word	0xffff0000

080074ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	607a      	str	r2, [r7, #4]
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	460b      	mov	r3, r1
 80074ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d006      	beq.n	80074d6 <I2C_MasterRequestWrite+0x2a>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d003      	beq.n	80074d6 <I2C_MasterRequestWrite+0x2a>
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074d4:	d108      	bne.n	80074e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	e00b      	b.n	8007500 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ec:	2b12      	cmp	r3, #18
 80074ee:	d107      	bne.n	8007500 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 f84f 	bl	80075b0 <I2C_WaitOnFlagUntilTimeout>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00d      	beq.n	8007534 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007526:	d103      	bne.n	8007530 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800752e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e035      	b.n	80075a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800753c:	d108      	bne.n	8007550 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800753e:	897b      	ldrh	r3, [r7, #10]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800754c:	611a      	str	r2, [r3, #16]
 800754e:	e01b      	b.n	8007588 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007550:	897b      	ldrh	r3, [r7, #10]
 8007552:	11db      	asrs	r3, r3, #7
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0306 	and.w	r3, r3, #6
 800755a:	b2db      	uxtb	r3, r3
 800755c:	f063 030f 	orn	r3, r3, #15
 8007560:	b2da      	uxtb	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	490e      	ldr	r1, [pc, #56]	; (80075a8 <I2C_MasterRequestWrite+0xfc>)
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 f875 	bl	800765e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e010      	b.n	80075a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800757e:	897b      	ldrh	r3, [r7, #10]
 8007580:	b2da      	uxtb	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4907      	ldr	r1, [pc, #28]	; (80075ac <I2C_MasterRequestWrite+0x100>)
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f865 	bl	800765e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	00010008 	.word	0x00010008
 80075ac:	00010002 	.word	0x00010002

080075b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	4613      	mov	r3, r2
 80075be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075c0:	e025      	b.n	800760e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d021      	beq.n	800760e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ca:	f7fd fdcd 	bl	8005168 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d302      	bcc.n	80075e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d116      	bne.n	800760e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f043 0220 	orr.w	r2, r3, #32
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e023      	b.n	8007656 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	0c1b      	lsrs	r3, r3, #16
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b01      	cmp	r3, #1
 8007616:	d10d      	bne.n	8007634 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	43da      	mvns	r2, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4013      	ands	r3, r2
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	bf0c      	ite	eq
 800762a:	2301      	moveq	r3, #1
 800762c:	2300      	movne	r3, #0
 800762e:	b2db      	uxtb	r3, r3
 8007630:	461a      	mov	r2, r3
 8007632:	e00c      	b.n	800764e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	43da      	mvns	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	429a      	cmp	r2, r3
 8007652:	d0b6      	beq.n	80075c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800766c:	e051      	b.n	8007712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800767c:	d123      	bne.n	80076c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800768c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007696:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	f043 0204 	orr.w	r2, r3, #4
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e046      	b.n	8007754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076cc:	d021      	beq.n	8007712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ce:	f7fd fd4b 	bl	8005168 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d302      	bcc.n	80076e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d116      	bne.n	8007712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	f043 0220 	orr.w	r2, r3, #32
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e020      	b.n	8007754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	0c1b      	lsrs	r3, r3, #16
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b01      	cmp	r3, #1
 800771a:	d10c      	bne.n	8007736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	43da      	mvns	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4013      	ands	r3, r2
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	bf14      	ite	ne
 800772e:	2301      	movne	r3, #1
 8007730:	2300      	moveq	r3, #0
 8007732:	b2db      	uxtb	r3, r3
 8007734:	e00b      	b.n	800774e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	43da      	mvns	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	4013      	ands	r3, r2
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	bf14      	ite	ne
 8007748:	2301      	movne	r3, #1
 800774a:	2300      	moveq	r3, #0
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d18d      	bne.n	800766e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007768:	e02d      	b.n	80077c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f878 	bl	8007860 <I2C_IsAcknowledgeFailed>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e02d      	b.n	80077d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d021      	beq.n	80077c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007782:	f7fd fcf1 	bl	8005168 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	d302      	bcc.n	8007798 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d116      	bne.n	80077c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f043 0220 	orr.w	r2, r3, #32
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e007      	b.n	80077d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d0:	2b80      	cmp	r3, #128	; 0x80
 80077d2:	d1ca      	bne.n	800776a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077ea:	e02d      	b.n	8007848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f837 	bl	8007860 <I2C_IsAcknowledgeFailed>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e02d      	b.n	8007858 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d021      	beq.n	8007848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007804:	f7fd fcb0 	bl	8005168 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	429a      	cmp	r2, r3
 8007812:	d302      	bcc.n	800781a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d116      	bne.n	8007848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	f043 0220 	orr.w	r2, r3, #32
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e007      	b.n	8007858 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b04      	cmp	r3, #4
 8007854:	d1ca      	bne.n	80077ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007876:	d11b      	bne.n	80078b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007880:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	f043 0204 	orr.w	r2, r3, #4
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e000      	b.n	80078b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e25b      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d075      	beq.n	80079ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078de:	4ba3      	ldr	r3, [pc, #652]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 030c 	and.w	r3, r3, #12
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d00c      	beq.n	8007904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078ea:	4ba0      	ldr	r3, [pc, #640]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d112      	bne.n	800791c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078f6:	4b9d      	ldr	r3, [pc, #628]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007902:	d10b      	bne.n	800791c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007904:	4b99      	ldr	r3, [pc, #612]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d05b      	beq.n	80079c8 <HAL_RCC_OscConfig+0x108>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d157      	bne.n	80079c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e236      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007924:	d106      	bne.n	8007934 <HAL_RCC_OscConfig+0x74>
 8007926:	4b91      	ldr	r3, [pc, #580]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a90      	ldr	r2, [pc, #576]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 800792c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	e01d      	b.n	8007970 <HAL_RCC_OscConfig+0xb0>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800793c:	d10c      	bne.n	8007958 <HAL_RCC_OscConfig+0x98>
 800793e:	4b8b      	ldr	r3, [pc, #556]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a8a      	ldr	r2, [pc, #552]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	4b88      	ldr	r3, [pc, #544]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a87      	ldr	r2, [pc, #540]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	e00b      	b.n	8007970 <HAL_RCC_OscConfig+0xb0>
 8007958:	4b84      	ldr	r3, [pc, #528]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a83      	ldr	r2, [pc, #524]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 800795e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	4b81      	ldr	r3, [pc, #516]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a80      	ldr	r2, [pc, #512]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 800796a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800796e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d013      	beq.n	80079a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007978:	f7fd fbf6 	bl	8005168 <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007980:	f7fd fbf2 	bl	8005168 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b64      	cmp	r3, #100	; 0x64
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e1fb      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007992:	4b76      	ldr	r3, [pc, #472]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f0      	beq.n	8007980 <HAL_RCC_OscConfig+0xc0>
 800799e:	e014      	b.n	80079ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a0:	f7fd fbe2 	bl	8005168 <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079a8:	f7fd fbde 	bl	8005168 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b64      	cmp	r3, #100	; 0x64
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e1e7      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ba:	4b6c      	ldr	r3, [pc, #432]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1f0      	bne.n	80079a8 <HAL_RCC_OscConfig+0xe8>
 80079c6:	e000      	b.n	80079ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d063      	beq.n	8007a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079d6:	4b65      	ldr	r3, [pc, #404]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 030c 	and.w	r3, r3, #12
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079e2:	4b62      	ldr	r3, [pc, #392]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079ea:	2b08      	cmp	r3, #8
 80079ec:	d11c      	bne.n	8007a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079ee:	4b5f      	ldr	r3, [pc, #380]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d116      	bne.n	8007a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079fa:	4b5c      	ldr	r3, [pc, #368]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <HAL_RCC_OscConfig+0x152>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d001      	beq.n	8007a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e1bb      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a12:	4b56      	ldr	r3, [pc, #344]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	4952      	ldr	r1, [pc, #328]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a26:	e03a      	b.n	8007a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d020      	beq.n	8007a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a30:	4b4f      	ldr	r3, [pc, #316]	; (8007b70 <HAL_RCC_OscConfig+0x2b0>)
 8007a32:	2201      	movs	r2, #1
 8007a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a36:	f7fd fb97 	bl	8005168 <HAL_GetTick>
 8007a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a3c:	e008      	b.n	8007a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a3e:	f7fd fb93 	bl	8005168 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d901      	bls.n	8007a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e19c      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a50:	4b46      	ldr	r3, [pc, #280]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d0f0      	beq.n	8007a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a5c:	4b43      	ldr	r3, [pc, #268]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	4940      	ldr	r1, [pc, #256]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	600b      	str	r3, [r1, #0]
 8007a70:	e015      	b.n	8007a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a72:	4b3f      	ldr	r3, [pc, #252]	; (8007b70 <HAL_RCC_OscConfig+0x2b0>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a78:	f7fd fb76 	bl	8005168 <HAL_GetTick>
 8007a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a80:	f7fd fb72 	bl	8005168 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e17b      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a92:	4b36      	ldr	r3, [pc, #216]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f0      	bne.n	8007a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d030      	beq.n	8007b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d016      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ab2:	4b30      	ldr	r3, [pc, #192]	; (8007b74 <HAL_RCC_OscConfig+0x2b4>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab8:	f7fd fb56 	bl	8005168 <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ac0:	f7fd fb52 	bl	8005168 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e15b      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ad2:	4b26      	ldr	r3, [pc, #152]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d0f0      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x200>
 8007ade:	e015      	b.n	8007b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ae0:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <HAL_RCC_OscConfig+0x2b4>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae6:	f7fd fb3f 	bl	8005168 <HAL_GetTick>
 8007aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aec:	e008      	b.n	8007b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007aee:	f7fd fb3b 	bl	8005168 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e144      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b00:	4b1a      	ldr	r3, [pc, #104]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1f0      	bne.n	8007aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 80a0 	beq.w	8007c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b1e:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10f      	bne.n	8007b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60bb      	str	r3, [r7, #8]
 8007b2e:	4b0f      	ldr	r3, [pc, #60]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	4a0e      	ldr	r2, [pc, #56]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b38:	6413      	str	r3, [r2, #64]	; 0x40
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <HAL_RCC_OscConfig+0x2ac>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b42:	60bb      	str	r3, [r7, #8]
 8007b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b46:	2301      	movs	r3, #1
 8007b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <HAL_RCC_OscConfig+0x2b8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d121      	bne.n	8007b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b56:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <HAL_RCC_OscConfig+0x2b8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a07      	ldr	r2, [pc, #28]	; (8007b78 <HAL_RCC_OscConfig+0x2b8>)
 8007b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b62:	f7fd fb01 	bl	8005168 <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b68:	e011      	b.n	8007b8e <HAL_RCC_OscConfig+0x2ce>
 8007b6a:	bf00      	nop
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	42470000 	.word	0x42470000
 8007b74:	42470e80 	.word	0x42470e80
 8007b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b7c:	f7fd faf4 	bl	8005168 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e0fd      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b8e:	4b81      	ldr	r3, [pc, #516]	; (8007d94 <HAL_RCC_OscConfig+0x4d4>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0f0      	beq.n	8007b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d106      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x2f0>
 8007ba2:	4b7d      	ldr	r3, [pc, #500]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	4a7c      	ldr	r2, [pc, #496]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007ba8:	f043 0301 	orr.w	r3, r3, #1
 8007bac:	6713      	str	r3, [r2, #112]	; 0x70
 8007bae:	e01c      	b.n	8007bea <HAL_RCC_OscConfig+0x32a>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	2b05      	cmp	r3, #5
 8007bb6:	d10c      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x312>
 8007bb8:	4b77      	ldr	r3, [pc, #476]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbc:	4a76      	ldr	r2, [pc, #472]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bbe:	f043 0304 	orr.w	r3, r3, #4
 8007bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bc4:	4b74      	ldr	r3, [pc, #464]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc8:	4a73      	ldr	r2, [pc, #460]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	6713      	str	r3, [r2, #112]	; 0x70
 8007bd0:	e00b      	b.n	8007bea <HAL_RCC_OscConfig+0x32a>
 8007bd2:	4b71      	ldr	r3, [pc, #452]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd6:	4a70      	ldr	r2, [pc, #448]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007bd8:	f023 0301 	bic.w	r3, r3, #1
 8007bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8007bde:	4b6e      	ldr	r3, [pc, #440]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be2:	4a6d      	ldr	r2, [pc, #436]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007be4:	f023 0304 	bic.w	r3, r3, #4
 8007be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d015      	beq.n	8007c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf2:	f7fd fab9 	bl	8005168 <HAL_GetTick>
 8007bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bf8:	e00a      	b.n	8007c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bfa:	f7fd fab5 	bl	8005168 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d901      	bls.n	8007c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e0bc      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c10:	4b61      	ldr	r3, [pc, #388]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0ee      	beq.n	8007bfa <HAL_RCC_OscConfig+0x33a>
 8007c1c:	e014      	b.n	8007c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c1e:	f7fd faa3 	bl	8005168 <HAL_GetTick>
 8007c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c24:	e00a      	b.n	8007c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c26:	f7fd fa9f 	bl	8005168 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d901      	bls.n	8007c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e0a6      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c3c:	4b56      	ldr	r3, [pc, #344]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1ee      	bne.n	8007c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d105      	bne.n	8007c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c4e:	4b52      	ldr	r3, [pc, #328]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	4a51      	ldr	r2, [pc, #324]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8092 	beq.w	8007d88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c64:	4b4c      	ldr	r3, [pc, #304]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 030c 	and.w	r3, r3, #12
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d05c      	beq.n	8007d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d141      	bne.n	8007cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c78:	4b48      	ldr	r3, [pc, #288]	; (8007d9c <HAL_RCC_OscConfig+0x4dc>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c7e:	f7fd fa73 	bl	8005168 <HAL_GetTick>
 8007c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c84:	e008      	b.n	8007c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c86:	f7fd fa6f 	bl	8005168 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d901      	bls.n	8007c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e078      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c98:	4b3f      	ldr	r3, [pc, #252]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1f0      	bne.n	8007c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	69da      	ldr	r2, [r3, #28]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	019b      	lsls	r3, r3, #6
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	041b      	lsls	r3, r3, #16
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	061b      	lsls	r3, r3, #24
 8007cc8:	4933      	ldr	r1, [pc, #204]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cce:	4b33      	ldr	r3, [pc, #204]	; (8007d9c <HAL_RCC_OscConfig+0x4dc>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cd4:	f7fd fa48 	bl	8005168 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cdc:	f7fd fa44 	bl	8005168 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e04d      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cee:	4b2a      	ldr	r3, [pc, #168]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0f0      	beq.n	8007cdc <HAL_RCC_OscConfig+0x41c>
 8007cfa:	e045      	b.n	8007d88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cfc:	4b27      	ldr	r3, [pc, #156]	; (8007d9c <HAL_RCC_OscConfig+0x4dc>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d02:	f7fd fa31 	bl	8005168 <HAL_GetTick>
 8007d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d08:	e008      	b.n	8007d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d0a:	f7fd fa2d 	bl	8005168 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d901      	bls.n	8007d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e036      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d1c:	4b1e      	ldr	r3, [pc, #120]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1f0      	bne.n	8007d0a <HAL_RCC_OscConfig+0x44a>
 8007d28:	e02e      	b.n	8007d88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e029      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d36:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <HAL_RCC_OscConfig+0x4d8>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d11c      	bne.n	8007d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d115      	bne.n	8007d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d5e:	4013      	ands	r3, r2
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10d      	bne.n	8007d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d106      	bne.n	8007d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d001      	beq.n	8007d88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e000      	b.n	8007d8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	40007000 	.word	0x40007000
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	42470060 	.word	0x42470060

08007da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0cc      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007db4:	4b68      	ldr	r3, [pc, #416]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 030f 	and.w	r3, r3, #15
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d90c      	bls.n	8007ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dc2:	4b65      	ldr	r3, [pc, #404]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dca:	4b63      	ldr	r3, [pc, #396]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 030f 	and.w	r3, r3, #15
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d001      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e0b8      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d020      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007df4:	4b59      	ldr	r3, [pc, #356]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	4a58      	ldr	r2, [pc, #352]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e0c:	4b53      	ldr	r3, [pc, #332]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	4a52      	ldr	r2, [pc, #328]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e18:	4b50      	ldr	r3, [pc, #320]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	494d      	ldr	r1, [pc, #308]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d044      	beq.n	8007ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d107      	bne.n	8007e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e3e:	4b47      	ldr	r3, [pc, #284]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d119      	bne.n	8007e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e07f      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d003      	beq.n	8007e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d107      	bne.n	8007e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e5e:	4b3f      	ldr	r3, [pc, #252]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d109      	bne.n	8007e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e06f      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e6e:	4b3b      	ldr	r3, [pc, #236]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e067      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e7e:	4b37      	ldr	r3, [pc, #220]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f023 0203 	bic.w	r2, r3, #3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4934      	ldr	r1, [pc, #208]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e90:	f7fd f96a 	bl	8005168 <HAL_GetTick>
 8007e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e96:	e00a      	b.n	8007eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e98:	f7fd f966 	bl	8005168 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e04f      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eae:	4b2b      	ldr	r3, [pc, #172]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f003 020c 	and.w	r2, r3, #12
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d1eb      	bne.n	8007e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ec0:	4b25      	ldr	r3, [pc, #148]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d20c      	bcs.n	8007ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ece:	4b22      	ldr	r3, [pc, #136]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	b2d2      	uxtb	r2, r2
 8007ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ed6:	4b20      	ldr	r3, [pc, #128]	; (8007f58 <HAL_RCC_ClockConfig+0x1b8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d001      	beq.n	8007ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e032      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d008      	beq.n	8007f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ef4:	4b19      	ldr	r3, [pc, #100]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	4916      	ldr	r1, [pc, #88]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f12:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	490e      	ldr	r1, [pc, #56]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f26:	f000 f821 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <HAL_RCC_ClockConfig+0x1bc>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	091b      	lsrs	r3, r3, #4
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	490a      	ldr	r1, [pc, #40]	; (8007f60 <HAL_RCC_ClockConfig+0x1c0>)
 8007f38:	5ccb      	ldrb	r3, [r1, r3]
 8007f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3e:	4a09      	ldr	r2, [pc, #36]	; (8007f64 <HAL_RCC_ClockConfig+0x1c4>)
 8007f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f42:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <HAL_RCC_ClockConfig+0x1c8>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fd f8ca 	bl	80050e0 <HAL_InitTick>

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	40023c00 	.word	0x40023c00
 8007f5c:	40023800 	.word	0x40023800
 8007f60:	0800abb8 	.word	0x0800abb8
 8007f64:	200000a4 	.word	0x200000a4
 8007f68:	200000a8 	.word	0x200000a8

08007f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	607b      	str	r3, [r7, #4]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f84:	4b67      	ldr	r3, [pc, #412]	; (8008124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 030c 	and.w	r3, r3, #12
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d00d      	beq.n	8007fac <HAL_RCC_GetSysClockFreq+0x40>
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	f200 80bd 	bhi.w	8008110 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	d003      	beq.n	8007fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f9e:	e0b7      	b.n	8008110 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fa0:	4b61      	ldr	r3, [pc, #388]	; (8008128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007fa2:	60bb      	str	r3, [r7, #8]
       break;
 8007fa4:	e0b7      	b.n	8008116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fa6:	4b61      	ldr	r3, [pc, #388]	; (800812c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007fa8:	60bb      	str	r3, [r7, #8]
      break;
 8007faa:	e0b4      	b.n	8008116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fac:	4b5d      	ldr	r3, [pc, #372]	; (8008124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fb6:	4b5b      	ldr	r3, [pc, #364]	; (8008124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d04d      	beq.n	800805e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fc2:	4b58      	ldr	r3, [pc, #352]	; (8008124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	099b      	lsrs	r3, r3, #6
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f04f 0300 	mov.w	r3, #0
 8007fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007fd2:	f04f 0100 	mov.w	r1, #0
 8007fd6:	ea02 0800 	and.w	r8, r2, r0
 8007fda:	ea03 0901 	and.w	r9, r3, r1
 8007fde:	4640      	mov	r0, r8
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	f04f 0200 	mov.w	r2, #0
 8007fe6:	f04f 0300 	mov.w	r3, #0
 8007fea:	014b      	lsls	r3, r1, #5
 8007fec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ff0:	0142      	lsls	r2, r0, #5
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	ebb0 0008 	subs.w	r0, r0, r8
 8007ffa:	eb61 0109 	sbc.w	r1, r1, r9
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	018b      	lsls	r3, r1, #6
 8008008:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800800c:	0182      	lsls	r2, r0, #6
 800800e:	1a12      	subs	r2, r2, r0
 8008010:	eb63 0301 	sbc.w	r3, r3, r1
 8008014:	f04f 0000 	mov.w	r0, #0
 8008018:	f04f 0100 	mov.w	r1, #0
 800801c:	00d9      	lsls	r1, r3, #3
 800801e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008022:	00d0      	lsls	r0, r2, #3
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	eb12 0208 	adds.w	r2, r2, r8
 800802c:	eb43 0309 	adc.w	r3, r3, r9
 8008030:	f04f 0000 	mov.w	r0, #0
 8008034:	f04f 0100 	mov.w	r1, #0
 8008038:	0259      	lsls	r1, r3, #9
 800803a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800803e:	0250      	lsls	r0, r2, #9
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4610      	mov	r0, r2
 8008046:	4619      	mov	r1, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	461a      	mov	r2, r3
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	f7f8 fd88 	bl	8000b64 <__aeabi_uldivmod>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4613      	mov	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	e04a      	b.n	80080f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800805e:	4b31      	ldr	r3, [pc, #196]	; (8008124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	099b      	lsrs	r3, r3, #6
 8008064:	461a      	mov	r2, r3
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800806e:	f04f 0100 	mov.w	r1, #0
 8008072:	ea02 0400 	and.w	r4, r2, r0
 8008076:	ea03 0501 	and.w	r5, r3, r1
 800807a:	4620      	mov	r0, r4
 800807c:	4629      	mov	r1, r5
 800807e:	f04f 0200 	mov.w	r2, #0
 8008082:	f04f 0300 	mov.w	r3, #0
 8008086:	014b      	lsls	r3, r1, #5
 8008088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800808c:	0142      	lsls	r2, r0, #5
 800808e:	4610      	mov	r0, r2
 8008090:	4619      	mov	r1, r3
 8008092:	1b00      	subs	r0, r0, r4
 8008094:	eb61 0105 	sbc.w	r1, r1, r5
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	018b      	lsls	r3, r1, #6
 80080a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80080a6:	0182      	lsls	r2, r0, #6
 80080a8:	1a12      	subs	r2, r2, r0
 80080aa:	eb63 0301 	sbc.w	r3, r3, r1
 80080ae:	f04f 0000 	mov.w	r0, #0
 80080b2:	f04f 0100 	mov.w	r1, #0
 80080b6:	00d9      	lsls	r1, r3, #3
 80080b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080bc:	00d0      	lsls	r0, r2, #3
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	1912      	adds	r2, r2, r4
 80080c4:	eb45 0303 	adc.w	r3, r5, r3
 80080c8:	f04f 0000 	mov.w	r0, #0
 80080cc:	f04f 0100 	mov.w	r1, #0
 80080d0:	0299      	lsls	r1, r3, #10
 80080d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80080d6:	0290      	lsls	r0, r2, #10
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4610      	mov	r0, r2
 80080de:	4619      	mov	r1, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f04f 0300 	mov.w	r3, #0
 80080e8:	f7f8 fd3c 	bl	8000b64 <__aeabi_uldivmod>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4613      	mov	r3, r2
 80080f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080f4:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	0c1b      	lsrs	r3, r3, #16
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	3301      	adds	r3, #1
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	fbb2 f3f3 	udiv	r3, r2, r3
 800810c:	60bb      	str	r3, [r7, #8]
      break;
 800810e:	e002      	b.n	8008116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008110:	4b05      	ldr	r3, [pc, #20]	; (8008128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008112:	60bb      	str	r3, [r7, #8]
      break;
 8008114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008116:	68bb      	ldr	r3, [r7, #8]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008122:	bf00      	nop
 8008124:	40023800 	.word	0x40023800
 8008128:	00f42400 	.word	0x00f42400
 800812c:	007a1200 	.word	0x007a1200

08008130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008134:	4b03      	ldr	r3, [pc, #12]	; (8008144 <HAL_RCC_GetHCLKFreq+0x14>)
 8008136:	681b      	ldr	r3, [r3, #0]
}
 8008138:	4618      	mov	r0, r3
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	200000a4 	.word	0x200000a4

08008148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800814c:	f7ff fff0 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 8008150:	4602      	mov	r2, r0
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	0a9b      	lsrs	r3, r3, #10
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	4903      	ldr	r1, [pc, #12]	; (800816c <HAL_RCC_GetPCLK1Freq+0x24>)
 800815e:	5ccb      	ldrb	r3, [r1, r3]
 8008160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008164:	4618      	mov	r0, r3
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40023800 	.word	0x40023800
 800816c:	0800abc8 	.word	0x0800abc8

08008170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008174:	f7ff ffdc 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 8008178:	4602      	mov	r2, r0
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	0b5b      	lsrs	r3, r3, #13
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	4903      	ldr	r1, [pc, #12]	; (8008194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008186:	5ccb      	ldrb	r3, [r1, r3]
 8008188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800818c:	4618      	mov	r0, r3
 800818e:	bd80      	pop	{r7, pc}
 8008190:	40023800 	.word	0x40023800
 8008194:	0800abc8 	.word	0x0800abc8

08008198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e01d      	b.n	80081e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d106      	bne.n	80081c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fc fdea 	bl	8004d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3304      	adds	r3, #4
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f000 f94c 	bl	8008474 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6a1a      	ldr	r2, [r3, #32]
 8008204:	f241 1311 	movw	r3, #4369	; 0x1111
 8008208:	4013      	ands	r3, r2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10f      	bne.n	800822e <HAL_TIM_Base_DeInit+0x40>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6a1a      	ldr	r2, [r3, #32]
 8008214:	f240 4344 	movw	r3, #1092	; 0x444
 8008218:	4013      	ands	r3, r2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d107      	bne.n	800822e <HAL_TIM_Base_DeInit+0x40>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0201 	bic.w	r2, r2, #1
 800822c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fc fde8 	bl	8004e04 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800824e:	b480      	push	{r7}
 8008250:	b085      	sub	sp, #20
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2202      	movs	r2, #2
 800825a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b06      	cmp	r3, #6
 800826e:	d007      	beq.n	8008280 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0201 	orr.w	r2, r2, #1
 800827e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2202      	movs	r2, #2
 80082a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6a1a      	ldr	r2, [r3, #32]
 80082ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80082b0:	4013      	ands	r3, r2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10f      	bne.n	80082d6 <HAL_TIM_Base_Stop+0x40>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6a1a      	ldr	r2, [r3, #32]
 80082bc:	f240 4344 	movw	r3, #1092	; 0x444
 80082c0:	4013      	ands	r3, r2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d107      	bne.n	80082d6 <HAL_TIM_Base_Stop+0x40>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0201 	bic.w	r2, r2, #1
 80082d4:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d101      	bne.n	8008304 <HAL_TIM_ConfigClockSource+0x18>
 8008300:	2302      	movs	r3, #2
 8008302:	e0b3      	b.n	800846c <HAL_TIM_ConfigClockSource+0x180>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008322:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800832a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800833c:	d03e      	beq.n	80083bc <HAL_TIM_ConfigClockSource+0xd0>
 800833e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008342:	f200 8087 	bhi.w	8008454 <HAL_TIM_ConfigClockSource+0x168>
 8008346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834a:	f000 8085 	beq.w	8008458 <HAL_TIM_ConfigClockSource+0x16c>
 800834e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008352:	d87f      	bhi.n	8008454 <HAL_TIM_ConfigClockSource+0x168>
 8008354:	2b70      	cmp	r3, #112	; 0x70
 8008356:	d01a      	beq.n	800838e <HAL_TIM_ConfigClockSource+0xa2>
 8008358:	2b70      	cmp	r3, #112	; 0x70
 800835a:	d87b      	bhi.n	8008454 <HAL_TIM_ConfigClockSource+0x168>
 800835c:	2b60      	cmp	r3, #96	; 0x60
 800835e:	d050      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x116>
 8008360:	2b60      	cmp	r3, #96	; 0x60
 8008362:	d877      	bhi.n	8008454 <HAL_TIM_ConfigClockSource+0x168>
 8008364:	2b50      	cmp	r3, #80	; 0x50
 8008366:	d03c      	beq.n	80083e2 <HAL_TIM_ConfigClockSource+0xf6>
 8008368:	2b50      	cmp	r3, #80	; 0x50
 800836a:	d873      	bhi.n	8008454 <HAL_TIM_ConfigClockSource+0x168>
 800836c:	2b40      	cmp	r3, #64	; 0x40
 800836e:	d058      	beq.n	8008422 <HAL_TIM_ConfigClockSource+0x136>
 8008370:	2b40      	cmp	r3, #64	; 0x40
 8008372:	d86f      	bhi.n	8008454 <HAL_TIM_ConfigClockSource+0x168>
 8008374:	2b30      	cmp	r3, #48	; 0x30
 8008376:	d064      	beq.n	8008442 <HAL_TIM_ConfigClockSource+0x156>
 8008378:	2b30      	cmp	r3, #48	; 0x30
 800837a:	d86b      	bhi.n	8008454 <HAL_TIM_ConfigClockSource+0x168>
 800837c:	2b20      	cmp	r3, #32
 800837e:	d060      	beq.n	8008442 <HAL_TIM_ConfigClockSource+0x156>
 8008380:	2b20      	cmp	r3, #32
 8008382:	d867      	bhi.n	8008454 <HAL_TIM_ConfigClockSource+0x168>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d05c      	beq.n	8008442 <HAL_TIM_ConfigClockSource+0x156>
 8008388:	2b10      	cmp	r3, #16
 800838a:	d05a      	beq.n	8008442 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800838c:	e062      	b.n	8008454 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	6899      	ldr	r1, [r3, #8]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	f000 f983 	bl	80086a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	609a      	str	r2, [r3, #8]
      break;
 80083ba:	e04e      	b.n	800845a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	6899      	ldr	r1, [r3, #8]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	f000 f96c 	bl	80086a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689a      	ldr	r2, [r3, #8]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083de:	609a      	str	r2, [r3, #8]
      break;
 80083e0:	e03b      	b.n	800845a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	6859      	ldr	r1, [r3, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	461a      	mov	r2, r3
 80083f0:	f000 f8e0 	bl	80085b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2150      	movs	r1, #80	; 0x50
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f939 	bl	8008672 <TIM_ITRx_SetConfig>
      break;
 8008400:	e02b      	b.n	800845a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	6859      	ldr	r1, [r3, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	461a      	mov	r2, r3
 8008410:	f000 f8ff 	bl	8008612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2160      	movs	r1, #96	; 0x60
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f929 	bl	8008672 <TIM_ITRx_SetConfig>
      break;
 8008420:	e01b      	b.n	800845a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6818      	ldr	r0, [r3, #0]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	6859      	ldr	r1, [r3, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	461a      	mov	r2, r3
 8008430:	f000 f8c0 	bl	80085b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2140      	movs	r1, #64	; 0x40
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f919 	bl	8008672 <TIM_ITRx_SetConfig>
      break;
 8008440:	e00b      	b.n	800845a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f000 f910 	bl	8008672 <TIM_ITRx_SetConfig>
      break;
 8008452:	e002      	b.n	800845a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008454:	bf00      	nop
 8008456:	e000      	b.n	800845a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008458:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a40      	ldr	r2, [pc, #256]	; (8008588 <TIM_Base_SetConfig+0x114>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d013      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008492:	d00f      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a3d      	ldr	r2, [pc, #244]	; (800858c <TIM_Base_SetConfig+0x118>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00b      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a3c      	ldr	r2, [pc, #240]	; (8008590 <TIM_Base_SetConfig+0x11c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d007      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a3b      	ldr	r2, [pc, #236]	; (8008594 <TIM_Base_SetConfig+0x120>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d003      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a3a      	ldr	r2, [pc, #232]	; (8008598 <TIM_Base_SetConfig+0x124>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d108      	bne.n	80084c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a2f      	ldr	r2, [pc, #188]	; (8008588 <TIM_Base_SetConfig+0x114>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d02b      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d4:	d027      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a2c      	ldr	r2, [pc, #176]	; (800858c <TIM_Base_SetConfig+0x118>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d023      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a2b      	ldr	r2, [pc, #172]	; (8008590 <TIM_Base_SetConfig+0x11c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d01f      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a2a      	ldr	r2, [pc, #168]	; (8008594 <TIM_Base_SetConfig+0x120>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d01b      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a29      	ldr	r2, [pc, #164]	; (8008598 <TIM_Base_SetConfig+0x124>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d017      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a28      	ldr	r2, [pc, #160]	; (800859c <TIM_Base_SetConfig+0x128>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d013      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a27      	ldr	r2, [pc, #156]	; (80085a0 <TIM_Base_SetConfig+0x12c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00f      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a26      	ldr	r2, [pc, #152]	; (80085a4 <TIM_Base_SetConfig+0x130>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00b      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a25      	ldr	r2, [pc, #148]	; (80085a8 <TIM_Base_SetConfig+0x134>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d007      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a24      	ldr	r2, [pc, #144]	; (80085ac <TIM_Base_SetConfig+0x138>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d003      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a23      	ldr	r2, [pc, #140]	; (80085b0 <TIM_Base_SetConfig+0x13c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d108      	bne.n	8008538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800852c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	689a      	ldr	r2, [r3, #8]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <TIM_Base_SetConfig+0x114>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d003      	beq.n	800856c <TIM_Base_SetConfig+0xf8>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a0c      	ldr	r2, [pc, #48]	; (8008598 <TIM_Base_SetConfig+0x124>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d103      	bne.n	8008574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	615a      	str	r2, [r3, #20]
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40010000 	.word	0x40010000
 800858c:	40000400 	.word	0x40000400
 8008590:	40000800 	.word	0x40000800
 8008594:	40000c00 	.word	0x40000c00
 8008598:	40010400 	.word	0x40010400
 800859c:	40014000 	.word	0x40014000
 80085a0:	40014400 	.word	0x40014400
 80085a4:	40014800 	.word	0x40014800
 80085a8:	40001800 	.word	0x40001800
 80085ac:	40001c00 	.word	0x40001c00
 80085b0:	40002000 	.word	0x40002000

080085b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	f023 0201 	bic.w	r2, r3, #1
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f023 030a 	bic.w	r3, r3, #10
 80085f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	621a      	str	r2, [r3, #32]
}
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008612:	b480      	push	{r7}
 8008614:	b087      	sub	sp, #28
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f023 0210 	bic.w	r2, r3, #16
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800863c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	031b      	lsls	r3, r3, #12
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4313      	orrs	r3, r2
 8008646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800864e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	4313      	orrs	r3, r2
 8008658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	621a      	str	r2, [r3, #32]
}
 8008666:	bf00      	nop
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4313      	orrs	r3, r2
 8008690:	f043 0307 	orr.w	r3, r3, #7
 8008694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	609a      	str	r2, [r3, #8]
}
 800869c:	bf00      	nop
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	021a      	lsls	r2, r3, #8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	609a      	str	r2, [r3, #8]
}
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e05a      	b.n	80087b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a21      	ldr	r2, [pc, #132]	; (80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d022      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874c:	d01d      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a1d      	ldr	r2, [pc, #116]	; (80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d018      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a1b      	ldr	r2, [pc, #108]	; (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d013      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a1a      	ldr	r2, [pc, #104]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00e      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a18      	ldr	r2, [pc, #96]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d009      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d004      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a15      	ldr	r2, [pc, #84]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d10c      	bne.n	80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	4313      	orrs	r3, r2
 800879a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	40010000 	.word	0x40010000
 80087c8:	40000400 	.word	0x40000400
 80087cc:	40000800 	.word	0x40000800
 80087d0:	40000c00 	.word	0x40000c00
 80087d4:	40010400 	.word	0x40010400
 80087d8:	40014000 	.word	0x40014000
 80087dc:	40001800 	.word	0x40001800

080087e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e03f      	b.n	8008872 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7fc fb9a 	bl	8004f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2224      	movs	r2, #36	; 0x24
 8008810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68da      	ldr	r2, [r3, #12]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 facb 	bl	8008dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	695a      	ldr	r2, [r3, #20]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68da      	ldr	r2, [r3, #12]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	4613      	mov	r3, r2
 8008886:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b20      	cmp	r3, #32
 8008892:	d130      	bne.n	80088f6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <HAL_UART_Transmit_IT+0x26>
 800889a:	88fb      	ldrh	r3, [r7, #6]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e029      	b.n	80088f8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <HAL_UART_Transmit_IT+0x38>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e022      	b.n	80088f8 <HAL_UART_Transmit_IT+0x7e>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	88fa      	ldrh	r2, [r7, #6]
 80088c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	88fa      	ldrh	r2, [r7, #6]
 80088ca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2221      	movs	r2, #33	; 0x21
 80088d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	e000      	b.n	80088f8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80088f6:	2302      	movs	r3, #2
  }
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008924:	2300      	movs	r3, #0
 8008926:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008928:	2300      	movs	r3, #0
 800892a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	f003 030f 	and.w	r3, r3, #15
 8008932:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10d      	bne.n	8008956 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	f003 0320 	and.w	r3, r3, #32
 8008940:	2b00      	cmp	r3, #0
 8008942:	d008      	beq.n	8008956 <HAL_UART_IRQHandler+0x52>
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	f003 0320 	and.w	r3, r3, #32
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f9b4 	bl	8008cbc <UART_Receive_IT>
      return;
 8008954:	e0d0      	b.n	8008af8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 80b0 	beq.w	8008abe <HAL_UART_IRQHandler+0x1ba>
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	d105      	bne.n	8008974 <HAL_UART_IRQHandler+0x70>
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 80a5 	beq.w	8008abe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <HAL_UART_IRQHandler+0x90>
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	f043 0201 	orr.w	r2, r3, #1
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	f003 0304 	and.w	r3, r3, #4
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <HAL_UART_IRQHandler+0xb0>
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ac:	f043 0202 	orr.w	r2, r3, #2
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <HAL_UART_IRQHandler+0xd0>
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d005      	beq.n	80089d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089cc:	f043 0204 	orr.w	r2, r3, #4
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	f003 0308 	and.w	r3, r3, #8
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00f      	beq.n	80089fe <HAL_UART_IRQHandler+0xfa>
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	f003 0320 	and.w	r3, r3, #32
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d104      	bne.n	80089f2 <HAL_UART_IRQHandler+0xee>
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d005      	beq.n	80089fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f6:	f043 0208 	orr.w	r2, r3, #8
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d077      	beq.n	8008af6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	f003 0320 	and.w	r3, r3, #32
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d007      	beq.n	8008a20 <HAL_UART_IRQHandler+0x11c>
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d002      	beq.n	8008a20 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f94e 	bl	8008cbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2a:	2b40      	cmp	r3, #64	; 0x40
 8008a2c:	bf0c      	ite	eq
 8008a2e:	2301      	moveq	r3, #1
 8008a30:	2300      	movne	r3, #0
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d102      	bne.n	8008a48 <HAL_UART_IRQHandler+0x144>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d031      	beq.n	8008aac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f897 	bl	8008b7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a58:	2b40      	cmp	r3, #64	; 0x40
 8008a5a:	d123      	bne.n	8008aa4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695a      	ldr	r2, [r3, #20]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a6a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d013      	beq.n	8008a9c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a78:	4a21      	ldr	r2, [pc, #132]	; (8008b00 <HAL_UART_IRQHandler+0x1fc>)
 8008a7a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fd fc89 	bl	8006398 <HAL_DMA_Abort_IT>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d016      	beq.n	8008aba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a96:	4610      	mov	r0, r2
 8008a98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a9a:	e00e      	b.n	8008aba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f845 	bl	8008b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa2:	e00a      	b.n	8008aba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f841 	bl	8008b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aaa:	e006      	b.n	8008aba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f83d 	bl	8008b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008ab8:	e01d      	b.n	8008af6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aba:	bf00      	nop
    return;
 8008abc:	e01b      	b.n	8008af6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d008      	beq.n	8008ada <HAL_UART_IRQHandler+0x1d6>
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f884 	bl	8008be0 <UART_Transmit_IT>
    return;
 8008ad8:	e00e      	b.n	8008af8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d009      	beq.n	8008af8 <HAL_UART_IRQHandler+0x1f4>
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d004      	beq.n	8008af8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8cc 	bl	8008c8c <UART_EndTransmit_IT>
    return;
 8008af4:	e000      	b.n	8008af8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8008af6:	bf00      	nop
  }
}
 8008af8:	3720      	adds	r7, #32
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	08008bb9 	.word	0x08008bb9

08008b04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	b2db      	uxtb	r3, r3
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b92:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	695a      	ldr	r2, [r3, #20]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 0201 	bic.w	r2, r2, #1
 8008ba2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7ff ffaa 	bl	8008b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bd8:	bf00      	nop
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b21      	cmp	r3, #33	; 0x21
 8008bf2:	d144      	bne.n	8008c7e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bfc:	d11a      	bne.n	8008c34 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c12:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d105      	bne.n	8008c28 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	1c9a      	adds	r2, r3, #2
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	621a      	str	r2, [r3, #32]
 8008c26:	e00e      	b.n	8008c46 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	621a      	str	r2, [r3, #32]
 8008c32:	e008      	b.n	8008c46 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	1c59      	adds	r1, r3, #1
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6211      	str	r1, [r2, #32]
 8008c3e:	781a      	ldrb	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	4619      	mov	r1, r3
 8008c54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10f      	bne.n	8008c7a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e000      	b.n	8008c80 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008c7e:	2302      	movs	r3, #2
  }
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68da      	ldr	r2, [r3, #12]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ca2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff ff29 	bl	8008b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b22      	cmp	r3, #34	; 0x22
 8008cce:	d171      	bne.n	8008db4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cd8:	d123      	bne.n	8008d22 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cde:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10e      	bne.n	8008d06 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfe:	1c9a      	adds	r2, r3, #2
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	629a      	str	r2, [r3, #40]	; 0x28
 8008d04:	e029      	b.n	8008d5a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8008d20:	e01b      	b.n	8008d5a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10a      	bne.n	8008d40 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6858      	ldr	r0, [r3, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d34:	1c59      	adds	r1, r3, #1
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6291      	str	r1, [r2, #40]	; 0x28
 8008d3a:	b2c2      	uxtb	r2, r0
 8008d3c:	701a      	strb	r2, [r3, #0]
 8008d3e:	e00c      	b.n	8008d5a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4c:	1c58      	adds	r0, r3, #1
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	6288      	str	r0, [r1, #40]	; 0x28
 8008d52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	3b01      	subs	r3, #1
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	4619      	mov	r1, r3
 8008d68:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d120      	bne.n	8008db0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68da      	ldr	r2, [r3, #12]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0220 	bic.w	r2, r2, #32
 8008d7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	695a      	ldr	r2, [r3, #20]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f022 0201 	bic.w	r2, r2, #1
 8008d9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff feb6 	bl	8008b18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	e002      	b.n	8008db6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	e000      	b.n	8008db6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008db4:	2302      	movs	r3, #2
  }
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
	...

08008dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	b0bd      	sub	sp, #244	; 0xf4
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ddc:	68d9      	ldr	r1, [r3, #12]
 8008dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	ea40 0301 	orr.w	r3, r0, r1
 8008de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e18:	f021 010c 	bic.w	r1, r1, #12
 8008e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e26:	430b      	orrs	r3, r1
 8008e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e3a:	6999      	ldr	r1, [r3, #24]
 8008e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	ea40 0301 	orr.w	r3, r0, r1
 8008e46:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e52:	f040 81a5 	bne.w	80091a0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	4bcd      	ldr	r3, [pc, #820]	; (8009194 <UART_SetConfig+0x3d4>)
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d006      	beq.n	8008e70 <UART_SetConfig+0xb0>
 8008e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	4bcb      	ldr	r3, [pc, #812]	; (8009198 <UART_SetConfig+0x3d8>)
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	f040 80cb 	bne.w	8009006 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e70:	f7ff f97e 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 8008e74:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e7c:	461c      	mov	r4, r3
 8008e7e:	f04f 0500 	mov.w	r5, #0
 8008e82:	4622      	mov	r2, r4
 8008e84:	462b      	mov	r3, r5
 8008e86:	1891      	adds	r1, r2, r2
 8008e88:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008e8c:	415b      	adcs	r3, r3
 8008e8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e92:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008e96:	1912      	adds	r2, r2, r4
 8008e98:	eb45 0303 	adc.w	r3, r5, r3
 8008e9c:	f04f 0000 	mov.w	r0, #0
 8008ea0:	f04f 0100 	mov.w	r1, #0
 8008ea4:	00d9      	lsls	r1, r3, #3
 8008ea6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008eaa:	00d0      	lsls	r0, r2, #3
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	1911      	adds	r1, r2, r4
 8008eb2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008eb6:	416b      	adcs	r3, r5
 8008eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	1891      	adds	r1, r2, r2
 8008eca:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008ece:	415b      	adcs	r3, r3
 8008ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ed4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008ed8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008edc:	f7f7 fe42 	bl	8000b64 <__aeabi_uldivmod>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4bad      	ldr	r3, [pc, #692]	; (800919c <UART_SetConfig+0x3dc>)
 8008ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8008eea:	095b      	lsrs	r3, r3, #5
 8008eec:	011e      	lsls	r6, r3, #4
 8008eee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ef2:	461c      	mov	r4, r3
 8008ef4:	f04f 0500 	mov.w	r5, #0
 8008ef8:	4622      	mov	r2, r4
 8008efa:	462b      	mov	r3, r5
 8008efc:	1891      	adds	r1, r2, r2
 8008efe:	67b9      	str	r1, [r7, #120]	; 0x78
 8008f00:	415b      	adcs	r3, r3
 8008f02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f04:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008f08:	1912      	adds	r2, r2, r4
 8008f0a:	eb45 0303 	adc.w	r3, r5, r3
 8008f0e:	f04f 0000 	mov.w	r0, #0
 8008f12:	f04f 0100 	mov.w	r1, #0
 8008f16:	00d9      	lsls	r1, r3, #3
 8008f18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f1c:	00d0      	lsls	r0, r2, #3
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	1911      	adds	r1, r2, r4
 8008f24:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008f28:	416b      	adcs	r3, r5
 8008f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	461a      	mov	r2, r3
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	1891      	adds	r1, r2, r2
 8008f3c:	6739      	str	r1, [r7, #112]	; 0x70
 8008f3e:	415b      	adcs	r3, r3
 8008f40:	677b      	str	r3, [r7, #116]	; 0x74
 8008f42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008f46:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008f4a:	f7f7 fe0b 	bl	8000b64 <__aeabi_uldivmod>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4b92      	ldr	r3, [pc, #584]	; (800919c <UART_SetConfig+0x3dc>)
 8008f54:	fba3 1302 	umull	r1, r3, r3, r2
 8008f58:	095b      	lsrs	r3, r3, #5
 8008f5a:	2164      	movs	r1, #100	; 0x64
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	3332      	adds	r3, #50	; 0x32
 8008f66:	4a8d      	ldr	r2, [pc, #564]	; (800919c <UART_SetConfig+0x3dc>)
 8008f68:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6c:	095b      	lsrs	r3, r3, #5
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f74:	441e      	add	r6, r3
 8008f76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f04f 0100 	mov.w	r1, #0
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	1894      	adds	r4, r2, r2
 8008f86:	66bc      	str	r4, [r7, #104]	; 0x68
 8008f88:	415b      	adcs	r3, r3
 8008f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f8c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008f90:	1812      	adds	r2, r2, r0
 8008f92:	eb41 0303 	adc.w	r3, r1, r3
 8008f96:	f04f 0400 	mov.w	r4, #0
 8008f9a:	f04f 0500 	mov.w	r5, #0
 8008f9e:	00dd      	lsls	r5, r3, #3
 8008fa0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008fa4:	00d4      	lsls	r4, r2, #3
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	462b      	mov	r3, r5
 8008faa:	1814      	adds	r4, r2, r0
 8008fac:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008fb0:	414b      	adcs	r3, r1
 8008fb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f04f 0300 	mov.w	r3, #0
 8008fc2:	1891      	adds	r1, r2, r2
 8008fc4:	6639      	str	r1, [r7, #96]	; 0x60
 8008fc6:	415b      	adcs	r3, r3
 8008fc8:	667b      	str	r3, [r7, #100]	; 0x64
 8008fca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008fce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008fd2:	f7f7 fdc7 	bl	8000b64 <__aeabi_uldivmod>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4b70      	ldr	r3, [pc, #448]	; (800919c <UART_SetConfig+0x3dc>)
 8008fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	2164      	movs	r1, #100	; 0x64
 8008fe4:	fb01 f303 	mul.w	r3, r1, r3
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	3332      	adds	r3, #50	; 0x32
 8008fee:	4a6b      	ldr	r2, [pc, #428]	; (800919c <UART_SetConfig+0x3dc>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	f003 0207 	and.w	r2, r3, #7
 8008ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4432      	add	r2, r6
 8009002:	609a      	str	r2, [r3, #8]
 8009004:	e26d      	b.n	80094e2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009006:	f7ff f89f 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 800900a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800900e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009012:	461c      	mov	r4, r3
 8009014:	f04f 0500 	mov.w	r5, #0
 8009018:	4622      	mov	r2, r4
 800901a:	462b      	mov	r3, r5
 800901c:	1891      	adds	r1, r2, r2
 800901e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009020:	415b      	adcs	r3, r3
 8009022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009028:	1912      	adds	r2, r2, r4
 800902a:	eb45 0303 	adc.w	r3, r5, r3
 800902e:	f04f 0000 	mov.w	r0, #0
 8009032:	f04f 0100 	mov.w	r1, #0
 8009036:	00d9      	lsls	r1, r3, #3
 8009038:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800903c:	00d0      	lsls	r0, r2, #3
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	1911      	adds	r1, r2, r4
 8009044:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009048:	416b      	adcs	r3, r5
 800904a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800904e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	461a      	mov	r2, r3
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	1891      	adds	r1, r2, r2
 800905c:	6539      	str	r1, [r7, #80]	; 0x50
 800905e:	415b      	adcs	r3, r3
 8009060:	657b      	str	r3, [r7, #84]	; 0x54
 8009062:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009066:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800906a:	f7f7 fd7b 	bl	8000b64 <__aeabi_uldivmod>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4b4a      	ldr	r3, [pc, #296]	; (800919c <UART_SetConfig+0x3dc>)
 8009074:	fba3 2302 	umull	r2, r3, r3, r2
 8009078:	095b      	lsrs	r3, r3, #5
 800907a:	011e      	lsls	r6, r3, #4
 800907c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009080:	461c      	mov	r4, r3
 8009082:	f04f 0500 	mov.w	r5, #0
 8009086:	4622      	mov	r2, r4
 8009088:	462b      	mov	r3, r5
 800908a:	1891      	adds	r1, r2, r2
 800908c:	64b9      	str	r1, [r7, #72]	; 0x48
 800908e:	415b      	adcs	r3, r3
 8009090:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009092:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009096:	1912      	adds	r2, r2, r4
 8009098:	eb45 0303 	adc.w	r3, r5, r3
 800909c:	f04f 0000 	mov.w	r0, #0
 80090a0:	f04f 0100 	mov.w	r1, #0
 80090a4:	00d9      	lsls	r1, r3, #3
 80090a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090aa:	00d0      	lsls	r0, r2, #3
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	1911      	adds	r1, r2, r4
 80090b2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80090b6:	416b      	adcs	r3, r5
 80090b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80090bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	461a      	mov	r2, r3
 80090c4:	f04f 0300 	mov.w	r3, #0
 80090c8:	1891      	adds	r1, r2, r2
 80090ca:	6439      	str	r1, [r7, #64]	; 0x40
 80090cc:	415b      	adcs	r3, r3
 80090ce:	647b      	str	r3, [r7, #68]	; 0x44
 80090d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80090d4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80090d8:	f7f7 fd44 	bl	8000b64 <__aeabi_uldivmod>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4b2e      	ldr	r3, [pc, #184]	; (800919c <UART_SetConfig+0x3dc>)
 80090e2:	fba3 1302 	umull	r1, r3, r3, r2
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	2164      	movs	r1, #100	; 0x64
 80090ea:	fb01 f303 	mul.w	r3, r1, r3
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	3332      	adds	r3, #50	; 0x32
 80090f4:	4a29      	ldr	r2, [pc, #164]	; (800919c <UART_SetConfig+0x3dc>)
 80090f6:	fba2 2303 	umull	r2, r3, r2, r3
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009102:	441e      	add	r6, r3
 8009104:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009108:	4618      	mov	r0, r3
 800910a:	f04f 0100 	mov.w	r1, #0
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	1894      	adds	r4, r2, r2
 8009114:	63bc      	str	r4, [r7, #56]	; 0x38
 8009116:	415b      	adcs	r3, r3
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800911a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800911e:	1812      	adds	r2, r2, r0
 8009120:	eb41 0303 	adc.w	r3, r1, r3
 8009124:	f04f 0400 	mov.w	r4, #0
 8009128:	f04f 0500 	mov.w	r5, #0
 800912c:	00dd      	lsls	r5, r3, #3
 800912e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009132:	00d4      	lsls	r4, r2, #3
 8009134:	4622      	mov	r2, r4
 8009136:	462b      	mov	r3, r5
 8009138:	1814      	adds	r4, r2, r0
 800913a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800913e:	414b      	adcs	r3, r1
 8009140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	461a      	mov	r2, r3
 800914c:	f04f 0300 	mov.w	r3, #0
 8009150:	1891      	adds	r1, r2, r2
 8009152:	6339      	str	r1, [r7, #48]	; 0x30
 8009154:	415b      	adcs	r3, r3
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
 8009158:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800915c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009160:	f7f7 fd00 	bl	8000b64 <__aeabi_uldivmod>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <UART_SetConfig+0x3dc>)
 800916a:	fba3 1302 	umull	r1, r3, r3, r2
 800916e:	095b      	lsrs	r3, r3, #5
 8009170:	2164      	movs	r1, #100	; 0x64
 8009172:	fb01 f303 	mul.w	r3, r1, r3
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	00db      	lsls	r3, r3, #3
 800917a:	3332      	adds	r3, #50	; 0x32
 800917c:	4a07      	ldr	r2, [pc, #28]	; (800919c <UART_SetConfig+0x3dc>)
 800917e:	fba2 2303 	umull	r2, r3, r2, r3
 8009182:	095b      	lsrs	r3, r3, #5
 8009184:	f003 0207 	and.w	r2, r3, #7
 8009188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4432      	add	r2, r6
 8009190:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009192:	e1a6      	b.n	80094e2 <UART_SetConfig+0x722>
 8009194:	40011000 	.word	0x40011000
 8009198:	40011400 	.word	0x40011400
 800919c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	4bd1      	ldr	r3, [pc, #836]	; (80094ec <UART_SetConfig+0x72c>)
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d006      	beq.n	80091ba <UART_SetConfig+0x3fa>
 80091ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	4bcf      	ldr	r3, [pc, #828]	; (80094f0 <UART_SetConfig+0x730>)
 80091b4:	429a      	cmp	r2, r3
 80091b6:	f040 80ca 	bne.w	800934e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80091ba:	f7fe ffd9 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 80091be:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091c6:	461c      	mov	r4, r3
 80091c8:	f04f 0500 	mov.w	r5, #0
 80091cc:	4622      	mov	r2, r4
 80091ce:	462b      	mov	r3, r5
 80091d0:	1891      	adds	r1, r2, r2
 80091d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80091d4:	415b      	adcs	r3, r3
 80091d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091dc:	1912      	adds	r2, r2, r4
 80091de:	eb45 0303 	adc.w	r3, r5, r3
 80091e2:	f04f 0000 	mov.w	r0, #0
 80091e6:	f04f 0100 	mov.w	r1, #0
 80091ea:	00d9      	lsls	r1, r3, #3
 80091ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091f0:	00d0      	lsls	r0, r2, #3
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	eb12 0a04 	adds.w	sl, r2, r4
 80091fa:	eb43 0b05 	adc.w	fp, r3, r5
 80091fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	4618      	mov	r0, r3
 8009206:	f04f 0100 	mov.w	r1, #0
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	f04f 0300 	mov.w	r3, #0
 8009212:	008b      	lsls	r3, r1, #2
 8009214:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009218:	0082      	lsls	r2, r0, #2
 800921a:	4650      	mov	r0, sl
 800921c:	4659      	mov	r1, fp
 800921e:	f7f7 fca1 	bl	8000b64 <__aeabi_uldivmod>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	4bb3      	ldr	r3, [pc, #716]	; (80094f4 <UART_SetConfig+0x734>)
 8009228:	fba3 2302 	umull	r2, r3, r3, r2
 800922c:	095b      	lsrs	r3, r3, #5
 800922e:	011e      	lsls	r6, r3, #4
 8009230:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009234:	4618      	mov	r0, r3
 8009236:	f04f 0100 	mov.w	r1, #0
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	1894      	adds	r4, r2, r2
 8009240:	623c      	str	r4, [r7, #32]
 8009242:	415b      	adcs	r3, r3
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
 8009246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800924a:	1812      	adds	r2, r2, r0
 800924c:	eb41 0303 	adc.w	r3, r1, r3
 8009250:	f04f 0400 	mov.w	r4, #0
 8009254:	f04f 0500 	mov.w	r5, #0
 8009258:	00dd      	lsls	r5, r3, #3
 800925a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800925e:	00d4      	lsls	r4, r2, #3
 8009260:	4622      	mov	r2, r4
 8009262:	462b      	mov	r3, r5
 8009264:	1814      	adds	r4, r2, r0
 8009266:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800926a:	414b      	adcs	r3, r1
 800926c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	4618      	mov	r0, r3
 8009278:	f04f 0100 	mov.w	r1, #0
 800927c:	f04f 0200 	mov.w	r2, #0
 8009280:	f04f 0300 	mov.w	r3, #0
 8009284:	008b      	lsls	r3, r1, #2
 8009286:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800928a:	0082      	lsls	r2, r0, #2
 800928c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009290:	f7f7 fc68 	bl	8000b64 <__aeabi_uldivmod>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4b96      	ldr	r3, [pc, #600]	; (80094f4 <UART_SetConfig+0x734>)
 800929a:	fba3 1302 	umull	r1, r3, r3, r2
 800929e:	095b      	lsrs	r3, r3, #5
 80092a0:	2164      	movs	r1, #100	; 0x64
 80092a2:	fb01 f303 	mul.w	r3, r1, r3
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	3332      	adds	r3, #50	; 0x32
 80092ac:	4a91      	ldr	r2, [pc, #580]	; (80094f4 <UART_SetConfig+0x734>)
 80092ae:	fba2 2303 	umull	r2, r3, r2, r3
 80092b2:	095b      	lsrs	r3, r3, #5
 80092b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092b8:	441e      	add	r6, r3
 80092ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092be:	4618      	mov	r0, r3
 80092c0:	f04f 0100 	mov.w	r1, #0
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	1894      	adds	r4, r2, r2
 80092ca:	61bc      	str	r4, [r7, #24]
 80092cc:	415b      	adcs	r3, r3
 80092ce:	61fb      	str	r3, [r7, #28]
 80092d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092d4:	1812      	adds	r2, r2, r0
 80092d6:	eb41 0303 	adc.w	r3, r1, r3
 80092da:	f04f 0400 	mov.w	r4, #0
 80092de:	f04f 0500 	mov.w	r5, #0
 80092e2:	00dd      	lsls	r5, r3, #3
 80092e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80092e8:	00d4      	lsls	r4, r2, #3
 80092ea:	4622      	mov	r2, r4
 80092ec:	462b      	mov	r3, r5
 80092ee:	1814      	adds	r4, r2, r0
 80092f0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80092f4:	414b      	adcs	r3, r1
 80092f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80092fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	4618      	mov	r0, r3
 8009302:	f04f 0100 	mov.w	r1, #0
 8009306:	f04f 0200 	mov.w	r2, #0
 800930a:	f04f 0300 	mov.w	r3, #0
 800930e:	008b      	lsls	r3, r1, #2
 8009310:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009314:	0082      	lsls	r2, r0, #2
 8009316:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800931a:	f7f7 fc23 	bl	8000b64 <__aeabi_uldivmod>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4b74      	ldr	r3, [pc, #464]	; (80094f4 <UART_SetConfig+0x734>)
 8009324:	fba3 1302 	umull	r1, r3, r3, r2
 8009328:	095b      	lsrs	r3, r3, #5
 800932a:	2164      	movs	r1, #100	; 0x64
 800932c:	fb01 f303 	mul.w	r3, r1, r3
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	011b      	lsls	r3, r3, #4
 8009334:	3332      	adds	r3, #50	; 0x32
 8009336:	4a6f      	ldr	r2, [pc, #444]	; (80094f4 <UART_SetConfig+0x734>)
 8009338:	fba2 2303 	umull	r2, r3, r2, r3
 800933c:	095b      	lsrs	r3, r3, #5
 800933e:	f003 020f 	and.w	r2, r3, #15
 8009342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4432      	add	r2, r6
 800934a:	609a      	str	r2, [r3, #8]
 800934c:	e0c9      	b.n	80094e2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800934e:	f7fe fefb 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 8009352:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009356:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800935a:	461c      	mov	r4, r3
 800935c:	f04f 0500 	mov.w	r5, #0
 8009360:	4622      	mov	r2, r4
 8009362:	462b      	mov	r3, r5
 8009364:	1891      	adds	r1, r2, r2
 8009366:	6139      	str	r1, [r7, #16]
 8009368:	415b      	adcs	r3, r3
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009370:	1912      	adds	r2, r2, r4
 8009372:	eb45 0303 	adc.w	r3, r5, r3
 8009376:	f04f 0000 	mov.w	r0, #0
 800937a:	f04f 0100 	mov.w	r1, #0
 800937e:	00d9      	lsls	r1, r3, #3
 8009380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009384:	00d0      	lsls	r0, r2, #3
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	eb12 0804 	adds.w	r8, r2, r4
 800938e:	eb43 0905 	adc.w	r9, r3, r5
 8009392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	4618      	mov	r0, r3
 800939a:	f04f 0100 	mov.w	r1, #0
 800939e:	f04f 0200 	mov.w	r2, #0
 80093a2:	f04f 0300 	mov.w	r3, #0
 80093a6:	008b      	lsls	r3, r1, #2
 80093a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093ac:	0082      	lsls	r2, r0, #2
 80093ae:	4640      	mov	r0, r8
 80093b0:	4649      	mov	r1, r9
 80093b2:	f7f7 fbd7 	bl	8000b64 <__aeabi_uldivmod>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4b4e      	ldr	r3, [pc, #312]	; (80094f4 <UART_SetConfig+0x734>)
 80093bc:	fba3 2302 	umull	r2, r3, r3, r2
 80093c0:	095b      	lsrs	r3, r3, #5
 80093c2:	011e      	lsls	r6, r3, #4
 80093c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093c8:	4618      	mov	r0, r3
 80093ca:	f04f 0100 	mov.w	r1, #0
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	1894      	adds	r4, r2, r2
 80093d4:	60bc      	str	r4, [r7, #8]
 80093d6:	415b      	adcs	r3, r3
 80093d8:	60fb      	str	r3, [r7, #12]
 80093da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093de:	1812      	adds	r2, r2, r0
 80093e0:	eb41 0303 	adc.w	r3, r1, r3
 80093e4:	f04f 0400 	mov.w	r4, #0
 80093e8:	f04f 0500 	mov.w	r5, #0
 80093ec:	00dd      	lsls	r5, r3, #3
 80093ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80093f2:	00d4      	lsls	r4, r2, #3
 80093f4:	4622      	mov	r2, r4
 80093f6:	462b      	mov	r3, r5
 80093f8:	1814      	adds	r4, r2, r0
 80093fa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80093fe:	414b      	adcs	r3, r1
 8009400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	4618      	mov	r0, r3
 800940c:	f04f 0100 	mov.w	r1, #0
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	f04f 0300 	mov.w	r3, #0
 8009418:	008b      	lsls	r3, r1, #2
 800941a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800941e:	0082      	lsls	r2, r0, #2
 8009420:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009424:	f7f7 fb9e 	bl	8000b64 <__aeabi_uldivmod>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4b31      	ldr	r3, [pc, #196]	; (80094f4 <UART_SetConfig+0x734>)
 800942e:	fba3 1302 	umull	r1, r3, r3, r2
 8009432:	095b      	lsrs	r3, r3, #5
 8009434:	2164      	movs	r1, #100	; 0x64
 8009436:	fb01 f303 	mul.w	r3, r1, r3
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	011b      	lsls	r3, r3, #4
 800943e:	3332      	adds	r3, #50	; 0x32
 8009440:	4a2c      	ldr	r2, [pc, #176]	; (80094f4 <UART_SetConfig+0x734>)
 8009442:	fba2 2303 	umull	r2, r3, r2, r3
 8009446:	095b      	lsrs	r3, r3, #5
 8009448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800944c:	441e      	add	r6, r3
 800944e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009452:	4618      	mov	r0, r3
 8009454:	f04f 0100 	mov.w	r1, #0
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	1894      	adds	r4, r2, r2
 800945e:	603c      	str	r4, [r7, #0]
 8009460:	415b      	adcs	r3, r3
 8009462:	607b      	str	r3, [r7, #4]
 8009464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009468:	1812      	adds	r2, r2, r0
 800946a:	eb41 0303 	adc.w	r3, r1, r3
 800946e:	f04f 0400 	mov.w	r4, #0
 8009472:	f04f 0500 	mov.w	r5, #0
 8009476:	00dd      	lsls	r5, r3, #3
 8009478:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800947c:	00d4      	lsls	r4, r2, #3
 800947e:	4622      	mov	r2, r4
 8009480:	462b      	mov	r3, r5
 8009482:	1814      	adds	r4, r2, r0
 8009484:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009488:	414b      	adcs	r3, r1
 800948a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800948e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	4618      	mov	r0, r3
 8009496:	f04f 0100 	mov.w	r1, #0
 800949a:	f04f 0200 	mov.w	r2, #0
 800949e:	f04f 0300 	mov.w	r3, #0
 80094a2:	008b      	lsls	r3, r1, #2
 80094a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094a8:	0082      	lsls	r2, r0, #2
 80094aa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80094ae:	f7f7 fb59 	bl	8000b64 <__aeabi_uldivmod>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <UART_SetConfig+0x734>)
 80094b8:	fba3 1302 	umull	r1, r3, r3, r2
 80094bc:	095b      	lsrs	r3, r3, #5
 80094be:	2164      	movs	r1, #100	; 0x64
 80094c0:	fb01 f303 	mul.w	r3, r1, r3
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	3332      	adds	r3, #50	; 0x32
 80094ca:	4a0a      	ldr	r2, [pc, #40]	; (80094f4 <UART_SetConfig+0x734>)
 80094cc:	fba2 2303 	umull	r2, r3, r2, r3
 80094d0:	095b      	lsrs	r3, r3, #5
 80094d2:	f003 020f 	and.w	r2, r3, #15
 80094d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4432      	add	r2, r6
 80094de:	609a      	str	r2, [r3, #8]
}
 80094e0:	e7ff      	b.n	80094e2 <UART_SetConfig+0x722>
 80094e2:	bf00      	nop
 80094e4:	37f4      	adds	r7, #244	; 0xf4
 80094e6:	46bd      	mov	sp, r7
 80094e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ec:	40011000 	.word	0x40011000
 80094f0:	40011400 	.word	0x40011400
 80094f4:	51eb851f 	.word	0x51eb851f

080094f8 <__libc_init_array>:
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	4d0d      	ldr	r5, [pc, #52]	; (8009530 <__libc_init_array+0x38>)
 80094fc:	4c0d      	ldr	r4, [pc, #52]	; (8009534 <__libc_init_array+0x3c>)
 80094fe:	1b64      	subs	r4, r4, r5
 8009500:	10a4      	asrs	r4, r4, #2
 8009502:	2600      	movs	r6, #0
 8009504:	42a6      	cmp	r6, r4
 8009506:	d109      	bne.n	800951c <__libc_init_array+0x24>
 8009508:	4d0b      	ldr	r5, [pc, #44]	; (8009538 <__libc_init_array+0x40>)
 800950a:	4c0c      	ldr	r4, [pc, #48]	; (800953c <__libc_init_array+0x44>)
 800950c:	f000 f87c 	bl	8009608 <_init>
 8009510:	1b64      	subs	r4, r4, r5
 8009512:	10a4      	asrs	r4, r4, #2
 8009514:	2600      	movs	r6, #0
 8009516:	42a6      	cmp	r6, r4
 8009518:	d105      	bne.n	8009526 <__libc_init_array+0x2e>
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009520:	4798      	blx	r3
 8009522:	3601      	adds	r6, #1
 8009524:	e7ee      	b.n	8009504 <__libc_init_array+0xc>
 8009526:	f855 3b04 	ldr.w	r3, [r5], #4
 800952a:	4798      	blx	r3
 800952c:	3601      	adds	r6, #1
 800952e:	e7f2      	b.n	8009516 <__libc_init_array+0x1e>
 8009530:	0800ac08 	.word	0x0800ac08
 8009534:	0800ac08 	.word	0x0800ac08
 8009538:	0800ac08 	.word	0x0800ac08
 800953c:	0800ac0c 	.word	0x0800ac0c

08009540 <__itoa>:
 8009540:	1e93      	subs	r3, r2, #2
 8009542:	2b22      	cmp	r3, #34	; 0x22
 8009544:	b510      	push	{r4, lr}
 8009546:	460c      	mov	r4, r1
 8009548:	d904      	bls.n	8009554 <__itoa+0x14>
 800954a:	2300      	movs	r3, #0
 800954c:	700b      	strb	r3, [r1, #0]
 800954e:	461c      	mov	r4, r3
 8009550:	4620      	mov	r0, r4
 8009552:	bd10      	pop	{r4, pc}
 8009554:	2a0a      	cmp	r2, #10
 8009556:	d109      	bne.n	800956c <__itoa+0x2c>
 8009558:	2800      	cmp	r0, #0
 800955a:	da07      	bge.n	800956c <__itoa+0x2c>
 800955c:	232d      	movs	r3, #45	; 0x2d
 800955e:	700b      	strb	r3, [r1, #0]
 8009560:	4240      	negs	r0, r0
 8009562:	2101      	movs	r1, #1
 8009564:	4421      	add	r1, r4
 8009566:	f000 f80d 	bl	8009584 <__utoa>
 800956a:	e7f1      	b.n	8009550 <__itoa+0x10>
 800956c:	2100      	movs	r1, #0
 800956e:	e7f9      	b.n	8009564 <__itoa+0x24>

08009570 <itoa>:
 8009570:	f7ff bfe6 	b.w	8009540 <__itoa>

08009574 <memset>:
 8009574:	4402      	add	r2, r0
 8009576:	4603      	mov	r3, r0
 8009578:	4293      	cmp	r3, r2
 800957a:	d100      	bne.n	800957e <memset+0xa>
 800957c:	4770      	bx	lr
 800957e:	f803 1b01 	strb.w	r1, [r3], #1
 8009582:	e7f9      	b.n	8009578 <memset+0x4>

08009584 <__utoa>:
 8009584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009586:	4c1f      	ldr	r4, [pc, #124]	; (8009604 <__utoa+0x80>)
 8009588:	b08b      	sub	sp, #44	; 0x2c
 800958a:	4605      	mov	r5, r0
 800958c:	460b      	mov	r3, r1
 800958e:	466e      	mov	r6, sp
 8009590:	f104 0c20 	add.w	ip, r4, #32
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	6861      	ldr	r1, [r4, #4]
 8009598:	4637      	mov	r7, r6
 800959a:	c703      	stmia	r7!, {r0, r1}
 800959c:	3408      	adds	r4, #8
 800959e:	4564      	cmp	r4, ip
 80095a0:	463e      	mov	r6, r7
 80095a2:	d1f7      	bne.n	8009594 <__utoa+0x10>
 80095a4:	7921      	ldrb	r1, [r4, #4]
 80095a6:	7139      	strb	r1, [r7, #4]
 80095a8:	1e91      	subs	r1, r2, #2
 80095aa:	6820      	ldr	r0, [r4, #0]
 80095ac:	6038      	str	r0, [r7, #0]
 80095ae:	2922      	cmp	r1, #34	; 0x22
 80095b0:	f04f 0100 	mov.w	r1, #0
 80095b4:	d904      	bls.n	80095c0 <__utoa+0x3c>
 80095b6:	7019      	strb	r1, [r3, #0]
 80095b8:	460b      	mov	r3, r1
 80095ba:	4618      	mov	r0, r3
 80095bc:	b00b      	add	sp, #44	; 0x2c
 80095be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c0:	1e58      	subs	r0, r3, #1
 80095c2:	4684      	mov	ip, r0
 80095c4:	fbb5 f7f2 	udiv	r7, r5, r2
 80095c8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80095cc:	fb02 5617 	mls	r6, r2, r7, r5
 80095d0:	4476      	add	r6, lr
 80095d2:	460c      	mov	r4, r1
 80095d4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80095d8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80095dc:	462e      	mov	r6, r5
 80095de:	42b2      	cmp	r2, r6
 80095e0:	f101 0101 	add.w	r1, r1, #1
 80095e4:	463d      	mov	r5, r7
 80095e6:	d9ed      	bls.n	80095c4 <__utoa+0x40>
 80095e8:	2200      	movs	r2, #0
 80095ea:	545a      	strb	r2, [r3, r1]
 80095ec:	1919      	adds	r1, r3, r4
 80095ee:	1aa5      	subs	r5, r4, r2
 80095f0:	42aa      	cmp	r2, r5
 80095f2:	dae2      	bge.n	80095ba <__utoa+0x36>
 80095f4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80095f8:	780e      	ldrb	r6, [r1, #0]
 80095fa:	7006      	strb	r6, [r0, #0]
 80095fc:	3201      	adds	r2, #1
 80095fe:	f801 5901 	strb.w	r5, [r1], #-1
 8009602:	e7f4      	b.n	80095ee <__utoa+0x6a>
 8009604:	0800abd8 	.word	0x0800abd8

08009608 <_init>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	bf00      	nop
 800960c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960e:	bc08      	pop	{r3}
 8009610:	469e      	mov	lr, r3
 8009612:	4770      	bx	lr

08009614 <_fini>:
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	bf00      	nop
 8009618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800961a:	bc08      	pop	{r3}
 800961c:	469e      	mov	lr, r3
 800961e:	4770      	bx	lr
